---
title: "humanHippocampus2024 Dataset"
format: html
---

### Introduction

In this section, we will include biased feature identification analysis using our developed method to show how `BatchSVG` helps to detect and visualize the biased features in SVGs. We will use the spatially-resolved transcriptomics (SRT) dataset from the [humanHippocampus](https://bioconductor.org/packages/humanHippocampus2024/) package.

```{r load packages, message=FALSE, warning=FALSE}
# library(humanHippocampus2024)
library(ExperimentHub)
library(SpatialExperiment)
library(SummarizedExperiment)
library(tidyr)
library(dplyr)
library(tibble)
library(cowplot)
library(here)
library(PRECAST)
library(Seurat)
library(BatchSVG)
library(ggspavis)
library(gridExtra)
```

The `humanHippocampus2024` dataset was collected from the adjacent tissue sections of the anterior human hippocampus (HPC) across ten adult neurotypical donors. The dataset is the `spatialExperiment` object generated and processed from the [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project.

```{r load data, comment=NA, warning=FALSE, message=FALSE}
ehub <- ExperimentHub()
spe <- ehub[["EH9605"]]

dim(spe)
```

We conducted data analysis using four samples from the raw data:

-   V11L05-333_B1

-   V11L05-333_D1

-   V11L05-335_D1

-   V11L05-336_A1.

```{r subset, message=FALSE, warning=FALSE, comment=NA}
fix_order <- distinct(
    as.data.frame(colData(spe)), slide, array, brnum, sample_id, 
    position, sex) %>% 
    arrange(slide, array)
sub4 <- fix_order$sample_id[c(14,16, 20,21)]
spe_sub4 <- spe[,spe$sample_id %in% sub4]

dim(spe_sub4)
```

### Select Spatially Variable Genes

We used the spatially variable genes set generated from [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project, and the collaborators used [nnSVG]((https://www.nature.com/articles/s41467-023-39748-z)) package.

```{r load res_ranks, message=FALSE, warning=FALSE, comment=NA}
load(here("data/nnSVG_outs_HE_only.rda"))
dim(res_ranks)
```

We refined our selection to include only the top 2,000 ranked features (rank $\leq$ 2000) and only genes that appear in more than one sample (n > 1).

After applying these criteria, we obtain 2,082 spatially variable genes across the four samples.

```{r load res_ranks subset, message=FALSE, warning=FALSE, comment=NA}
res_df_sub <- pivot_longer(
    rownames_to_column(as.data.frame(res_ranks), var<-"gene_id"), 
        colnames(res_ranks), 
    names_to="sample_id", 
    values_to="rank", 
    values_drop_na=TRUE)
    
res_df_sub <- filter(res_df_sub,
    sample_id %in% 
        c("V11L05-333_B1", "V11L05-333_D1", "V11L05-335_D1", "V11L05-336_A1"), 
    rank <= 2000) # top 2k sig features
    
svgs_sub4 <- group_by(res_df_sub, gene_id) |>
    tally() |> 
    filter(n>1)

nrow(svgs_sub4)
```

Finally, we obtained the subset spe object for our analysis.

```{r spe subset, comment=NA, message=FALSE, warning=FALSE}
spe_sub4 <- spe_sub4[rowData(spe_sub4)$gene_id %in% svgs_sub4$gene_id,]
rownames(spe_sub4) <- rowData(spe_sub4)$gene_id

spe_sub4
```

### Implement `BatchSVG`

#### Installation

(After accepted in [Bioconductor](https://bioconductor.org/)).

```{r install bioc, eval=FALSE}
if (!requireNamespace("BiocManager")) {
    install.packages("BiocManager")
}
BiocManager::install("BatchSVG")
```

Install the development version from [GitHub](https://christinehou11.github.io/BatchSVG).

```{r install dev, eval = FALSE}
remotes::install("christinehou11/BatchSVG")
```


#### `BatchSVG::featureSelect()`: Perform Feature Selection

We applied `featureSelect()` to `spe_sub4` dataset while adjusting for the batch effect *sample_id* and *sex*.

```{r feature select, comment = NA, warning=FALSE}
list_batch_df <- featureSelect(input = spe_sub4, 
    batch_effect = c("sample_id", "sex"), VGs = svgs_sub4$gene_id)
```

```{r feature select class, comment = NA, warning=FALSE}
class(list_batch_df)
```

```{r feature select head sample id, comment = NA, warning=FALSE}
head(list_batch_df$sample_id)
```

```{r feature select head sex, comment = NA, warning=FALSE}
head(list_batch_df$sex)
```

#### `BatchSVG::svg_nSD()`: Visualize SVG Selection for Batch Effect(s)

We utilized `svg_nSD()` function to generate visualizations for batch effects assessments in spatially variable genes (SVGs). The `svg_nSD()` function allows for multiple batch effects with corresponding `sd_interval_dev` and `sd_interval_rank`.

```{r svg, comment=NA, warning=FALSE, message=FALSE}
plots <- svg_nSD(list_batch_df = list_batch_df, 
                sd_interval_dev = c(10,10), sd_interval_rank = c(5,6))
```

```{r svg sample, warning=FALSE, message=FALSE, fig.width=10, fig.height=10}
plots$sample_id
```

```{r svg sex, warning=FALSE, message=FALSE, fig.width=10, fig.height=10}
plots$sex
```

#### `BatchSVG::biasDetect()`: Identify Biased Genes

The function `biasDetect()` is designed to identify and filter out biased genes across different batch effects. Using threshold values selected from the visualization results generated by `svg_nSD()`, this function systematically detects outliers that exceed a specified normalized standard deviation (nSD) threshold in either relative deviance change, rank difference, or both.

The function outputs visualizations comparing deviance and rank values with and without batch effects. Genes with high deviations, highlighted in color, are identified as potentially biased and can be excluded based on the selected nSD thresholds.

The function offers flexibility in customizing the plot aesthetics, allowing users to adjust the data point size (**plot_point_size**), shape (**plot_point_shape**), annotated text size (**plot_text_size**), and data point color pallete (**plot_pallete**). Default values are provided for these parameters if not specified. Users should refer to [ggplot2](https://ggplot2.tidyverse.org/index.html) aesthetic guidelines to ensure appropriate values are assigned for each parameter.

We will use `nSD_dev = 7` and `nSD_rank = 6` as the example. The user should adjust the value based on their dataset features.

**Usage of Different Threshold Options**

-   `threshold = "dev"`: Filters biased genes based only on the relative change in deviance. Genes with deviance changes exceeding the specified `nSD_dev` threshold are identified as batch-affected and can be removed.

```{r bias detect dev, comment = NA, message=FALSE, warning=FALSE}
bias_dev <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "dev", nSD_dev = 7)
```

```{r bias detect dev table, comment = NA, message=FALSE, warning=FALSE}
head(bias_dev$sample_id$Table)
```

```{r bias detect dev plot, message=FALSE, warning=FALSE, fig.height=3}
bias_dev$sample_id$Plot
```

We can change the data point size using **plot_point_size**.

```{r size change, message=FALSE, warning=FALSE, fig.width= 10, fig.height=6}
# size default = 3
bias_dev_size <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "dev", nSD_dev = 7, plot_point_size = c(2,4))

plot_grid(bias_dev_size$sample_id$Plot,bias_dev_size$sex$Plot)
```

-   `threshold = "rank"`: Identifies biased genes based solely on rank difference. Genes with rank shifts exceeding `nSD_rank` are considered biased.

```{r bias detect rank, comment = NA, message=FALSE, warning=FALSE}
bias_rank <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "rank", nSD_rank = 6)
```

```{r bias detect rank table, comment = NA, message=FALSE, warning=FALSE}
head(bias_rank$sex$Table)
```

```{r bias detect rank plot, fig.height=3, message=FALSE, warning=FALSE}
bias_rank$sex$Plot
```

We can change the data point shape using **plot_point_shape**.

```{r shape change, message=FALSE, warning=FALSE, fig.width= 10, fig.height=6}
# shape default = 16
bias_rank_shape <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "rank", nSD_rank = 6, plot_point_shape = c(2, 18))

plot_grid(bias_rank_shape$sample_id$Plot,bias_rank_shape$sex$Plot)
```

-   `threshold = "both"`: Detects biased genes based on both deviance change and rank difference, providing a more stringent filtering approach.

```{r both, comment = NA, message=FALSE, warning=FALSE}
bias_both <- biasDetect(list_batch_df = list_batch_df, threshold = "both",
    nSD_dev = 7, nSD_rank = 6)
```

```{r both plot,message=FALSE,warning=FALSE,fig.width=10, fig.height=6}
bias_both$sample_id$Plot
```

```{r both table, comment = NA, message=FALSE, warning=FALSE}
head(bias_both$sex$Table)
```

We can change the data point color using **plot_pallete**. The color pallete [here](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) can be referenced on since the function uses `RColorBrewer` to generate colors.

```{r color change, message=FALSE, warning=FALSE, fig.width= 10, fig.height=8}
# color default = "YlOrRd"
bias_both_color <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "both", nSD_dev = 7, nSD_rank = 6, plot_palette = "Greens")

plot_grid(bias_both_color$sample_id$Plot,bias_both_color$sex$Plot,nrow = 2)
```

We can change the text size using **plot_text_size**. We also specify the color palletes for both batch effects at the same time.

```{r text change, message=FALSE, warning=FALSE, fig.width= 10, fig.height=8}
# text size default = 3
bias_both_color_text <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "both", nSD_dev = 7, nSD_rank = 6, 
    plot_palette = c("Blues","Greens"), plot_text_size = c(2,4))

plot_grid(bias_both_color_text$sample_id$Plot,
    bias_both_color_text$sex$Plot,nrow = 2)
```

#### Refine SVGs by Removing Batch-Affected Outliers

Finally, we obtain a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for `nSD_dev` and `nSD_rank`.

Here, we use the results from bias_both, which applied `threshold = "both"` to account for both deviance and rank differences, with the batch effect set to sample ID.

```{r new svgs, comment = NA, message=FALSE, warning=FALSE}
bias_both_df <- bias_both$sample_id$Table
svgs_filt <- setdiff(svgs_sub4$gene_id, bias_both_df$gene_id)
svgs_sub4_filt <- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt, ]
nrow(svgs_sub4_filt)
```

After obtaining the refined set of SVGs, these genes can be further analyzed using established spatial transcriptomics clustering algorithms to explore tissue layers and spatial organization.


### Compare clustering performances

#### Old SVGs



#### Refined SVGs

#### Plots comparison

### `R` session information {.unnumbered}

```{r 'sessionInfo'}
## Session info
sessionInfo()
```
