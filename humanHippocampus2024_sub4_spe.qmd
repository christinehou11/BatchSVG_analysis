---
title: "humanHippocampus2024 Dataset"
format: html
---

### Introduction

In this section, we will include biased feature identification analysis using our developed method to show how `BatchSVG` helps to detect and visualize the biased features in SVGs. We will use the spatially-resolved transcriptomics (SRT) dataset from the [humanHippocampus](https://bioconductor.org/packages/humanHippocampus2024/) package.

```{r load packages, message=FALSE, warning=FALSE}
# library(humanHippocampus2024)
library(ExperimentHub)
library(SpatialExperiment)
library(SummarizedExperiment)
library(tidyr)
library(dplyr)
library(tibble)
library(cowplot)
library(here)
library(PRECAST)
library(Seurat)
library(BatchSVG)
library(ggspavis)
library(gridExtra)
library(scater)
```

The `humanHippocampus2024` dataset was collected from the adjacent tissue sections of the anterior human hippocampus (HPC) across ten adult neurotypical donors. The dataset is the `spatialExperiment` object generated and processed from the [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project. This dataset has 9 slides and 4 samples from each slide.

```{r load data, comment=NA, warning=FALSE, message=FALSE}
ehub <- ExperimentHub()
spe <- ehub[["EH9605"]]

dim(spe)

table(colData(spe)[,c("sample_id","slide")])
```

We conducted data analysis using four samples from the raw data:

-   V11L05-333_B1

-   V11L05-333_D1

-   V11L05-335_D1

-   V11L05-336_A1.

```{r subset, message=FALSE, warning=FALSE, comment=NA}
fix_order <- distinct(
    as.data.frame(colData(spe)), slide, array, brnum, sample_id, 
    position, sex) %>% 
    arrange(slide, array)
sub4 <- fix_order$sample_id[c(14,16, 20,21)]
spe_sub4 <- spe[,spe$sample_id %in% sub4]

dim(spe_sub4)

# sample_id vs. slide
table_data_slide <- table(colData(spe_sub4)[, c("sample_id", "slide")])
subset_table_slide <- table_data_slide[rownames(table_data_slide) %in% c("V11L05-333_B1", "V11L05-333_D1", "V11L05-335_D1", "V11L05-336_A1"), ]
subset_table_slide_2 <- subset_table_slide[,colnames(subset_table_slide) %in% c("V11L05-333", "V11L05-335", "V11L05-336") ]
subset_table_slide_2

# sample_id vs. sex
table_data_sex <- table(colData(spe_sub4)[, c("sample_id", "sex")])
subset_table_sex <- table_data_sex[rownames(table_data_sex) %in% c("V11L05-333_B1", "V11L05-333_D1", "V11L05-335_D1", "V11L05-336_A1"), ]
subset_table_sex
```

### Select Spatially Variable Genes

We used the spatially variable genes set generated from [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project, and the collaborators used [nnSVG]((https://www.nature.com/articles/s41467-023-39748-z)) package.

```{r load res_ranks, message=FALSE, warning=FALSE, comment=NA}
load(here("data/nnSVG_outs_HE_only.rda"))
dim(res_ranks)
```

We refined our selection to include only the top 2,000 ranked features (rank $\leq$ 2000) and only genes that appear in more than one sample (n \> 1).

After applying these criteria, we obtain 2082 spatially variable genes across the four samples.

```{r load res_ranks subset, message=FALSE, warning=FALSE, comment=NA}
res_df_sub <- pivot_longer(
    rownames_to_column(as.data.frame(res_ranks), var<-"gene_id"), 
        colnames(res_ranks), 
    names_to="sample_id", 
    values_to="rank", 
    values_drop_na=TRUE)
    
res_df_sub <- filter(res_df_sub,
    sample_id %in% 
        c("V11L05-333_B1", "V11L05-333_D1", "V11L05-335_D1", "V11L05-336_A1"), 
    rank <= 2000) # top 2k sig features
    
svgs_sub4 <- group_by(res_df_sub, gene_id) |>
    tally() |> 
    filter(n>1)

nrow(svgs_sub4)
```

Finally, we obtained the subset spe object for our analysis.

```{r spe subset, comment=NA, message=FALSE, warning=FALSE}
spe_sub4 <- spe_sub4[rowData(spe_sub4)$gene_id %in% svgs_sub4$gene_id,]
rownames(spe_sub4) <- rowData(spe_sub4)$gene_id

spe_sub4
```

### Implement `BatchSVG`

#### Installation

(After accepted in [Bioconductor](https://bioconductor.org/)).

```{r install bioc, eval=FALSE}
if (!requireNamespace("BiocManager")) {
    install.packages("BiocManager")
}
BiocManager::install("BatchSVG")
```

Install the development version from [GitHub](https://christinehou11.github.io/BatchSVG).

```{r install dev, eval = FALSE}
remotes::install("christinehou11/BatchSVG")
```

#### `BatchSVG::featureSelect()`: Perform Feature Selection

We applied `featureSelect()` to `spe_sub4` dataset while adjusting for the batch effect *sample_id* and *sex*. Different from the `spatialLIBD` dataset analysis, we showed how `BatchSVG` package can conduct the biased feature identification for multiple batch effects at the same time with specific thresholds for relative change in deviance and rank respectively. 

```{r feature select, comment = NA, warning=FALSE}
list_batch_df <- featureSelect(input = spe_sub4, 
    batch_effect = c("sample_id", "sex"), VGs = svgs_sub4$gene_id)
```

```{r feature select class, comment = NA, warning=FALSE}
class(list_batch_df)
```

```{r feature select head sample id, comment = NA, warning=FALSE}
head(list_batch_df$sample_id)
```

```{r feature select head sex, comment = NA, warning=FALSE}
head(list_batch_df$sex)
```

#### `BatchSVG::svg_nSD()`: Visualize SVG Selection for Batch Effect(s)

We utilized `svg_nSD()` function to generate visualizations for batch effects assessments in spatially variable genes (SVGs). The `svg_nSD()` function allows for multiple batch effects with corresponding `sd_interval_dev` and `sd_interval_rank`.

```{r svg, comment=NA, warning=FALSE, message=FALSE}
plots <- svg_nSD(list_batch_df = list_batch_df, 
                sd_interval_dev = c(10,10), sd_interval_rank = c(5,6))
```

*Figure 1a. Visualizations of nSD_dev and nSD_rank threshold selection for Sample ID*

```{r svg sample, warning=FALSE, message=FALSE, fig.width=10, fig.height=8}
plots$sample_id
```

*Figure 1b. Visualizations of nSD_dev and nSD_rank threshold selection for Sex*

```{r svg sex, warning=FALSE, message=FALSE, fig.width=10, fig.height=8}
plots$sex
```

#### `BatchSVG::biasDetect()`: Identify Biased Genes

Using `nSD_svg()` function, we determined the nSD thresholds of relative change in deviance and rank for `sample_id` and `sex` respectively. Then, we applied `biasDetect()` function on the list of data frames obtained from `featureSelect()` function to identify and filter out biased genes. We used both thresholds (`threshold = "both"`) with the color customization.

-   Sample ID

    -   `nSD_dev = 10`
    -   `nSD_rank = 5`
    -   `plot_palette = "Blues"`

-   Sex

    -   `nSD_dev = 10`
    -   `nSD_rank = 6`
    -   `plot_palette = "Purples"`.

```{r both, comment = NA, message=FALSE, warning=FALSE}
bias_both <- biasDetect(list_batch_df = list_batch_df, 
    threshold = "both", nSD_dev = c(10, 10), nSD_rank = c(5,6), plot_palette = c("Blues","Purples"))
```

##### Sample ID

*Table 1. Outlier Genes defined by nSD_dev and nSD_rank for Sample ID*

```{r sample id table, comment = NA, message=FALSE, warning=FALSE}
bias_both$sample_id$Table[,c("gene_id","gene_name","nSD_bin_dev", "dev_outlier", "nSD_bin_rank", "rank_outlier")]
```

*Figure 2a. Outlier Genes defined by nSD_dev and nSD_rank for Sample ID*

```{r sample id plot,message=FALSE,warning=FALSE,fig.width=10, fig.height=4}
bias_both$sample_id$Plot
```


```{r sample id biased features, fig.height=4, fig.width=8, message=FALSE, echo=FALSE}
xist <- plotSpots(spe_sub4, annotate="ENSG00000229807", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("XIST") +
      scale_color_gradient(low='grey90', high='black')
mtrnr2l1 <- plotSpots(spe_sub4, annotate="ENSG00000256618", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("MTRNR2L1") +
      scale_color_gradient(low='grey90', high='black')
jun <- plotSpots(spe_sub4, annotate="ENSG00000177606", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("JUN") +
      scale_color_gradient(low='grey90', high='black')
btg2 <- plotSpots(spe_sub4, annotate="ENSG00000159388", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("BTG2") +
      scale_color_gradient(low='grey90', high='black')
egr4 <- plotSpots(spe_sub4, annotate="ENSG00000135625", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("EGR4") +
      scale_color_gradient(low='grey90', high='black')
egr1 <- plotSpots(spe_sub4, annotate="ENSG00000120738", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("EGR1") +
      scale_color_gradient(low='grey90', high='black')
dusp1 <- plotSpots(spe_sub4, annotate="ENSG00000120129", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("DUSP1") +
      scale_color_gradient(low='grey90', high='black')
hspa1b <- plotSpots(spe_sub4, annotate="ENSG00000204388", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("HSPA1B") +
      scale_color_gradient(low='grey90', high='black')
gadd45g <- plotSpots(spe_sub4, annotate="ENSG00000130222", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("GADD45G") +
      scale_color_gradient(low='grey90', high='black')
npas4 <- plotSpots(spe_sub4, annotate="ENSG00000174576", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("NPAS4") +
      scale_color_gradient(low='grey90', high='black')
nr4a1 <- plotSpots(spe_sub4, annotate="ENSG00000123358", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("NR4A1") +
      scale_color_gradient(low='grey90', high='black')
fos <- plotSpots(spe_sub4, annotate="ENSG00000170345", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("FOS") +
      scale_color_gradient(low='grey90', high='black')
gadd45b <- plotSpots(spe_sub4, annotate="ENSG00000099860", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("GADD45B") +
      scale_color_gradient(low='grey90', high='black')
junb <- plotSpots(spe_sub4, annotate="ENSG00000171223", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("JUNB") +
      scale_color_gradient(low='grey90', high='black')
fosb <- plotSpots(spe_sub4, annotate="ENSG00000125740", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("FOSB") +
      scale_color_gradient(low='grey90', high='black')
```

Since we defined `threshold = "both"`, the `BatchSVG` package identified the biased features based on both **dev_outlier** and **rank_outlier**. The identified biased features may have 

- dev_outlier = TRUE, rank_outlier = TRUE or

- dev_outlier = FALSE, rank_outlier = TRUE or

- dev_outlier = TRUE, rank_outlier = FALSE.

For the case of dev_outlier = TRUE AND rank_outlier = TRUE, the `BatchSVG` package identified **XIST** and **MTRNR2L1** as bised features. For the case of dev_outlier = TRUE OR rank_outlier = TRUE, the `BatchSVG` package identified **JUN**, **BTG2**, **EGR4**, **EGR1**, **DUSP1**, **HSPA1B**, **GADD45G**, **NPAS4**, **NR4A1**, **FOS**, **GADD45B**, **JUNB**, and **FOSB**. We generated spatial expression plots for each identified genes to confirm that they are sample-biased features. 

*Figure 2b. Spatial expression plots for dev_outlier = TRUE AND rank_outlier = TRUE*

```{r sample id both expression plots, fig.height=3, fig.width=8, echo=FALSE}
grid.arrange(xist, mtrnr2l1, ncol=2)
```

*Figure 2c. Spatial expression plots for dev_outlier = TRUE OR rank_outlier = TRUE*

```{r sample id either expression plots, fig.width=8, fig.height = 21, echo=FALSE}
grid.arrange(jun, btg2, egr4, egr1, dusp1, hspa1b, gadd45g, npas4, nr4a1, fos, gadd45b, junb, fosb, ncol=2)
```

##### Sex

*Table 2. Outlier Genes defined by nSD_dev and nSD_rank for Sex*

```{r sex table, comment = NA, message=FALSE, warning=FALSE}
bias_both$sex$Table[,c("gene_id","gene_name","nSD_bin_dev", "dev_outlier", "nSD_bin_rank", "rank_outlier")]
```

*Figure 3a. Outlier Genes defined by nSD_dev and nSD_rank for Sex*

```{r sex plot,message=FALSE,warning=FALSE,fig.width=10, fig.height=4}
bias_both$sex$Plot
```

```{r sex biased features, fig.height=4, fig.width=8, message=FALSE, echo=FALSE}
xist <- plotSpots(spe_sub4, annotate="ENSG00000229807", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("XIST") +
      scale_color_gradient(low='grey90', high='black')
mtrnr2l1 <- plotSpots(spe_sub4, annotate="ENSG00000256618", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("MTRNR2L1") +
      scale_color_gradient(low='grey90', high='black')
btg2 <- plotSpots(spe_sub4, annotate="ENSG00000159388", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("BTG2") +
      scale_color_gradient(low='grey90', high='black')
egr4 <- plotSpots(spe_sub4, annotate="ENSG00000135625", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("EGR4") +
      scale_color_gradient(low='grey90', high='black')
egr1 <- plotSpots(spe_sub4, annotate="ENSG00000120738", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("EGR1") +
      scale_color_gradient(low='grey90', high='black')
dusp1 <- plotSpots(spe_sub4, annotate="ENSG00000120129", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("DUSP1") +
      scale_color_gradient(low='grey90', high='black')
hspa1b <- plotSpots(spe_sub4, annotate="ENSG00000204388", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("HSPA1B") +
      scale_color_gradient(low='grey90', high='black')
gadd45g <- plotSpots(spe_sub4, annotate="ENSG00000130222", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("GADD45G") +
      scale_color_gradient(low='grey90', high='black')
npas4 <- plotSpots(spe_sub4, annotate="ENSG00000174576", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("NPAS4") +
      scale_color_gradient(low='grey90', high='black')
nr4a1 <- plotSpots(spe_sub4, annotate="ENSG00000123358", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("NR4A1") +
      scale_color_gradient(low='grey90', high='black')
fos <- plotSpots(spe_sub4, annotate="ENSG00000170345", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("FOS") +
      scale_color_gradient(low='grey90', high='black')
gadd45b <- plotSpots(spe_sub4, annotate="ENSG00000099860", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("GADD45B") +
      scale_color_gradient(low='grey90', high='black')
junb <- plotSpots(spe_sub4, annotate="ENSG00000171223", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("JUNB") +
      scale_color_gradient(low='grey90', high='black')
fosb <- plotSpots(spe_sub4, annotate="ENSG00000125740", assay="logcounts", 
          sample_id="sample_id", point_size=.1) + 
      ggtitle("FOSB") +
      scale_color_gradient(low='grey90', high='black')
```

For the case of dev_outlier = TRUE AND rank_outlier = TRUE, the `BatchSVG` package identified **NR4A1** and **XIST** as bised features. For the case of dev_outlier = TRUE OR rank_outlier = TRUE, the `BatchSVG` package identified **BTG2**, **EGR4**, **EGR1**, **DUSP1**, **HSPA1B**, **GADD45G**, **NPAS4**, **FOS**, **MTRNR2L1**, **GADD45B**, **JUNB**, and **FOSB**. We generated spatial expression plots for each identified genes to confirm that they are sex-biased features. 

*Figure 3b. Spatial expression plots for dev_outlier = TRUE AND rank_outlier = TRUE*

```{r sex both expression plots, fig.height=3, fig.width=8, echo=FALSE}
grid.arrange(xist, nr4a1, ncol=2)
```

*Figure 3c. Spatial expression plots for dev_outlier = TRUE OR rank_outlier = TRUE*

```{r sex either expression plots, fig.width=8, fig.height = 18, echo=FALSE}
grid.arrange(btg2, egr4, egr1, dusp1, hspa1b, gadd45g, npas4, fos, mtrnr2l1, gadd45b, junb, fosb, ncol=2)
```

#### Refine SVGs by Removing Batch-Affected Outliers

Finally, based on different batch effects, we were able to obtain a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for `nSD_dev` and `nSD_rank`.

##### Sample ID

```{r sample id new svgs, comment = NA, message=FALSE, warning=FALSE}
bias_sample_id <- bias_both$sample_id$Table
svgs_filt_sample_id <- setdiff(svgs_sub4$gene_id, bias_sample_id$gene_id)
svgs_sub4_filt_sample_id <- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt_sample_id, ]
nrow(svgs_sub4_filt_sample_id)
```

##### Sex

```{r sex new svgs, comment = NA, message=FALSE, warning=FALSE}
bias_sex <- bias_both$sex$Table
svgs_filt_sex <- setdiff(svgs_sub4$gene_id, bias_sex$gene_id)
svgs_sub4_filt_sex <- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt_sex, ]
nrow(svgs_sub4_filt_sex)
```

After obtaining the refined set of SVGs for sample ID and sex respectively, these genes can be further analyzed using established spatial transcriptomics clustering algorithms to explore tissue layers and spatial organization.

### Cluster results

We used the set of SVGs for sample ID to compare the cluster results before and after we remove the identified batch-related biased features using `BatchSVG` package. We performed [PRECAST](https://www.nature.com/articles/s41467-023-35947-w) clustering to identify spatial domains after removing all sample-biased SVGs (n = 15) from the feature list.

```{r old svgs precast, eval=FALSE}
# seurat list
l2 = unique(spe_sub4$sample_id)
names(l2) = l2
l2 = lapply(l2, function(x) spe_sub4[,colData(spe_sub4)$sample_id==x])

srt.sets = lapply(l2, function(x) {
  colnames(counts(x)) <- rownames(colData(x))
  colData(x)$col <- x$array_col
  colData(x)$row <- x$array_row
  count <- counts(x)
  a1 <- CreateAssayObject(count, assay = "RNA", min.features = 0, min.cells = 0)
  CreateSeuratObject(a1, meta.data = as.data.frame(colData(x)))
})

#run precast
preobj_old <- CreatePRECASTObject(seuList = srt.sets,
                              customGenelist=rownames(spe_sub4),
                              premin.spots=0, premin.features=0, postmin.spots=0, postmin.features=0)
PRECASTObj_old <- AddAdjList(preobj_old, platform = "Visium")
PRECASTObj_old <- AddParSetting(PRECASTObj_old, maxIter = 20, verbose = TRUE, Sigma_equal=FALSE, coreNum=12)
PRECASTObj_old <- PRECAST(PRECASTObj, K=7)

#consolidate/ reformat results
PRECASTObj_old <- SelectModel(PRECASTObj_old, criteria="MBIC")
seuInt_old <- IntegrateSpaData(PRECASTObj_old, species = "Human")
```

#### Sample ID

##### Refined SVGs

```{r refined svg precast, eval=FALSE}
#remove biased genes
svgs_filt = setdiff(rownames(spe_sub4), bias_sample_id$gene_id) # 2067

#run precast
preobj_new <- CreatePRECASTObject(seuList = srt.sets,
                              customGenelist=svgs_filt,
                              premin.spots=0, premin.features=0, postmin.spots=0, postmin.features=0)
PRECASTObj_new <- AddAdjList(preobj_new, platform = "Visium")
PRECASTObj_new <- AddParSetting(PRECASTObj_new, maxIter = 20, verbose = TRUE, Sigma_equal=FALSE, coreNum=12)
PRECASTObj_new <- PRECAST(PRECASTObj_new, K=7)

#consolidate/ reformat results
PRECASTObj_new <- SelectModel(PRECASTObj_new, criteria="MBIC")
seuInt_new <- IntegrateSpaData(PRECASTObj_new, species = "Human")
```

##### Plots comparison

```{r, echo=FALSE}
# seuInt_old@meta.data
clusters1 = read.csv(here("data/seuInt-hpc_k-7_svgs_metadata.csv"), row.names=1)

# seuInt_new@meta.data
clusters2 = read.csv(here("data/seuInt-hpc_k-7_svgs-no-bias_metadata.csv"), row.names=1)
```

```{r cluster label, comment=NA, message=FALSE, warning=FALSE}
clusters <- as.data.frame(colData(spe_sub4)[,c("sample_id","slide","cluster")])

spe_sub4$precast_k7 = clusters1$cluster
spe_sub4$precast_k7_ordered = factor(spe_sub4$precast_k7, levels=c(7,2,3,1,6,5,4), 
                                labels=c("WM","WM (2)","SR/SL","CA1","CA3","DG GCL","DG ML"))

spe_sub4$precast_k7_nobias = clusters2$cluster
spe_sub4$precast_k7_nobias_ordered= factor(spe_sub4$precast_k7_nobias, levels=c(1,2,7,5,6,4,3),
                                labels=c("WM","SR/SL","CA1","CA1 (2)","CA3","DG GCL","DG ML"))

l2 = unique(spe_sub4$sample_id)
names(l2) = l2
l2 = lapply(l2, function(x) spe_sub4[,colData(spe_sub4)$sample_id==x])

col.pal1 = c("#1f77b4FF","#aec7e8FF","#ffbb78FF","#2ca02cFF","#ff7f0eFF","#d62728FF","#ff9896FF")
col.pal2 = c("#1f77b4FF","#ffbb78FF","#2ca02cFF","#98df8aFF","#ff7f0eFF","#d62728FF","#ff9896FF")
```

```{r, echo=FALSE, eval=FALSE}
#heatmap to justify cluster annotations
spe_sub4 <- scuttle::logNormCounts(spe_sub4)
markers = c("MBP","GFAP","SPARCL1","FIBCD1","COL5A2","KCNQ5","CARTPT","PCDH8","CALB1")

hm <- plotGroupedHeatmap(spe_sub4, features = markers, swap_rownames="gene_name", 
                   group="precast_k7_ordered",
                   scale=TRUE, center=TRUE, 
                   cluster_rows=FALSE, cluster_cols=FALSE)
hm_nobiase <- plotGroupedHeatmap(spe_sub4, features = markers, swap_rownames="gene_name",
                   group="precast_k7_nobias_ordered",
                   scale=TRUE, center=TRUE, 
                   cluster_rows=FALSE, cluster_cols=FALSE)
```

Comparing the clustering results, the refined SVGs led to a more coherent and biologically meaningful spatial domain segmentation. Specifically, in the original clustering, an additional "WM (2)" cluster appeared, likely due to batch-associated biases. After applying `BatchSVG` , this extra cluster was removed, and the CA1 region became more distinct, resolving ambiguity in its boundaries. The refined clustering thus provides improved spatial structure alignment, demonstrating the effectiveness of BatchSVG in enhancing spatial domain identification.

*Figure 4a. PRECAST clusters: 2082 input features, K=7*

```{r cluster result old, message=FALSE,warning=FALSE, fig.height=4}
c1 <- lapply(seq_along(l2), function(x) {
  plotSpots(l2[[x]], annotate="precast_k7_ordered", point_size=.3)+
    labs(color="clus")+
    scale_color_manual(values=col.pal1)+
    theme(plot.title=element_text(size=8))
})
PRECAST::drawFigs(c1, layout.dim = c(1, 4), common.legend = TRUE, legend.position = "right", align = "h")
```

*Figure 4b. PRECAST clusters: 2067 input features (SVGs minus 15 biased), K=7*

```{r cluster result new, message=FALSE,warning=FALSE, fig.height=4}
c2 <- lapply(seq_along(l2), function(x) {
  plotSpots(l2[[x]], annotate="precast_k7_nobias_ordered", point_size=.3)+
    labs(color="clus")+
    scale_color_manual(values=col.pal2)+
    theme(plot.title=element_text(size=8))
})
PRECAST::drawFigs(c2, layout.dim = c(1, 4), common.legend = TRUE, legend.position = "right", align = "h")
```


#### Sex

##### Refined SVGs

```{r refined svg precast, eval=FALSE}
#remove biased genes
svgs_filt = setdiff(rownames(spe_sub4), bias_sex$gene_id) # 2068

#run precast
preobj_new <- CreatePRECASTObject(seuList = srt.sets,
                              customGenelist=svgs_filt,
                              premin.spots=0, premin.features=0, postmin.spots=0, postmin.features=0)
PRECASTObj_new <- AddAdjList(preobj_new, platform = "Visium")
PRECASTObj_new <- AddParSetting(PRECASTObj_new, maxIter = 20, verbose = TRUE, Sigma_equal=FALSE, coreNum=12)
PRECASTObj_new <- PRECAST(PRECASTObj_new, K=7)

#consolidate/ reformat results
PRECASTObj_new <- SelectModel(PRECASTObj_new, criteria="MBIC")
seuInt_new <- IntegrateSpaData(PRECASTObj_new, species = "Human")
```

##### Plots comparison

```{r, echo=FALSE, eval=FALSE}
# seuInt_new@meta.data
clusters2 = read.csv(here("data/seuInt-hpc_k-7_svgs-no-bias_metadata.csv"), row.names=1)
```

```{r cluster label, comment=NA, message=FALSE, warning=FALSE, eval=FALSE}
clusters <- as.data.frame(colData(spe_sub4)[,c("sample_id","slide","cluster")])

spe_sub4$precast_k7 = clusters1$cluster
spe_sub4$precast_k7_ordered = factor(spe_sub4$precast_k7, levels=c(7,2,3,1,6,5,4), 
                                labels=c("WM","WM (2)","SR/SL","CA1","CA3","DG GCL","DG ML"))

spe_sub4$precast_k7_nobias = clusters2$cluster
spe_sub4$precast_k7_nobias_ordered= factor(spe_sub4$precast_k7_nobias, levels=c(1,2,7,5,6,4,3),
                                labels=c("WM","SR/SL","CA1","CA1 (2)","CA3","DG GCL","DG ML"))

l2 = unique(spe_sub4$sample_id)
names(l2) = l2
l2 = lapply(l2, function(x) spe_sub4[,colData(spe_sub4)$sample_id==x])

col.pal1 = c("#1f77b4FF","#aec7e8FF","#ffbb78FF","#2ca02cFF","#ff7f0eFF","#d62728FF","#ff9896FF")
col.pal2 = c("#1f77b4FF","#ffbb78FF","#2ca02cFF","#98df8aFF","#ff7f0eFF","#d62728FF","#ff9896FF")
```

```{r, echo=FALSE, eval=FALSE}
#heatmap to justify cluster annotations
spe_sub4 <- scuttle::logNormCounts(spe_sub4)
markers = c("MBP","GFAP","SPARCL1","FIBCD1","COL5A2","KCNQ5","CARTPT","PCDH8","CALB1")

hm <- plotGroupedHeatmap(spe_sub4, features = markers, swap_rownames="gene_name", 
                   group="precast_k7_ordered",
                   scale=TRUE, center=TRUE, 
                   cluster_rows=FALSE, cluster_cols=FALSE)
hm_nobiase <- plotGroupedHeatmap(spe_sub4, features = markers, swap_rownames="gene_name",
                   group="precast_k7_nobias_ordered",
                   scale=TRUE, center=TRUE, 
                   cluster_rows=FALSE, cluster_cols=FALSE)
```

[TBD]

*Figure 4c. PRECAST clusters: 2068 input features (SVGs minus 14 biased), K=7*

```{r cluster result new, message=FALSE,warning=FALSE, fig.height=4, eval=FALSE}
c2 <- lapply(seq_along(l2), function(x) {
  plotSpots(l2[[x]], annotate="precast_k7_nobias_ordered", point_size=.3)+
    labs(color="clus")+
    scale_color_manual(values=col.pal2)+
    theme(plot.title=element_text(size=8))
})
PRECAST::drawFigs(c2, layout.dim = c(1, 4), common.legend = TRUE, legend.position = "right", align = "h")
```

### `R` session information {.unnumbered}

```{r 'sessionInfo'}
## Session info
sessionInfo()
```
