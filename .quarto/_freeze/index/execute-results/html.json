{
  "hash": "3768dbfa508c429ceac14c24d96d33b4",
  "result": {
    "markdown": "---\ntitle: \"BatchSVG_analysis\"\nauthor: \n  - name: Christine Hou\n---\n\n\n### Introduction\n\nThe `BatchSVG` package implements feature selection using the binomial deviance model. In this vignette, we provide a detailed justification for selecting the binomial deviance model as the most appropriate approach for our method. Through comprehensive comparisons with alternative feature selection models, we demonstrate its advantages in ranking spatially variable genes (SVGs), ensuring reproducibility, and mitigating batch effects.\n\n### SpatialLIBD Dataset\n\nWe chose the dorsolateral prefrontal cortex (DLPFC) dataset available through the [spatialLIBD](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-022-08601-w) package to help determine the appropriate feature selection method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spatialLIBD)\nspatialLIBD_spe <- fetch_data(type = \"spe\")\ntable(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         subject\nsample_id Br5292 Br5595 Br8100\n   151507   4226      0      0\n   151508   4384      0      0\n   151509   4789      0      0\n   151510   4634      0      0\n   151669      0   3661      0\n   151670      0   3498      0\n   151671      0   4110      0\n   151672      0   4015      0\n   151673      0      0   3639\n   151674      0      0   3673\n   151675      0      0   3592\n   151676      0      0   3460\n```\n:::\n:::\n\n\nWe ran the [nnSVG](https://www.nature.com/articles/s41467-023-39748-z) model on the spatialLIBD data to identify SVGs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibd_svg <- read.csv(\"data/libd-all_nnSVG_p-05-features-df.csv\", \n    row.names = 1, check.names = FALSE)\nhead(libd_svg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        source type         gene_id gene_version gene_name\nENSG00000187608 ensembl_havana gene ENSG00000187608            8     ISG15\nENSG00000131584 ensembl_havana gene ENSG00000131584           18     ACAP3\nENSG00000242485 ensembl_havana gene ENSG00000242485            5    MRPL20\nENSG00000160075 ensembl_havana gene ENSG00000160075           11     SSU72\nENSG00000078369 ensembl_havana gene ENSG00000078369           17      GNB1\nENSG00000187730 ensembl_havana gene ENSG00000187730            8     GABRD\n                   gene_source   gene_biotype             gene_search\nENSG00000187608 ensembl_havana protein_coding  ISG15; ENSG00000187608\nENSG00000131584 ensembl_havana protein_coding  ACAP3; ENSG00000131584\nENSG00000242485 ensembl_havana protein_coding MRPL20; ENSG00000242485\nENSG00000160075 ensembl_havana protein_coding  SSU72; ENSG00000160075\nENSG00000078369 ensembl_havana protein_coding   GNB1; ENSG00000078369\nENSG00000187730 ensembl_havana protein_coding  GABRD; ENSG00000187730\n                is_top_hvg    sigma.sq    tau.sq          phi    loglik runtime\nENSG00000187608       TRUE 0.014755187 0.3356806 9.119204e+00 -42272.79  23.241\nENSG00000131584      FALSE 0.001055874 0.2868728 6.900461e-02 -37864.96  20.942\nENSG00000242485      FALSE 0.001656123 0.4411004 1.497840e-02 -48094.96  20.343\nENSG00000160075      FALSE 0.003069247 0.4646316 1.716212e-03 -49391.53  19.676\nENSG00000078369      FALSE 0.007099322 0.7113184 3.456360e-07 -59584.20  23.359\nENSG00000187730      FALSE 0.007227928 0.4965150 1.795660e-04 -51122.73  20.104\n                     mean       var      spcov     prop_sv loglik_lm    LR_stat\nENSG00000187608 0.3141369 0.3505163 0.38668154 0.042105251 -42543.76 541.936437\nENSG00000131584 0.2860178 0.2879378 0.11360906 0.003667137 -37868.30   6.688740\nENSG00000242485 0.4788772 0.4427726 0.08498106 0.003740482 -48098.53   7.151903\nENSG00000160075 0.5193062 0.4677126 0.10668230 0.006562414 -49401.30  19.526820\nENSG00000078369 1.0635173 0.7184340 0.07922530 0.009881886 -59605.57  42.730757\nENSG00000187730 0.5727988 0.5037425 0.14842423 0.014348446 -51165.59  85.727756\n                rank         pval         padj\nENSG00000187608  167 0.000000e+00 0.000000e+00\nENSG00000131584 1953 3.528243e-02 4.669999e-02\nENSG00000242485 1910 2.798878e-02 3.788010e-02\nENSG00000160075 1282 5.751816e-05 1.159785e-04\nENSG00000078369  839 5.261797e-10 1.621185e-09\nENSG00000187730  548 0.000000e+00 0.000000e+00\n```\n:::\n:::\n\n\n### Feature Selection Comparisons\n\n#### Eligible Options\n\nOur feature selection method should incorporate the batch variable to assess per-gene deviance and ranking differences when the model is applied with and without batch correction. To achieve this, we compared three different approaches from two packages, each based on distinct statistical models:\n\n-   [scran](https://www.nature.com/articles/nmeth.2645)\n\n    The `scran` package employs a mean-variance modeling framework to identify highly variable genes after normalizing the count matrix. We refer to this method as **mean-variance model**.\n\n    -   `modelGeneVar()`: Estimates per-gene variance by fitting a smooth trend to the mean-variance relationship, accounting for complex noise structures in the data.\n\n    -   `modelGeneVarByPois()`: Assumes that the mean-variance relationship primarily arises from technical noise following a Poisson distribution.\n\n-   [scry](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02109-w)\n\n    The `scry` package implements a deviance-based feature selection approach directly on the raw count matrix. Assumes that genes with no biologically meaningful expression pattern will fit a binomial distribution. We refer to this method as **binomial deviance model**.\n\n    -   `devianceFeatureSelect()`: The greater the per-gene deviance from this null model, the more likely the expression of said gene is biologically meaningful as a top feature.\n\n#### Required package load\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scry)\nlibrary(scran)\nlibrary(SingleCellExperiment)\nlibrary(SummarizedExperiment)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(ggrepel)\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(ggspavis)\nlibrary(ggbreak)\nlibrary(gt)\n```\n:::\n\n\n#### Similarly Identify SVGs as highly ranked features\n\nOur goal is to determine whether SVGs exhibit biased expression according of different batch variables. Therefore, the ideal feature selection model would similarly identify SVGs as highly ranked features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmv <- modelGeneVar(logcounts(spatialLIBD_spe))\nmv$ensembl <- rownames(mv)\nmv$rank <- (nrow(mv)+1)-rank(mv$bio)\ntop_hvgs_mv <- getTopHVGs(mv, n = 3000)\nmv$is_svg = factor(mv$ensembl %in% libd_svg$gene_id, \n                    levels=c(TRUE, FALSE), labels=c(\"SVGs\",\"not SVGs\"))\n\nmvpois <- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmvpois$ensembl <- rownames(mvpois)\nmvpois$rank <- (nrow(mvpois) + 1) - rank(mvpois$bio)\ntop_hvgs_mvpois <- getTopHVGs(mvpois, n = 3000)\nmvpois$is_svg = factor(mvpois$ensembl %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd <- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd_df <- cbind.data.frame(\"gene\" = names(bd),\n            \"gene_name\" = rowData(spatialLIBD_spe)[names(bd),\"gene_name\"],\n            \"dev\"= bd,\n            \"rank\" = (length(bd)+1) - rank(bd))\nrownames(bd_df) <- bd_df$gene\nbd_df$is_svg = factor(bd_df$gene %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd_batch <- devianceFeatureSelection(counts(spatialLIBD_spe), \n            fam = \"binomial\", batch = as.factor(spatialLIBD_spe$subject))\nbd_batch_df <- cbind.data.frame(\"gene\" = rownames(spatialLIBD_spe),\n            \"gene_name\" = rowData(spatialLIBD_spe)$gene_name,\n            \"dev\"= bd_batch,\n            \"rank\" = (length(bd_batch)+1) - rank(bd_batch))\nrownames(bd_batch_df) <- bd_batch_df$gene\nbd_batch_df$is_svg = factor(bd_batch_df$gene %in% libd_svg$gene_id, \n            levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n```\n:::\n\n\nWe found that both `modelGeneVar()` and `modelGeneVarByPoisson()` approaches rank a considerable portion of the SVGs as some of the lowest features in the dataset.\n\n\n::: {.cell}\n\n:::\n\n\n*Figure 1A. Mean-variance model rank some nnSVG results as low ranked features*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 1a print-1.png){width=672}\n:::\n:::\n\n\nIn contrast, all the SVGs are ranked highly with the binomial deviance model (`devianceFeatureSelection()`). We can also saw that including a subject-batch effect didn't dramatically change the rank of the SVGs.\n\n\n::: {.cell}\n\n:::\n\n\n*Figure 1B. Binomial deviance model better corresponds to nnSVG results*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 1b print-1.png){width=672}\n:::\n:::\n\n\nWhat's more, more than 90% of `spatialLIBD` SVGs are ranked in the top 3000 features by binomial deviance model with and without `batch = subject`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(bd_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  200.6  400.2  606.8  830.4 1060.0 1316.8 1601.2 1913.6 2256.8 4077.0 \n```\n:::\n\n```{.r .cell-code}\nquantile(bd_batch_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  199.2  401.2  606.8  830.4 1060.0 1316.6 1603.2 1917.8 2271.4 5903.0 \n```\n:::\n:::\n\n\n#### Identify batch biased genes\n\nUsing the `modelGeneVar()` function, we compared the rank with and without the `batch = subject` and we noticed that there are two groups of features ranked highly in one model but lowly in another model (top left group and bottom right group).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmv_batch <- modelGeneVar(logcounts(spatialLIBD_spe),\n                        block=as.factor(spatialLIBD_spe$subject))\nmv_batch$ensembl <- rownames(mv_batch)\nmv_batch$rank <- (nrow(mv_batch) + 1) - rank(mv_batch$bio)\n\nmv_rank_diff <- left_join(\n    as.data.frame(mv[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    as.data.frame(mv_batch[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    by = c(\"ensembl\"), suffix=c(\"_default\",\"_subject\"))\nmv_rank_diff$gene_name <- \n    rowData(spatialLIBD_spe)[mv_rank_diff$ensembl,\"gene_name\"]\n\ntop_3k_mv_batch <- mv_rank_diff |> \n    filter(rank_default <= 3000 | rank_subject <= 3000) |>\n    mutate(batch_impact = rank_default > 30000 | rank_subject > 30000)\ntop_3k_mv_batch_genes <- top_3k_mv_batch |>\n    filter(batch_impact == TRUE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n*Fig2A. Comparison of feature rank with and without subject batch*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/fig 2a print-1.png){width=672}\n:::\n:::\n\n\nThen, we looked at both groups of genes in red to see if they exhibit true subject-biased expression. Here we used **RAPGEF5** as example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRAPGEF5_ensembl <- top_3k_mv_batch_genes |> filter(gene_name == \"RAPGEF5\") |>\n    pull(ensembl)\nRAPGEF5_expr <- logcounts(spatialLIBD_spe)[RAPGEF5_ensembl, , drop = FALSE]\n\nmv_expr_df <- cbind.data.frame(\n    as.data.frame(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\",\n        \"layer_guess_reordered_short\")]),\n        avg.logcounts = as.vector(RAPGEF5_expr)) |>\n    group_by(sample_id, subject,  layer_guess_reordered_short) |>\n    summarise(avg.logcounts = mean(avg.logcounts, na.rm = TRUE), \n        .groups = \"drop\") |>\n    filter(!is.na(layer_guess_reordered_short))\n```\n:::\n\n\n*Fig2B. RAPGEF5 is not subject biased but correlate with WM*\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 2b print-1.png){width=960}\n:::\n:::\n\n\nThe plot illustrates the average expression of each sample across spatial domains alongside the spatial expression pattern of **RAPGEF5**. The graded expression across cortical layers suggests that **RAPGEF5** is spatially variable, with substantial differences in expression between subjects. However, its spatial expression pattern does not indicate subject bias.\n\nThus, the changes in gene ranking when setting `batch = subject` in the `modelGeneVar()` function do not effectively identify potentially subject-biased genes.\n\n#### Reproducibility in multiple runs\n\nWe set the seed to check the reproducibility of each approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n```\n:::\n\n\n-   devianceFeatureSelection()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd1 <- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd2 <- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\n\nbd_repro <- cbind(as.data.frame(bd1), as.data.frame(bd2)) |>\n    mutate(abs_diff_dev_is_zero = (abs(bd1 - bd2) < 1e-10))\n```\n:::\n\n\n-   modelGeneVar()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmv1 <- modelGeneVar(logcounts(spatialLIBD_spe))\nmv2 <- modelGeneVar(logcounts(spatialLIBD_spe))\n\nmv1$ensembl <- rownames(mv1)\nmv1$rank <- (nrow(mv1) + 1) - rank(mv1$bio)\ntop_hvgs_mv1 <- getTopHVGs(mv1, n = 3000)\nmv1_df <- as.data.frame(mv1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv2$ensembl <- rownames(mv2)\nmv2$rank <- (nrow(mv2) + 1) - rank(mv2$bio)\ntop_hvgs_mv2 <- getTopHVGs(mv2, n = 3000)\nmv2_df <- as.data.frame(mv2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_repro <- left_join(mv1_df, mv2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmv_repro <- mv_repro |>\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var < 1e-10))\n```\n:::\n\n\n-   modelGeneVarByPoisson()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmv_pois1 <- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmv_pois2 <- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\n\nmv_pois1$ensembl <- rownames(mv_pois1)\nmv_pois1$rank <- (nrow(mv_pois1) + 1) - rank(mv_pois1$bio)\ntop_hvgs_mv_pois1 <- getTopHVGs(mv_pois1, n = 3000)\nmv_pois1_df <- as.data.frame(mv_pois1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_pois2$ensembl <- rownames(mv_pois2)\nmv_pois2$rank <- (nrow(mv_pois2) + 1) - rank(mv_pois2$bio)\ntop_hvgs_mv_pois2 <- getTopHVGs(mv_pois2, n = 3000)\nmv_pois2_df <- as.data.frame(mv_pois2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmvpois_repro <- left_join(mv_pois1_df, mv_pois2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmvpois_repro <- mvpois_repro |>\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var < 1e-10))\n```\n:::\n\n\nWe observed that the `modelGeneVar()` function and `devianceFeatureSelection()` function both produce identical results with different runs, which ensures the reproducibility.\n\n\n::: {.cell}\n\n:::\n\n\n*Fig3A. modelGeneVar() and modelGeneVarByPoisson() ensures reproducibility*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 3a print-1.png){width=672}\n:::\n:::\n\n\nHowever, even with the same seed, the `modelGeneVarByPoisson()` function does not produce identical variance results, leading to rank fluctuations that can significantly impact the identification of highly variable genes (HVGs).\n\n\n::: {.cell}\n\n:::\n\n\n*Fig3B. modelGeneVarByPoisson() causes variance fluctuations (rank changes)*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 3b print-1.png){width=1152}\n:::\n:::\n\n\nUsing the `modelGeneVarByPoisson()` function does identify some rank differences due to `batch = subject` but are inconsistent. Compared to `modelGeneVar()` function, the poisson assumptions for technical variation reduced the number of features that were highly ranked with `batch = NULL` and highly ranked with `batch = subject`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmv_pois_batch <- modelGeneVarByPoisson(logcounts(spatialLIBD_spe),\n                    block = as.factor(spatialLIBD_spe$subject))\n\nmv_pois_batch$ensembl <- rownames(mv_pois_batch)\nmv_pois_batch$rank <- (nrow(mv_pois_batch) + 1) - rank(mv_pois_batch$bio)\n\nvar_diff_pois <- mvpois_repro |>\n    left_join(as.data.frame(mv_pois_batch[,c(\"ensembl\", \"rank\", \"bio\")]))\nvar_diff_pois$gene_name <-\n    rowData(spatialLIBD_spe)[var_diff_pois$ensembl,\"gene_name\"]\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n*Fig3C. Poisson assumption reduced the number of highly ranked features*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 3c print-1.png){width=1152}\n:::\n:::\n\n\nMoreover, introducing the batch variable to the `modelGeneVarByPoisson()` function resulted in inconsistencies that altered the top-ranked features, potentially including genes that are not subject-biased (e.g., **COMMD6**).\n\n\n::: {.cell}\n\n:::\n\n\n*Fig3D. Introduction of batch to modelGeneVarByPoisson() causes inconsistencies*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 3d print-1.png){width=1152}\n:::\n:::\n\n\nTherefore, the inconsistencies in the `modelGeneVarByPoisson()` function may contribute to its failure in identifying subject-biased genes.\n\n#### Additional Property: match DLPFC cortical layer\n\nA separate but related property of the ideal feature selection model would be to generate a list of top features that are consistent with known DLPFC layer markers and comprise markers of all layer domains. We used the recently published list of [DLPFC layer markers](https://www.science.org/doi/10.1126/science.adh1938) to characterize the top 3000 features of the mean-variance and binomial deviance models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndlpfc_layer_marker <- read.csv(\"data/TableS8_filtered-layer-markers.csv\",\n    row.names = 1, check.names = FALSE)\n\n# Binomial deviance model\ntop_bd_3k <- bd_df |> filter(rank <= 3000)\ndlpfc_bd_is <- semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_bd_3k, by=c(\"ensembl\"=\"gene\"))\ndlpfc_bd_not = anti_join(\n    top_bd_3k |> filter(gene %in% setdiff(top_bd_3k$gene, dlpfc_bd_is$ensembl)),\n    dlpfc_bd_is, by = c(\"gene\" = \"ensembl\")) |>\n    mutate(domain_simple = \"none\") |> \n    rename(ensembl = gene, gene = gene_name) |>\n    select(ensembl, gene, domain_simple) # not included in DLPFC marker table\ndlpfc_bd_3k <- rbind(dlpfc_bd_is, dlpfc_bd_not) |>\n    mutate(domain_simple=factor(domain_simple,\n        levels=c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model\ntop_3k_mv <- as.data.frame(mv[top_hvgs_mv,]) |>\n    select(ensembl)\ndlpfc_mv_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mv, by = c(\"ensembl\")) |>\n    select(-gene)\ndlpfc_mv_not = anti_join(\n    filter(top_3k_mv, \n        ensembl %in% setdiff(top_hvgs_mv, dlpfc_mv_is$ensembl)), \n    dlpfc_mv_is, by = c(\"ensembl\")) %>%\n    mutate(domain_simple = \"none\")\ndlpfc_mv_3k = rbind(dlpfc_mv_is, dlpfc_mv_not) %>% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model - Pois\ntop_3k_mvpois <- as.data.frame(mvpois[top_hvgs_mvpois,]) |>\n    select(ensembl)\ndlpfc_mvpois_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mvpois, by = c(\"ensembl\")) |>\n    select(-gene)\ndlpfc_mvpois_not = anti_join(\n    filter(top_3k_mvpois, \n        ensembl %in% setdiff(top_hvgs_mvpois, dlpfc_mvpois_is$ensembl)), \n    dlpfc_mvpois_is, by = c(\"ensembl\")) %>%\n    mutate(domain_simple = \"none\")\ndlpfc_mvpois_3k = rbind(dlpfc_mvpois_is, dlpfc_mvpois_not) %>% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n```\n:::\n\n\nThese results further supported the selection of the binomial deviance model, as the 3000 most highly ranked features represented significant markers for all DLPFC cortical layers. In contrast, the 3000 most highly ranked features from the mean-variance model were overwhelmingly L1 and white matter (WM) markers.\n\n\n::: {.cell}\n\n:::\n\n\n*Fig4. Binomial deviance model better corresponds to known DLPFC layer markers*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/figure 4 print-1.png){width=1152}\n:::\n:::\n\n\n### Summary\n\n*Table1. Summary of the evaluation on each approach*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"irgwosgprt\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#irgwosgprt table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#irgwosgprt thead, #irgwosgprt tbody, #irgwosgprt tfoot, #irgwosgprt tr, #irgwosgprt td, #irgwosgprt th {\n  border-style: none;\n}\n\n#irgwosgprt p {\n  margin: 0;\n  padding: 0;\n}\n\n#irgwosgprt .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#irgwosgprt .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#irgwosgprt .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#irgwosgprt .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#irgwosgprt .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#irgwosgprt .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#irgwosgprt .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#irgwosgprt .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#irgwosgprt .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#irgwosgprt .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#irgwosgprt .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#irgwosgprt .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#irgwosgprt .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#irgwosgprt .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#irgwosgprt .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#irgwosgprt .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#irgwosgprt .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#irgwosgprt .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#irgwosgprt .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#irgwosgprt .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#irgwosgprt .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#irgwosgprt .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#irgwosgprt .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#irgwosgprt .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#irgwosgprt .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#irgwosgprt .gt_left {\n  text-align: left;\n}\n\n#irgwosgprt .gt_center {\n  text-align: center;\n}\n\n#irgwosgprt .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#irgwosgprt .gt_font_normal {\n  font-weight: normal;\n}\n\n#irgwosgprt .gt_font_bold {\n  font-weight: bold;\n}\n\n#irgwosgprt .gt_font_italic {\n  font-style: italic;\n}\n\n#irgwosgprt .gt_super {\n  font-size: 65%;\n}\n\n#irgwosgprt .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#irgwosgprt .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#irgwosgprt .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#irgwosgprt .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#irgwosgprt .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#irgwosgprt .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#irgwosgprt .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#irgwosgprt .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#irgwosgprt div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"Package\">Package</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"Function\">Function</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"SVGs-as-Highly-Ranked-Features\">SVGs as Highly Ranked Features</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"Batch-Biased-Features\">Batch Biased Features</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"Reproducibility\">Reproducibility</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"DLPFC-layer-marker\">DLPFC layer marker</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Package\" class=\"gt_row gt_center\">scry</td>\n<td headers=\"Function\" class=\"gt_row gt_center\">devianceFeatureSelection()</td>\n<td headers=\"SVGs as Highly Ranked Features\" class=\"gt_row gt_center\">✔</td>\n<td headers=\"Batch Biased Features\" class=\"gt_row gt_center\">✔</td>\n<td headers=\"Reproducibility\" class=\"gt_row gt_center\">✔</td>\n<td headers=\"DLPFC layer marker\" class=\"gt_row gt_center\">✔</td></tr>\n    <tr><td headers=\"Package\" class=\"gt_row gt_center\">scran</td>\n<td headers=\"Function\" class=\"gt_row gt_center\">modelGeneVar()</td>\n<td headers=\"SVGs as Highly Ranked Features\" class=\"gt_row gt_center\">✘</td>\n<td headers=\"Batch Biased Features\" class=\"gt_row gt_center\">✘</td>\n<td headers=\"Reproducibility\" class=\"gt_row gt_center\">✔</td>\n<td headers=\"DLPFC layer marker\" class=\"gt_row gt_center\">✘</td></tr>\n    <tr><td headers=\"Package\" class=\"gt_row gt_center\">scran</td>\n<td headers=\"Function\" class=\"gt_row gt_center\">modelGeneVarByPoisson()</td>\n<td headers=\"SVGs as Highly Ranked Features\" class=\"gt_row gt_center\">✘</td>\n<td headers=\"Batch Biased Features\" class=\"gt_row gt_center\">✔</td>\n<td headers=\"Reproducibility\" class=\"gt_row gt_center\">✘</td>\n<td headers=\"DLPFC layer marker\" class=\"gt_row gt_center\">✘</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n### `R` session information {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Session info\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] gt_0.11.1                   ggbreak_0.1.4              \n [3] ggspavis_1.12.0             lubridate_1.9.4            \n [5] forcats_1.0.0               stringr_1.5.1              \n [7] dplyr_1.1.4                 purrr_1.0.4                \n [9] readr_2.1.5                 tidyr_1.3.1                \n[11] tidyverse_2.0.0             tibble_3.2.1               \n[13] ggrepel_0.9.6               gridExtra_2.3              \n[15] ggplot2_3.5.1               scran_1.34.0               \n[17] scuttle_1.16.0              scry_1.18.0                \n[19] spatialLIBD_1.18.0          SpatialExperiment_1.16.0   \n[21] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0\n[23] Biobase_2.66.0              GenomicRanges_1.58.0       \n[25] GenomeInfoDb_1.42.3         IRanges_2.40.1             \n[27] S4Vectors_0.44.0            BiocGenerics_0.52.0        \n[29] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n\nloaded via a namespace (and not attached):\n  [1] later_1.4.1              BiocIO_1.16.0            ggplotify_0.1.2         \n  [4] bitops_1.0-9             filelock_1.0.3           fields_16.3             \n  [7] XML_3.99-0.18            lifecycle_1.0.4          edgeR_4.4.2             \n [10] doParallel_1.0.17        lattice_0.22-6           magrittr_2.0.3          \n [13] limma_3.62.2             plotly_4.10.4            sass_0.4.9              \n [16] rmarkdown_2.29           jquerylib_0.1.4          yaml_2.3.10             \n [19] metapod_1.14.0           httpuv_1.6.15            ggside_0.3.1            \n [22] spam_2.11-1              sessioninfo_1.2.3        cowplot_1.1.3           \n [25] DBI_1.2.3                RColorBrewer_1.1-3       golem_0.5.1             \n [28] maps_3.4.2.1             abind_1.4-8              zlibbioc_1.52.0         \n [31] RCurl_1.98-1.16          yulab.utils_0.2.0        rappdirs_0.3.3          \n [34] GenomeInfoDbData_1.2.13  irlba_2.3.5.1            dqrng_0.4.1             \n [37] codetools_0.2-20         DelayedArray_0.32.0      xml2_1.3.7              \n [40] DT_0.33                  tidyselect_1.2.1         aplot_0.2.5             \n [43] farver_2.1.2             UCSC.utils_1.2.0         ScaledMatrix_1.14.0     \n [46] viridis_0.6.5            shinyWidgets_0.9.0       BiocFileCache_2.14.0    \n [49] GenomicAlignments_1.42.0 jsonlite_1.9.1           BiocNeighbors_2.0.1     \n [52] scater_1.34.0            iterators_1.0.14         foreach_1.5.2           \n [55] tools_4.4.2              Rcpp_1.0.14              glue_1.8.0              \n [58] SparseArray_1.6.2        xfun_0.51                withr_3.0.2             \n [61] BiocManager_1.30.25      fastmap_1.2.0            bluster_1.16.0          \n [64] digest_0.6.37            rsvd_1.0.5               gridGraphics_0.5-1      \n [67] timechange_0.3.0         R6_2.6.1                 mime_0.12               \n [70] colorspace_2.1-1         RSQLite_2.3.9            config_0.3.2            \n [73] generics_0.1.3           data.table_1.17.0        rtracklayer_1.66.0      \n [76] httr_1.4.7               htmlwidgets_1.6.4        S4Arrays_1.6.0          \n [79] pkgconfig_2.0.3          gtable_0.3.6             blob_1.2.4              \n [82] XVector_0.46.0           htmltools_0.5.8.1        dotCall64_1.2           \n [85] scales_1.3.0             png_0.1-8                attempt_0.3.1           \n [88] ggfun_0.1.8              knitr_1.49               rstudioapi_0.17.1       \n [91] tzdb_0.4.0               rjson_0.2.23             curl_6.2.1              \n [94] cachem_1.1.0             BiocVersion_3.20.0       parallel_4.4.2          \n [97] vipor_0.4.7              AnnotationDbi_1.68.0     restfulr_0.0.15         \n[100] pillar_1.10.1            grid_4.4.2               vctrs_0.6.5             \n[103] promises_1.3.2           BiocSingular_1.22.0      dbplyr_2.5.0            \n[106] beachmat_2.22.0          xtable_1.8-4             cluster_2.1.8           \n[109] beeswarm_0.4.0           paletteer_1.6.0          evaluate_1.0.3          \n[112] magick_2.8.5             cli_3.6.4                locfit_1.5-9.11         \n[115] compiler_4.4.2           Rsamtools_2.22.0         rlang_1.1.5             \n[118] crayon_1.5.3             labeling_0.4.3           rematch2_2.1.2          \n[121] fs_1.6.5                 ggbeeswarm_0.7.2         stringi_1.8.4           \n[124] viridisLite_0.4.2        BiocParallel_1.40.0      munsell_0.5.1           \n[127] Biostrings_2.74.1        lazyeval_0.2.2           Matrix_1.7-2            \n[130] ExperimentHub_2.14.0     benchmarkme_1.0.8        patchwork_1.3.0         \n[133] hms_1.1.3                bit64_4.6.0-1            KEGGREST_1.46.0         \n[136] statmod_1.5.0            shiny_1.10.0             AnnotationHub_3.14.0    \n[139] igraph_2.1.4             memoise_2.0.1            bslib_0.9.0             \n[142] benchmarkmeData_1.0.4    bit_4.6.0               \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}