{
  "hash": "cecc2e45da13527aadf83ec0f3f13c42",
  "result": {
    "markdown": "---\ntitle: \"Find Batch-biased Features in SVGs\"\npackage: \"BatchSVG\"\nauthor:\n  - name: \"Christine Hou\"\n    affiliation: Department of Biostatistics, Johns Hopkins University\n    email: chris2018hou@gmail.com\noutput: BiocStyle::html_document\nvignette: >\n  %\\VignetteIndexEntry{01 Tutorial for spe data object}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n### Introduction\n\n`BatchSVG` is the R/Bioconductor package for spatial transcriptomics data quality control (QC). As the feature-based QC method, the package provides functions to identify the biased features associated with the batch effect(s) (e.g. sample, slide, and sex) in spatially variable genes (SVGs) using binomial deviance model, aiming to develop the downstream clustering performances and remove the technical noises caused by batch effects. The package works with [SpatialExperiment](https://github.com/drighelli/SpatialExperiment) objects.\n\n### Installation\n\n(After accepted in [Bioconductor](https://bioconductor.org/)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!requireNamespace(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"BatchSVG\")\n```\n:::\n\n\nInstall the development version from [GitHub](https://christinehou11.github.io/BatchSVG).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install(\"christinehou11/BatchSVG\")\n```\n:::\n\n\n### Biased Feature Identification\n\nIn this section, we will include the standard workflow for using `BatchSVG` to show how the method help to detect and visualize the biased features in SVGs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(BatchSVG)\n# library(humanHippocampus2024)\nlibrary(ExperimentHub)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(cowplot)\nlibrary(here)\n```\n:::\n\n\n#### Data\n\nWe will use the `spatially-resolved transcriptomics (SRT)` dataset from the adjacent tissue sections of the anterior human hippocampus across ten adult neurotypical donors. The dataset is obtained from `humanHippocampus2024` package which currently is in the [development version](https://bioconductor.org/packages/humanHippocampus2024/) on Bioconductor 3.21, and it is the `spatialExperiment` object generated and processed from the [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project. Please read [here](https://christinehou11.github.io/humanHippocampus2024/) if interested in `humanHippocampus2024` data package.\n\n(The codes to access the *spe* dataset in `humanHippocampus2024` package will be updated after the official release of Bioconductor 3.21.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehub <- ExperimentHub()\n\n# Load the datasets of the package\n# myfiles <- query(ehub, \"humanHippocampus2024\")\n# Resulting humanHippocampus2024 datasets from ExperimentHub query\n# myfiles\n# ExperimentHub with 2 records\n# # snapshotDate(): 2024-10-24\n# # $dataprovider: Lieber Institute for Brain Development (LIBD)\n# # $species: Homo sapiens\n# # $rdataclass: SpatialExperiment, SingleCellExperiment\n# # additional mcols(): taxonomyid, genome, description,\n# #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n# #   rdatapath, sourceurl, sourcetype \n# # retrieve records with, e.g., 'object[[\"EH9605\"]]' \n# \n#            title\n#   EH9605 | spe  \n#   EH9606 | sce\n#   \n# spe <- myfiles[[\"EH9605\"]]\n\nspe <- ehub[[\"EH9605\"]]\nspe\n## class: SpatialExperiment \n## dim: 31483 150917 \n## metadata(1): Obtained_from\n## assays(2): counts logcounts\n## rownames(31483): MIR1302-2HG AL627309.1 ... AC007325.4 AC007325.2\n## rowData names(7): source type ... gene_type gene_search\n## colnames(150917): AAACAACGAATAGTTC-1_V10B01-086_D1\n##   AAACAAGTATCTCCCA-1_V10B01-086_D1 ... TTGTTTCCATACAACT-1_Br2720_B1\n##   TTGTTTGTATTACACG-1_Br2720_B1\n## colData names(150): sample_id in_tissue ... nmf99 nmf100\n## reducedDimNames(3): 10x_pca 10x_tsne 10x_umap\n## mainExpName: NULL\n## altExpNames(0):\n## spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\n## imgData names(4): sample_id image_id data scaleFactor\n```\n:::\n\n\nWe will use the spatially variable genes set generated from [spatial_HPC](https://github.com/LieberInstitute/spatial_hpc) project. The result is generated from [nnSVG]((https://www.nature.com/articles/s41467-023-39748-z)) package.\n\nWe will select four samples from the raw data as an example:\n\n-   V11L05-333_B1\n\n-   V11L05-333_D1\n\n-   V11L05-335_D1\n\n-   V11L05-336_A1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfix_order <- distinct(\n    as.data.frame(colData(spe)), slide, array, brnum, sample_id, \n    position, sex) %>% \n    arrange(slide, array)\nsub4 <- fix_order$sample_id[c(14,16, 20,21)]\n\nspe_sub4 <- spe[,spe$sample_id %in% sub4]\nspe_sub4 # 31483, 18945\n## class: SpatialExperiment \n## dim: 31483 18945 \n## metadata(1): Obtained_from\n## assays(2): counts logcounts\n## rownames(31483): MIR1302-2HG AL627309.1 ... AC007325.4 AC007325.2\n## rowData names(7): source type ... gene_type gene_search\n## colnames(18945): AAACAACGAATAGTTC-1_V11L05-333_B1\n##   AAACAAGTATCTCCCA-1_V11L05-333_B1 ... TTGTTTGTATTACACG-1_V11L05-336_A1\n##   TTGTTTGTGTAAATTC-1_V11L05-336_A1\n## colData names(150): sample_id in_tissue ... nmf99 nmf100\n## reducedDimNames(3): 10x_pca 10x_tsne 10x_umap\n## mainExpName: NULL\n## altExpNames(0):\n## spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\n## imgData names(4): sample_id image_id data scaleFactor\n```\n:::\n\n\nWe will refine our selection to include only the top 2,000 ranked features (rank$\\leq$ 2000) and only genes that appear in more than one sample (n \\> 1).\n\nAfter applying these criteria, we obtain 2,082 spatially variable genes across the four samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(here(\"data/nnSVG_outs_HE_only.rda\"))\n\nres_df_sub <- pivot_longer(\n    rownames_to_column(as.data.frame(res_ranks), var<-\"gene_id\"), \n        colnames(res_ranks), \n    names_to=\"sample_id\", \n    values_to=\"rank\", \n    values_drop_na=TRUE)\n    \nres_df_sub <- filter(res_df_sub,\n    sample_id %in% \n        c(\"V11L05-333_B1\", \"V11L05-333_D1\", \"V11L05-335_D1\", \"V11L05-336_A1\"), \n    rank <= 2000) # top 2k sig features\n    \nsvgs_sub4 <- group_by(res_df_sub, gene_id) |>\n    tally() |> \n    filter(n>1)\n\nnrow(svgs_sub4)\n## [1] 2082\n```\n:::\n\n\n#### Perform Feature Selection using `featureSelect()`\n\nWe will perform feature selection on a subset of spatial transcriptomics data (*input*) using a predefined set of spatially variable genes (*VGs*). Specifically, we will compute the number of standard deviations for the relative change in deviance (**nSD_dev\\_{batch effect}**) and rank difference (**nSD_rank\\_{batch effect}**) before and after adjusting for batch effects.\n\nThe `featureSelect()` function enables feature selection while accounting for multiple batch effects. It returns a **list** of data frames, where each batch effect is associated with a corresponding data frame containing key results, including:\n\n-   Relative change in deviance before and after batch effect adjustment\n\n-   Rank differences between the batch-corrected and uncorrected results\n\n-   Number of standard deviations (nSD) for both relative change in deviance and rank difference\n\nWe will use the example of applying `featureSelect()` to a four sample dataset while adjusting for the batch effect *sample_id* and *sex*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspe_sub4 <- spe_sub4[rowData(spe_sub4)$gene_id %in% svgs_sub4$gene_id,]\nrownames(spe_sub4) <- rowData(spe_sub4)$gene_id\n\nSVGs <- svgs_sub4$gene_id\nlist_batch_df <- featureSelect(input = spe_sub4, \n    batch_effect = c(\"sample_id\", \"sex\"), VGs = SVGs)\n## Running feature selection without batch...\n## Batch Effect: sample_id\n## Running feature selection without batch...\n## Calculating deviance and rank difference...\n## Batch Effect: sex\n## Running feature selection without batch...\n## Calculating deviance and rank difference...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(list_batch_df)\n## [1] \"list\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(list_batch_df$sample_id)\n##           gene_id gene_name dev_default rank_default dev_sample_id\n## 1 ENSG00000131584     ACAP3    16125.31         1262      15900.14\n## 2 ENSG00000175756  AURKAIP1    17344.09         1060      17167.86\n## 3 ENSG00000242485    MRPL20    17629.33         1023      17517.05\n## 4 ENSG00000179403      VWA1    12860.93         1726      12825.66\n## 5 ENSG00000160075     SSU72    16145.20         1255      16136.31\n## 6 ENSG00000078369      GNB1    22402.83          516      22271.32\n##   rank_sample_id       d_diff nSD_dev_sample_id r_diff nSD_rank_sample_id\n## 1           1269 0.0141612453       -0.09513109      7         0.16380252\n## 2           1058 0.0102651525       -0.16945410     -2        -0.04680072\n## 3           1004 0.0064098269       -0.24299943    -19        -0.44460683\n## 4           1702 0.0027493688       -0.31282741    -24        -0.56160863\n## 5           1220 0.0005506572       -0.35477067    -35        -0.81901258\n## 6            497 0.0059049925       -0.25262980    -19        -0.44460683\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(list_batch_df$sex)\n##           gene_id gene_name dev_default rank_default  dev_sex rank_sex\n## 1 ENSG00000131584     ACAP3    16125.31         1262 16118.48     1250\n## 2 ENSG00000175756  AURKAIP1    17344.09         1060 17247.44     1064\n## 3 ENSG00000242485    MRPL20    17629.33         1023 17585.70     1013\n## 4 ENSG00000179403      VWA1    12860.93         1726 12860.90     1709\n## 5 ENSG00000160075     SSU72    16145.20         1255 16141.12     1243\n## 6 ENSG00000078369      GNB1    22402.83          516 22314.17      509\n##         d_diff nSD_dev_sex r_diff nSD_rank_sex\n## 1 4.234208e-04  -0.2615600    -12   -0.3080188\n## 2 5.603690e-03  -0.1013769      4    0.1026729\n## 3 2.480783e-03  -0.1979427    -10   -0.2566824\n## 4 1.811106e-06  -0.2745969    -17   -0.4363600\n## 5 2.527558e-04  -0.2668373    -12   -0.3080188\n## 6 3.973515e-03  -0.1517848     -7   -0.1796776\n```\n:::\n\n\n#### Visualize SVG Selection Using `svg_nSD` for Batch Effects\n\nThe `svg_nSD()` function generates visualizations to assess batch effects in spatially variable genes (SVGs). It produces bar charts showing the distribution of SVGs based on relative change in deviance and rank difference, with colors representing different nSD intervals. Additionally, scatter plots compare deviance and rank values with and without batch effects.\n\nBy interpreting these plots, we can determine appropriate nSD thresholds for filtering biased features. The left panels illustrate the distribution of SVGs in terms of deviance and rank difference, while the right panels compare values before and after accounting for batch effects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplots <- svg_nSD(list_batch_df = list_batch_df, \n                sd_interval_dev = c(5,4), sd_interval_rank = c(4,6))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplots$sample_id\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/svg sample-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplots$sex\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/svg sex-1.png){width=960}\n:::\n:::\n\n\nWe can also apply `svg_nSD()` to a single batch effect. Note that the function requires the input to be a list of data frames, even when analyzing only one batch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplots <- svg_nSD(list_batch_df = list_batch_df[1], \n                sd_interval_dev = 5, sd_interval_rank = 7)\nplots$sample_id\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/svg one plot-1.png){width=960}\n:::\n:::\n\n\n#### Identify Biased Genes Using `biasDetect()`\n\nThe function `biasDetect()` is designed to identify and filter out biased genes across different batch effects. Using threshold values selected from the visualization results generated by `svg_nSD()`, this function systematically detects outliers that exceed a specified normalized standard deviation (nSD) threshold in either relative deviance change, rank difference, or both.\n\nThe function outputs visualizations comparing deviance and rank values with and without batch effects. Genes with high deviations, highlighted in color, are identified as potentially biased and can be excluded based on the selected nSD thresholds.\n\nThe function offers flexibility in customizing the plot aesthetics, allowing users to adjust the data point size (**plot_point_size**), shape (**plot_point_shape**), annotated text size (**plot_text_size**), and data point color pallete (**plot_pallete**). Default values are provided for these parameters if not specified. Users should refer to [ggplot2](https://ggplot2.tidyverse.org/index.html) aesthetic guidelines to ensure appropriate values are assigned for each parameter.\n\nWe will use `nSD_dev = 7` and `nSD_rank = 6` as the example. The user should adjust the value based on their dataset features.\n\n**Usage of Different Threshold Options**\n\n-   `threshold = \"dev\"`: Filters biased genes based only on the relative change in deviance. Genes with deviance changes exceeding the specified `nSD_dev` threshold are identified as batch-affected and can be removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_dev <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"dev\", nSD_dev = 7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(bias_dev$sample_id$Table)\n##           gene_id gene_name dev_default rank_default dev_sample_id\n## 1 ENSG00000174576     NPAS4    35003.31          125     24629.414\n## 2 ENSG00000123358     NR4A1    23299.81          457     16115.928\n## 3 ENSG00000170345       FOS    42305.65           73     27146.089\n## 4 ENSG00000256618  MTRNR2L1    69206.34           28     24876.086\n## 5 ENSG00000118271       TTR  4719046.58            1   3292127.945\n## 6 ENSG00000229807      XIST    15223.50         1408      8819.689\n##   rank_sample_id    d_diff nSD_dev_sample_id r_diff nSD_rank_sample_id\n## 1            363 0.4211996          7.669653    238           5.569286\n## 2           1226 0.4457631          8.138234    769          17.994876\n## 3            263 0.5584435         10.287758    190           4.446068\n## 4            351 1.7820430         33.629502    323           7.558316\n## 5              1 0.4334335          7.903030      0           0.000000\n## 6           2050 0.7260812         13.485664    642          15.023031\n##   nSD_bin_dev dev_outlier\n## 1      [7,14)        TRUE\n## 2      [7,14)        TRUE\n## 3      [7,14)        TRUE\n## 4     [28,35]        TRUE\n## 5      [7,14)        TRUE\n## 6      [7,14)        TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_dev$sample_id$Plot\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/bias detect dev plot-1.png){width=672}\n:::\n:::\n\n\nWe can change the data point size using **plot_point_size**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# size default = 3\nbias_dev_size <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"dev\", nSD_dev = 7, plot_point_size = c(2,4))\n\nplot_grid(bias_dev_size$sample_id$Plot,bias_dev_size$sex$Plot)\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/size change-1.png){width=960}\n:::\n:::\n\n\n-   `threshold = \"rank\"`: Identifies biased genes based solely on rank difference. Genes with rank shifts exceeding `nSD_rank` are considered biased.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_rank <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"rank\", nSD_rank = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(bias_rank$sex$Table)\n##           gene_id gene_name dev_default rank_default  dev_sex rank_sex\n## 1 ENSG00000159388      BTG2    18311.28          926 14257.70     1543\n## 2 ENSG00000135625      EGR4    20336.84          705 17851.54      972\n## 3 ENSG00000120738      EGR1    19882.54          752 17444.96     1037\n## 4 ENSG00000120129     DUSP1    25054.85          365 19007.41      834\n## 5 ENSG00000204388    HSPA1B    19085.73          841 16440.69     1197\n## 6 ENSG00000130222   GADD45G    16565.74         1191 13815.91     1592\n##      d_diff nSD_dev_sex r_diff nSD_rank_sex nSD_bin_rank rank_outlier\n## 1 0.2843081    8.516661    617    15.837301      [12,18)         TRUE\n## 2 0.1392207    4.030301    267     6.853419       [6,12)         TRUE\n## 3 0.1397297    4.046039    285     7.315447       [6,12)         TRUE\n## 4 0.3181621    9.563487    469    12.038402      [12,18)         TRUE\n## 5 0.1608836    4.700155    356     9.137892       [6,12)         TRUE\n## 6 0.1990332    5.879808    401    10.292962       [6,12)         TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_rank$sex$Plot\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/bias detect rank plot-1.png){width=672}\n:::\n:::\n\n\nWe can change the data point shape using **plot_point_shape**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# shape default = 16\nbias_rank_shape <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"rank\", nSD_rank = 6, plot_point_shape = c(2, 18))\n\nplot_grid(bias_rank_shape$sample_id$Plot,bias_rank_shape$sex$Plot)\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/shape change-1.png){width=960}\n:::\n:::\n\n\n-   `threshold = \"both\"`: Detects biased genes based on both deviance change and rank difference, providing a more stringent filtering approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_both <- biasDetect(list_batch_df = list_batch_df, threshold = \"both\",\n    nSD_dev = 7, nSD_rank = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_both$sample_id$Plot\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/both plot-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(bias_both$sex$Table)\n##           gene_id gene_name dev_default rank_default   dev_sex rank_sex\n## 1 ENSG00000173110     HSPA6    9887.942         2011  7867.831     2074\n## 2 ENSG00000159388      BTG2   18311.285          926 14257.704     1543\n## 3 ENSG00000135625      EGR4   20336.842          705 17851.538      972\n## 4 ENSG00000120738      EGR1   19882.541          752 17444.962     1037\n## 5 ENSG00000120129     DUSP1   25054.848          365 19007.410      834\n## 6 ENSG00000204389    HSPA1A   52523.899           47 41069.968       75\n##      d_diff nSD_dev_sex r_diff nSD_rank_sex nSD_bin_dev dev_outlier\n## 1 0.2567557    7.664691     63    1.6170988      [7,14)        TRUE\n## 2 0.2843081    8.516661    617   15.8373012      [7,14)        TRUE\n## 3 0.1392207    4.030301    267    6.8534188       [0,7)       FALSE\n## 4 0.1397297    4.046039    285    7.3154471       [0,7)       FALSE\n## 5 0.3181621    9.563487    469   12.0384024      [7,14)        TRUE\n## 6 0.2788882    8.349068     28    0.7187106      [7,14)        TRUE\n##   nSD_bin_rank rank_outlier\n## 1        [0,6)        FALSE\n## 2      [12,18)         TRUE\n## 3       [6,12)         TRUE\n## 4       [6,12)         TRUE\n## 5      [12,18)         TRUE\n## 6        [0,6)        FALSE\n```\n:::\n\n\nWe can change the data point color using **plot_pallete**. The color pallete [here](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) can be referenced on since the function uses `RColorBrewer` to generate colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# color default = \"YlOrRd\"\nbias_both_color <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"both\", nSD_dev = 7, nSD_rank = 6, plot_palette = \"Greens\")\n\nplot_grid(bias_both_color$sample_id$Plot,bias_both_color$sex$Plot,nrow = 2)\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/color change-1.png){width=960}\n:::\n:::\n\n\nWe can change the text size using **plot_text_size**. We also specify the color palletes for both batch effects at the same time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# text size default = 3\nbias_both_color_text <- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"both\", nSD_dev = 7, nSD_rank = 6, \n    plot_palette = c(\"Blues\",\"Greens\"), plot_text_size = c(2,4))\n\nplot_grid(bias_both_color_text$sample_id$Plot,\n    bias_both_color_text$sex$Plot,nrow = 2)\n```\n\n::: {.cell-output-display}\n![](humanHippocampus2024_sub4_spe_files/figure-html/text change-1.png){width=960}\n:::\n:::\n\n\n#### Refine SVGs by Removing Batch-Affected Outliers\n\nFinally, we obtain a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for `nSD_dev` and `nSD_rank`.\n\nHere, we use the results from bias_both, which applied `threshold = \"both\"` to account for both deviance and rank differences, with the batch effect set to sample ID.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_both_df <- bias_both$sample_id$Table\nsvgs_filt <- setdiff(svgs_sub4$gene_id, bias_both_df$gene_id)\nsvgs_sub4_filt <- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt, ]\nnrow(svgs_sub4_filt)\n## [1] 2067\n```\n:::\n\n\nAfter obtaining the refined set of SVGs, these genes can be further analyzed using established spatial transcriptomics clustering algorithms to explore tissue layers and spatial organization.\n\n### `R` session information {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Session info\nsessionInfo()\n#> R version 4.4.2 (2024-10-31)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.3\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n#> \n#> locale:\n#> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#> \n#> time zone: America/New_York\n#> tzcode source: internal\n#> \n#> attached base packages:\n#> [1] stats4    stats     graphics  grDevices utils     datasets  methods  \n#> [8] base     \n#> \n#> other attached packages:\n#>  [1] humanHippocampus2024_0.99.8 here_1.0.1                 \n#>  [3] cowplot_1.1.3               tibble_3.2.1               \n#>  [5] dplyr_1.1.4                 tidyr_1.3.1                \n#>  [7] SpatialExperiment_1.16.0    SingleCellExperiment_1.28.1\n#>  [9] SummarizedExperiment_1.36.0 Biobase_2.66.0             \n#> [11] GenomicRanges_1.58.0        GenomeInfoDb_1.42.3        \n#> [13] IRanges_2.40.1              S4Vectors_0.44.0           \n#> [15] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n#> [17] ExperimentHub_2.14.0        AnnotationHub_3.14.0       \n#> [19] BiocFileCache_2.14.0        dbplyr_2.5.0               \n#> [21] BiocGenerics_0.52.0         BatchSVG_0.99.6            \n#> \n#> loaded via a namespace (and not attached):\n#>  [1] tidyselect_1.2.1        farver_2.1.2            blob_1.2.4             \n#>  [4] filelock_1.0.3          Biostrings_2.74.1       fastmap_1.2.0          \n#>  [7] digest_0.6.37           rsvd_1.0.5              mime_0.12              \n#> [10] lifecycle_1.0.4         KEGGREST_1.46.0         RSQLite_2.3.9          \n#> [13] magrittr_2.0.3          compiler_4.4.2          rlang_1.1.5            \n#> [16] tools_4.4.2             yaml_2.3.10             knitr_1.49             \n#> [19] labeling_0.4.3          S4Arrays_1.6.0          htmlwidgets_1.6.4      \n#> [22] bit_4.6.0               curl_6.2.1              DelayedArray_0.32.0    \n#> [25] RColorBrewer_1.1-3      abind_1.4-8             BiocParallel_1.40.0    \n#> [28] withr_3.0.2             purrr_1.0.4             grid_4.4.2             \n#> [31] beachmat_2.22.0         colorspace_2.1-1        ggplot2_3.5.1          \n#> [34] scales_1.3.0            cli_3.6.4               rmarkdown_2.29         \n#> [37] crayon_1.5.3            generics_0.1.3          rstudioapi_0.17.1      \n#> [40] rjson_0.2.23            httr_1.4.7              DBI_1.2.3              \n#> [43] cachem_1.1.0            zlibbioc_1.52.0         parallel_4.4.2         \n#> [46] AnnotationDbi_1.68.0    BiocManager_1.30.25     XVector_0.46.0         \n#> [49] vctrs_0.6.5             Matrix_1.7-2            jsonlite_1.9.1         \n#> [52] BiocSingular_1.22.0     bit64_4.6.0-1           ggrepel_0.9.6          \n#> [55] scry_1.18.0             irlba_2.3.5.1           magick_2.8.5           \n#> [58] glue_1.8.0              codetools_0.2-20        gtable_0.3.6           \n#> [61] BiocVersion_3.20.0      UCSC.utils_1.2.0        ScaledMatrix_1.14.0    \n#> [64] munsell_0.5.1           pillar_1.10.1           rappdirs_0.3.3         \n#> [67] htmltools_0.5.8.1       GenomeInfoDbData_1.2.13 R6_2.6.1               \n#> [70] rprojroot_2.0.4         evaluate_1.0.3          lattice_0.22-6         \n#> [73] png_0.1-8               memoise_2.0.1           Rcpp_1.0.14            \n#> [76] SparseArray_1.6.2       xfun_0.51               pkgconfig_2.0.3\n```\n:::\n",
    "supporting": [
      "humanHippocampus2024_sub4_spe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}