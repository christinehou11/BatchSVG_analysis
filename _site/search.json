[
  {
    "objectID": "humanHippocampus2024_sub4_spe.html",
    "href": "humanHippocampus2024_sub4_spe.html",
    "title": "Find Batch-biased Features in SVGs",
    "section": "",
    "text": "Introduction\nBatchSVG is the R/Bioconductor package for spatial transcriptomics data quality control (QC). As the feature-based QC method, the package provides functions to identify the biased features associated with the batch effect(s) (e.g.Â sample, slide, and sex) in spatially variable genes (SVGs) using binomial deviance model, aiming to develop the downstream clustering performances and remove the technical noises caused by batch effects. The package works with SpatialExperiment objects.\n\n\nInstallation\n(After accepted in Bioconductor).\n\nif (!requireNamespace(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"BatchSVG\")\n\nInstall the development version from GitHub.\n\nremotes::install(\"christinehou11/BatchSVG\")\n\n\n\nBiased Feature Identification\nIn this section, we will include the standard workflow for using BatchSVG to show how the method help to detect and visualize the biased features in SVGs.\n\nlibrary(BatchSVG)\n# library(humanHippocampus2024)\nlibrary(ExperimentHub)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(cowplot)\nlibrary(here)\n\n\nData\nWe will use the spatially-resolved transcriptomics (SRT) dataset from the adjacent tissue sections of the anterior human hippocampus across ten adult neurotypical donors. The dataset is obtained from humanHippocampus2024 package which currently is in the development version on Bioconductor 3.21, and it is the spatialExperiment object generated and processed from the spatial_HPC project. Please read here if interested in humanHippocampus2024 data package.\n(The codes to access the spe dataset in humanHippocampus2024 package will be updated after the official release of Bioconductor 3.21.)\n\nehub &lt;- ExperimentHub()\n\n# Load the datasets of the package\n# myfiles &lt;- query(ehub, \"humanHippocampus2024\")\n# Resulting humanHippocampus2024 datasets from ExperimentHub query\n# myfiles\n# ExperimentHub with 2 records\n# # snapshotDate(): 2024-10-24\n# # $dataprovider: Lieber Institute for Brain Development (LIBD)\n# # $species: Homo sapiens\n# # $rdataclass: SpatialExperiment, SingleCellExperiment\n# # additional mcols(): taxonomyid, genome, description,\n# #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n# #   rdatapath, sourceurl, sourcetype \n# # retrieve records with, e.g., 'object[[\"EH9605\"]]' \n# \n#            title\n#   EH9605 | spe  \n#   EH9606 | sce\n#   \n# spe &lt;- myfiles[[\"EH9605\"]]\n\nspe &lt;- ehub[[\"EH9605\"]]\nspe\n## class: SpatialExperiment \n## dim: 31483 150917 \n## metadata(1): Obtained_from\n## assays(2): counts logcounts\n## rownames(31483): MIR1302-2HG AL627309.1 ... AC007325.4 AC007325.2\n## rowData names(7): source type ... gene_type gene_search\n## colnames(150917): AAACAACGAATAGTTC-1_V10B01-086_D1\n##   AAACAAGTATCTCCCA-1_V10B01-086_D1 ... TTGTTTCCATACAACT-1_Br2720_B1\n##   TTGTTTGTATTACACG-1_Br2720_B1\n## colData names(150): sample_id in_tissue ... nmf99 nmf100\n## reducedDimNames(3): 10x_pca 10x_tsne 10x_umap\n## mainExpName: NULL\n## altExpNames(0):\n## spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\n## imgData names(4): sample_id image_id data scaleFactor\n\nWe will use the spatially variable genes set generated from spatial_HPC project. The result is generated from nnSVG package.\nWe will select four samples from the raw data as an example:\n\nV11L05-333_B1\nV11L05-333_D1\nV11L05-335_D1\nV11L05-336_A1.\n\n\nfix_order &lt;- distinct(\n    as.data.frame(colData(spe)), slide, array, brnum, sample_id, \n    position, sex) %&gt;% \n    arrange(slide, array)\nsub4 &lt;- fix_order$sample_id[c(14,16, 20,21)]\n\nspe_sub4 &lt;- spe[,spe$sample_id %in% sub4]\nspe_sub4 # 31483, 18945\n## class: SpatialExperiment \n## dim: 31483 18945 \n## metadata(1): Obtained_from\n## assays(2): counts logcounts\n## rownames(31483): MIR1302-2HG AL627309.1 ... AC007325.4 AC007325.2\n## rowData names(7): source type ... gene_type gene_search\n## colnames(18945): AAACAACGAATAGTTC-1_V11L05-333_B1\n##   AAACAAGTATCTCCCA-1_V11L05-333_B1 ... TTGTTTGTATTACACG-1_V11L05-336_A1\n##   TTGTTTGTGTAAATTC-1_V11L05-336_A1\n## colData names(150): sample_id in_tissue ... nmf99 nmf100\n## reducedDimNames(3): 10x_pca 10x_tsne 10x_umap\n## mainExpName: NULL\n## altExpNames(0):\n## spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\n## imgData names(4): sample_id image_id data scaleFactor\n\nWe will refine our selection to include only the top 2,000 ranked features (rank\\(\\leq\\) 2000) and only genes that appear in more than one sample (n &gt; 1).\nAfter applying these criteria, we obtain 2,082 spatially variable genes across the four samples.\n\nload(here(\"data/nnSVG_outs_HE_only.rda\"))\n\nres_df_sub &lt;- pivot_longer(\n    rownames_to_column(as.data.frame(res_ranks), var&lt;-\"gene_id\"), \n        colnames(res_ranks), \n    names_to=\"sample_id\", \n    values_to=\"rank\", \n    values_drop_na=TRUE)\n    \nres_df_sub &lt;- filter(res_df_sub,\n    sample_id %in% \n        c(\"V11L05-333_B1\", \"V11L05-333_D1\", \"V11L05-335_D1\", \"V11L05-336_A1\"), \n    rank &lt;= 2000) # top 2k sig features\n    \nsvgs_sub4 &lt;- group_by(res_df_sub, gene_id) |&gt;\n    tally() |&gt; \n    filter(n&gt;1)\n\nnrow(svgs_sub4)\n## [1] 2082\n\n\n\nPerform Feature Selection using featureSelect()\nWe will perform feature selection on a subset of spatial transcriptomics data (input) using a predefined set of spatially variable genes (VGs). Specifically, we will compute the number of standard deviations for the relative change in deviance (nSD_dev_{batch effect}) and rank difference (nSD_rank_{batch effect}) before and after adjusting for batch effects.\nThe featureSelect() function enables feature selection while accounting for multiple batch effects. It returns a list of data frames, where each batch effect is associated with a corresponding data frame containing key results, including:\n\nRelative change in deviance before and after batch effect adjustment\nRank differences between the batch-corrected and uncorrected results\nNumber of standard deviations (nSD) for both relative change in deviance and rank difference\n\nWe will use the example of applying featureSelect() to a four sample dataset while adjusting for the batch effect sample_id and sex.\n\nspe_sub4 &lt;- spe_sub4[rowData(spe_sub4)$gene_id %in% svgs_sub4$gene_id,]\nrownames(spe_sub4) &lt;- rowData(spe_sub4)$gene_id\n\nSVGs &lt;- svgs_sub4$gene_id\nlist_batch_df &lt;- featureSelect(input = spe_sub4, \n    batch_effect = c(\"sample_id\", \"sex\"), VGs = SVGs)\n## Running feature selection without batch...\n## Batch Effect: sample_id\n## Running feature selection without batch...\n## Calculating deviance and rank difference...\n## Batch Effect: sex\n## Running feature selection without batch...\n## Calculating deviance and rank difference...\n\n\nclass(list_batch_df)\n## [1] \"list\"\n\n\nhead(list_batch_df$sample_id)\n##           gene_id gene_name dev_default rank_default dev_sample_id\n## 1 ENSG00000131584     ACAP3    16125.31         1262      15900.14\n## 2 ENSG00000175756  AURKAIP1    17344.09         1060      17167.86\n## 3 ENSG00000242485    MRPL20    17629.33         1023      17517.05\n## 4 ENSG00000179403      VWA1    12860.93         1726      12825.66\n## 5 ENSG00000160075     SSU72    16145.20         1255      16136.31\n## 6 ENSG00000078369      GNB1    22402.83          516      22271.32\n##   rank_sample_id       d_diff nSD_dev_sample_id r_diff nSD_rank_sample_id\n## 1           1269 0.0141612453       -0.09513109      7         0.16380252\n## 2           1058 0.0102651525       -0.16945410     -2        -0.04680072\n## 3           1004 0.0064098269       -0.24299943    -19        -0.44460683\n## 4           1702 0.0027493688       -0.31282741    -24        -0.56160863\n## 5           1220 0.0005506572       -0.35477067    -35        -0.81901258\n## 6            497 0.0059049925       -0.25262980    -19        -0.44460683\n\n\nhead(list_batch_df$sex)\n##           gene_id gene_name dev_default rank_default  dev_sex rank_sex\n## 1 ENSG00000131584     ACAP3    16125.31         1262 16118.48     1250\n## 2 ENSG00000175756  AURKAIP1    17344.09         1060 17247.44     1064\n## 3 ENSG00000242485    MRPL20    17629.33         1023 17585.70     1013\n## 4 ENSG00000179403      VWA1    12860.93         1726 12860.90     1709\n## 5 ENSG00000160075     SSU72    16145.20         1255 16141.12     1243\n## 6 ENSG00000078369      GNB1    22402.83          516 22314.17      509\n##         d_diff nSD_dev_sex r_diff nSD_rank_sex\n## 1 4.234208e-04  -0.2615600    -12   -0.3080188\n## 2 5.603690e-03  -0.1013769      4    0.1026729\n## 3 2.480783e-03  -0.1979427    -10   -0.2566824\n## 4 1.811106e-06  -0.2745969    -17   -0.4363600\n## 5 2.527558e-04  -0.2668373    -12   -0.3080188\n## 6 3.973515e-03  -0.1517848     -7   -0.1796776\n\n\n\nVisualize SVG Selection Using svg_nSD for Batch Effects\nThe svg_nSD() function generates visualizations to assess batch effects in spatially variable genes (SVGs). It produces bar charts showing the distribution of SVGs based on relative change in deviance and rank difference, with colors representing different nSD intervals. Additionally, scatter plots compare deviance and rank values with and without batch effects.\nBy interpreting these plots, we can determine appropriate nSD thresholds for filtering biased features. The left panels illustrate the distribution of SVGs in terms of deviance and rank difference, while the right panels compare values before and after accounting for batch effects.\n\nplots &lt;- svg_nSD(list_batch_df = list_batch_df, \n                sd_interval_dev = c(5,4), sd_interval_rank = c(4,6))\n\n\nplots$sample_id\n\n\n\n\n\nplots$sex\n\n\n\n\nWe can also apply svg_nSD() to a single batch effect. Note that the function requires the input to be a list of data frames, even when analyzing only one batch.\n\nplots &lt;- svg_nSD(list_batch_df = list_batch_df[1], \n                sd_interval_dev = 5, sd_interval_rank = 7)\nplots$sample_id\n\n\n\n\n\n\nIdentify Biased Genes Using biasDetect()\nThe function biasDetect() is designed to identify and filter out biased genes across different batch effects. Using threshold values selected from the visualization results generated by svg_nSD(), this function systematically detects outliers that exceed a specified normalized standard deviation (nSD) threshold in either relative deviance change, rank difference, or both.\nThe function outputs visualizations comparing deviance and rank values with and without batch effects. Genes with high deviations, highlighted in color, are identified as potentially biased and can be excluded based on the selected nSD thresholds.\nThe function offers flexibility in customizing the plot aesthetics, allowing users to adjust the data point size (plot_point_size), shape (plot_point_shape), annotated text size (plot_text_size), and data point color pallete (plot_pallete). Default values are provided for these parameters if not specified. Users should refer to ggplot2 aesthetic guidelines to ensure appropriate values are assigned for each parameter.\nWe will use nSD_dev = 7 and nSD_rank = 6 as the example. The user should adjust the value based on their dataset features.\nUsage of Different Threshold Options\n\nthreshold = \"dev\": Filters biased genes based only on the relative change in deviance. Genes with deviance changes exceeding the specified nSD_dev threshold are identified as batch-affected and can be removed.\n\n\nbias_dev &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"dev\", nSD_dev = 7)\n\n\nhead(bias_dev$sample_id$Table)\n##           gene_id gene_name dev_default rank_default dev_sample_id\n## 1 ENSG00000174576     NPAS4    35003.31          125     24629.414\n## 2 ENSG00000123358     NR4A1    23299.81          457     16115.928\n## 3 ENSG00000170345       FOS    42305.65           73     27146.089\n## 4 ENSG00000256618  MTRNR2L1    69206.34           28     24876.086\n## 5 ENSG00000118271       TTR  4719046.58            1   3292127.945\n## 6 ENSG00000229807      XIST    15223.50         1408      8819.689\n##   rank_sample_id    d_diff nSD_dev_sample_id r_diff nSD_rank_sample_id\n## 1            363 0.4211996          7.669653    238           5.569286\n## 2           1226 0.4457631          8.138234    769          17.994876\n## 3            263 0.5584435         10.287758    190           4.446068\n## 4            351 1.7820430         33.629502    323           7.558316\n## 5              1 0.4334335          7.903030      0           0.000000\n## 6           2050 0.7260812         13.485664    642          15.023031\n##   nSD_bin_dev dev_outlier\n## 1      [7,14)        TRUE\n## 2      [7,14)        TRUE\n## 3      [7,14)        TRUE\n## 4     [28,35]        TRUE\n## 5      [7,14)        TRUE\n## 6      [7,14)        TRUE\n\n\nbias_dev$sample_id$Plot\n\n\n\n\nWe can change the data point size using plot_point_size.\n\n# size default = 3\nbias_dev_size &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"dev\", nSD_dev = 7, plot_point_size = c(2,4))\n\nplot_grid(bias_dev_size$sample_id$Plot,bias_dev_size$sex$Plot)\n\n\n\n\n\nthreshold = \"rank\": Identifies biased genes based solely on rank difference. Genes with rank shifts exceeding nSD_rank are considered biased.\n\n\nbias_rank &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"rank\", nSD_rank = 6)\n\n\nhead(bias_rank$sex$Table)\n##           gene_id gene_name dev_default rank_default  dev_sex rank_sex\n## 1 ENSG00000159388      BTG2    18311.28          926 14257.70     1543\n## 2 ENSG00000135625      EGR4    20336.84          705 17851.54      972\n## 3 ENSG00000120738      EGR1    19882.54          752 17444.96     1037\n## 4 ENSG00000120129     DUSP1    25054.85          365 19007.41      834\n## 5 ENSG00000204388    HSPA1B    19085.73          841 16440.69     1197\n## 6 ENSG00000130222   GADD45G    16565.74         1191 13815.91     1592\n##      d_diff nSD_dev_sex r_diff nSD_rank_sex nSD_bin_rank rank_outlier\n## 1 0.2843081    8.516661    617    15.837301      [12,18)         TRUE\n## 2 0.1392207    4.030301    267     6.853419       [6,12)         TRUE\n## 3 0.1397297    4.046039    285     7.315447       [6,12)         TRUE\n## 4 0.3181621    9.563487    469    12.038402      [12,18)         TRUE\n## 5 0.1608836    4.700155    356     9.137892       [6,12)         TRUE\n## 6 0.1990332    5.879808    401    10.292962       [6,12)         TRUE\n\n\nbias_rank$sex$Plot\n\n\n\n\nWe can change the data point shape using plot_point_shape.\n\n# shape default = 16\nbias_rank_shape &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"rank\", nSD_rank = 6, plot_point_shape = c(2, 18))\n\nplot_grid(bias_rank_shape$sample_id$Plot,bias_rank_shape$sex$Plot)\n\n\n\n\n\nthreshold = \"both\": Detects biased genes based on both deviance change and rank difference, providing a more stringent filtering approach.\n\n\nbias_both &lt;- biasDetect(list_batch_df = list_batch_df, threshold = \"both\",\n    nSD_dev = 7, nSD_rank = 6)\n\n\nbias_both$sample_id$Plot\n\n\n\n\n\nhead(bias_both$sex$Table)\n##           gene_id gene_name dev_default rank_default   dev_sex rank_sex\n## 1 ENSG00000173110     HSPA6    9887.942         2011  7867.831     2074\n## 2 ENSG00000159388      BTG2   18311.285          926 14257.704     1543\n## 3 ENSG00000135625      EGR4   20336.842          705 17851.538      972\n## 4 ENSG00000120738      EGR1   19882.541          752 17444.962     1037\n## 5 ENSG00000120129     DUSP1   25054.848          365 19007.410      834\n## 6 ENSG00000204389    HSPA1A   52523.899           47 41069.968       75\n##      d_diff nSD_dev_sex r_diff nSD_rank_sex nSD_bin_dev dev_outlier\n## 1 0.2567557    7.664691     63    1.6170988      [7,14)        TRUE\n## 2 0.2843081    8.516661    617   15.8373012      [7,14)        TRUE\n## 3 0.1392207    4.030301    267    6.8534188       [0,7)       FALSE\n## 4 0.1397297    4.046039    285    7.3154471       [0,7)       FALSE\n## 5 0.3181621    9.563487    469   12.0384024      [7,14)        TRUE\n## 6 0.2788882    8.349068     28    0.7187106      [7,14)        TRUE\n##   nSD_bin_rank rank_outlier\n## 1        [0,6)        FALSE\n## 2      [12,18)         TRUE\n## 3       [6,12)         TRUE\n## 4       [6,12)         TRUE\n## 5      [12,18)         TRUE\n## 6        [0,6)        FALSE\n\nWe can change the data point color using plot_pallete. The color pallete here can be referenced on since the function uses RColorBrewer to generate colors.\n\n# color default = \"YlOrRd\"\nbias_both_color &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"both\", nSD_dev = 7, nSD_rank = 6, plot_palette = \"Greens\")\n\nplot_grid(bias_both_color$sample_id$Plot,bias_both_color$sex$Plot,nrow = 2)\n\n\n\n\nWe can change the text size using plot_text_size. We also specify the color palletes for both batch effects at the same time.\n\n# text size default = 3\nbias_both_color_text &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"both\", nSD_dev = 7, nSD_rank = 6, \n    plot_palette = c(\"Blues\",\"Greens\"), plot_text_size = c(2,4))\n\nplot_grid(bias_both_color_text$sample_id$Plot,\n    bias_both_color_text$sex$Plot,nrow = 2)\n\n\n\n\n\n\nRefine SVGs by Removing Batch-Affected Outliers\nFinally, we obtain a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for nSD_dev and nSD_rank.\nHere, we use the results from bias_both, which applied threshold = \"both\" to account for both deviance and rank differences, with the batch effect set to sample ID.\n\nbias_both_df &lt;- bias_both$sample_id$Table\nsvgs_filt &lt;- setdiff(svgs_sub4$gene_id, bias_both_df$gene_id)\nsvgs_sub4_filt &lt;- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt, ]\nnrow(svgs_sub4_filt)\n## [1] 2067\n\nAfter obtaining the refined set of SVGs, these genes can be further analyzed using established spatial transcriptomics clustering algorithms to explore tissue layers and spatial organization.\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n#&gt; R version 4.4.2 (2024-10-31)\n#&gt; Platform: aarch64-apple-darwin20\n#&gt; Running under: macOS Sequoia 15.3\n#&gt; \n#&gt; Matrix products: default\n#&gt; BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \n#&gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n#&gt; \n#&gt; locale:\n#&gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#&gt; \n#&gt; time zone: America/New_York\n#&gt; tzcode source: internal\n#&gt; \n#&gt; attached base packages:\n#&gt; [1] stats4    stats     graphics  grDevices utils     datasets  methods  \n#&gt; [8] base     \n#&gt; \n#&gt; other attached packages:\n#&gt;  [1] humanHippocampus2024_0.99.8 here_1.0.1                 \n#&gt;  [3] cowplot_1.1.3               tibble_3.2.1               \n#&gt;  [5] dplyr_1.1.4                 tidyr_1.3.1                \n#&gt;  [7] SpatialExperiment_1.16.0    SingleCellExperiment_1.28.1\n#&gt;  [9] SummarizedExperiment_1.36.0 Biobase_2.66.0             \n#&gt; [11] GenomicRanges_1.58.0        GenomeInfoDb_1.42.3        \n#&gt; [13] IRanges_2.40.1              S4Vectors_0.44.0           \n#&gt; [15] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n#&gt; [17] ExperimentHub_2.14.0        AnnotationHub_3.14.0       \n#&gt; [19] BiocFileCache_2.14.0        dbplyr_2.5.0               \n#&gt; [21] BiocGenerics_0.52.0         BatchSVG_0.99.6            \n#&gt; \n#&gt; loaded via a namespace (and not attached):\n#&gt;  [1] tidyselect_1.2.1        farver_2.1.2            blob_1.2.4             \n#&gt;  [4] filelock_1.0.3          Biostrings_2.74.1       fastmap_1.2.0          \n#&gt;  [7] digest_0.6.37           rsvd_1.0.5              mime_0.12              \n#&gt; [10] lifecycle_1.0.4         KEGGREST_1.46.0         RSQLite_2.3.9          \n#&gt; [13] magrittr_2.0.3          compiler_4.4.2          rlang_1.1.5            \n#&gt; [16] tools_4.4.2             yaml_2.3.10             knitr_1.49             \n#&gt; [19] labeling_0.4.3          S4Arrays_1.6.0          htmlwidgets_1.6.4      \n#&gt; [22] bit_4.6.0               curl_6.2.1              DelayedArray_0.32.0    \n#&gt; [25] RColorBrewer_1.1-3      abind_1.4-8             BiocParallel_1.40.0    \n#&gt; [28] withr_3.0.2             purrr_1.0.4             grid_4.4.2             \n#&gt; [31] beachmat_2.22.0         colorspace_2.1-1        ggplot2_3.5.1          \n#&gt; [34] scales_1.3.0            cli_3.6.4               rmarkdown_2.29         \n#&gt; [37] crayon_1.5.3            generics_0.1.3          rstudioapi_0.17.1      \n#&gt; [40] rjson_0.2.23            httr_1.4.7              DBI_1.2.3              \n#&gt; [43] cachem_1.1.0            zlibbioc_1.52.0         parallel_4.4.2         \n#&gt; [46] AnnotationDbi_1.68.0    BiocManager_1.30.25     XVector_0.46.0         \n#&gt; [49] vctrs_0.6.5             Matrix_1.7-2            jsonlite_1.9.1         \n#&gt; [52] BiocSingular_1.22.0     bit64_4.6.0-1           ggrepel_0.9.6          \n#&gt; [55] scry_1.18.0             irlba_2.3.5.1           magick_2.8.5           \n#&gt; [58] glue_1.8.0              codetools_0.2-20        gtable_0.3.6           \n#&gt; [61] BiocVersion_3.20.0      UCSC.utils_1.2.0        ScaledMatrix_1.14.0    \n#&gt; [64] munsell_0.5.1           pillar_1.10.1           rappdirs_0.3.3         \n#&gt; [67] htmltools_0.5.8.1       GenomeInfoDbData_1.2.13 R6_2.6.1               \n#&gt; [70] rprojroot_2.0.4         evaluate_1.0.3          lattice_0.22-6         \n#&gt; [73] png_0.1-8               memoise_2.0.1           Rcpp_1.0.14            \n#&gt; [76] SparseArray_1.6.2       xfun_0.51               pkgconfig_2.0.3"
  },
  {
    "objectID": "dataDrivenThreshold.html",
    "href": "dataDrivenThreshold.html",
    "title": "dataDrivenThreshold",
    "section": "",
    "text": "library(tidyverse)\n\nââ Attaching core tidyverse packages ââââââââââââââââââââââââ tidyverse 2.0.0 ââ\nâ dplyr     1.1.4     â readr     2.1.5\nâ forcats   1.0.0     â stringr   1.5.1\nâ ggplot2   3.5.1     â tibble    3.2.1\nâ lubridate 1.9.4     â tidyr     1.3.1\nâ purrr     1.0.4     \nââ Conflicts ââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ\nâ dplyr::filter() masks stats::filter()\nâ dplyr::lag()    masks stats::lag()\nâ¹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "spatialLIBD_spe.html",
    "href": "spatialLIBD_spe.html",
    "title": "spatialLIBD_spe",
    "section": "",
    "text": "library(tidyverse)\n\nââ Attaching core tidyverse packages ââââââââââââââââââââââââ tidyverse 2.0.0 ââ\nâ dplyr     1.1.4     â readr     2.1.5\nâ forcats   1.0.0     â stringr   1.5.1\nâ ggplot2   3.5.1     â tibble    3.2.1\nâ lubridate 1.9.4     â tidyr     1.3.1\nâ purrr     1.0.4     \nââ Conflicts ââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ\nâ dplyr::filter() masks stats::filter()\nâ dplyr::lag()    masks stats::lag()\nâ¹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "featureSelection.html",
    "href": "featureSelection.html",
    "title": "BatchSVG_analysis",
    "section": "",
    "text": "Introduction\nThe BatchSVG package implements feature selection using the binomial deviance model. In this vignette, we provide a detailed justification for selecting the binomial deviance model as the most appropriate approach for our method. Through comprehensive comparisons with alternative feature selection models, we demonstrate its advantages in ranking spatially variable genes (SVGs), ensuring reproducibility, and mitigating batch effects.\n\n\nSpatialLIBD Dataset\nWe chose the dorsolateral prefrontal cortex (DLPFC) dataset available through the spatialLIBD package to help determine the appropriate feature selection method.\n\nlibrary(spatialLIBD)\nspatialLIBD_spe &lt;- fetch_data(type = \"spe\")\ntable(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\")])\n\n         subject\nsample_id Br5292 Br5595 Br8100\n   151507   4226      0      0\n   151508   4384      0      0\n   151509   4789      0      0\n   151510   4634      0      0\n   151669      0   3661      0\n   151670      0   3498      0\n   151671      0   4110      0\n   151672      0   4015      0\n   151673      0      0   3639\n   151674      0      0   3673\n   151675      0      0   3592\n   151676      0      0   3460\n\n\nWe ran the nnSVG model on the spatialLIBD data to identify SVGs.\n\nlibd_svg &lt;- read.csv(\"data/libd-all_nnSVG_p-05-features-df.csv\", \n    row.names = 1, check.names = FALSE)\nhead(libd_svg)\n\n                        source type         gene_id gene_version gene_name\nENSG00000187608 ensembl_havana gene ENSG00000187608            8     ISG15\nENSG00000131584 ensembl_havana gene ENSG00000131584           18     ACAP3\nENSG00000242485 ensembl_havana gene ENSG00000242485            5    MRPL20\nENSG00000160075 ensembl_havana gene ENSG00000160075           11     SSU72\nENSG00000078369 ensembl_havana gene ENSG00000078369           17      GNB1\nENSG00000187730 ensembl_havana gene ENSG00000187730            8     GABRD\n                   gene_source   gene_biotype             gene_search\nENSG00000187608 ensembl_havana protein_coding  ISG15; ENSG00000187608\nENSG00000131584 ensembl_havana protein_coding  ACAP3; ENSG00000131584\nENSG00000242485 ensembl_havana protein_coding MRPL20; ENSG00000242485\nENSG00000160075 ensembl_havana protein_coding  SSU72; ENSG00000160075\nENSG00000078369 ensembl_havana protein_coding   GNB1; ENSG00000078369\nENSG00000187730 ensembl_havana protein_coding  GABRD; ENSG00000187730\n                is_top_hvg    sigma.sq    tau.sq          phi    loglik runtime\nENSG00000187608       TRUE 0.014755187 0.3356806 9.119204e+00 -42272.79  23.241\nENSG00000131584      FALSE 0.001055874 0.2868728 6.900461e-02 -37864.96  20.942\nENSG00000242485      FALSE 0.001656123 0.4411004 1.497840e-02 -48094.96  20.343\nENSG00000160075      FALSE 0.003069247 0.4646316 1.716212e-03 -49391.53  19.676\nENSG00000078369      FALSE 0.007099322 0.7113184 3.456360e-07 -59584.20  23.359\nENSG00000187730      FALSE 0.007227928 0.4965150 1.795660e-04 -51122.73  20.104\n                     mean       var      spcov     prop_sv loglik_lm    LR_stat\nENSG00000187608 0.3141369 0.3505163 0.38668154 0.042105251 -42543.76 541.936437\nENSG00000131584 0.2860178 0.2879378 0.11360906 0.003667137 -37868.30   6.688740\nENSG00000242485 0.4788772 0.4427726 0.08498106 0.003740482 -48098.53   7.151903\nENSG00000160075 0.5193062 0.4677126 0.10668230 0.006562414 -49401.30  19.526820\nENSG00000078369 1.0635173 0.7184340 0.07922530 0.009881886 -59605.57  42.730757\nENSG00000187730 0.5727988 0.5037425 0.14842423 0.014348446 -51165.59  85.727756\n                rank         pval         padj\nENSG00000187608  167 0.000000e+00 0.000000e+00\nENSG00000131584 1953 3.528243e-02 4.669999e-02\nENSG00000242485 1910 2.798878e-02 3.788010e-02\nENSG00000160075 1282 5.751816e-05 1.159785e-04\nENSG00000078369  839 5.261797e-10 1.621185e-09\nENSG00000187730  548 0.000000e+00 0.000000e+00\n\n\n\n\nFeature Selection Comparisons\n\nEligible Options\nOur feature selection method should incorporate the batch variable to assess per-gene deviance and ranking differences when the model is applied with and without batch correction. To achieve this, we compared three different approaches from two packages, each based on distinct statistical models:\n\nscran\nThe scran package employs a mean-variance modeling framework to identify highly variable genes after normalizing the count matrix. We refer to this method as mean-variance model.\n\nmodelGeneVar(): Estimates per-gene variance by fitting a smooth trend to the mean-variance relationship, accounting for complex noise structures in the data.\nmodelGeneVarByPois(): Assumes that the mean-variance relationship primarily arises from technical noise following a Poisson distribution.\n\nscry\nThe scry package implements a deviance-based feature selection approach directly on the raw count matrix. Assumes that genes with no biologically meaningful expression pattern will fit a binomial distribution. We refer to this method as binomial deviance model.\n\ndevianceFeatureSelect(): The greater the per-gene deviance from this null model, the more likely the expression of said gene is biologically meaningful as a top feature.\n\n\n\n\nRequired package load\n\nlibrary(scry)\nlibrary(scran)\nlibrary(SingleCellExperiment)\nlibrary(SummarizedExperiment)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(ggrepel)\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(ggspavis)\nlibrary(ggbreak)\nlibrary(gt)\n\n\n\nSimilarly Identify SVGs as highly ranked features\nOur goal is to determine whether SVGs exhibit biased expression according of different batch variables. Therefore, the ideal feature selection model would similarly identify SVGs as highly ranked features.\n\nmv &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv$ensembl &lt;- rownames(mv)\nmv$rank &lt;- (nrow(mv)+1)-rank(mv$bio)\ntop_hvgs_mv &lt;- getTopHVGs(mv, n = 3000)\nmv$is_svg = factor(mv$ensembl %in% libd_svg$gene_id, \n                    levels=c(TRUE, FALSE), labels=c(\"SVGs\",\"not SVGs\"))\n\nmvpois &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmvpois$ensembl &lt;- rownames(mvpois)\nmvpois$rank &lt;- (nrow(mvpois) + 1) - rank(mvpois$bio)\ntop_hvgs_mvpois &lt;- getTopHVGs(mvpois, n = 3000)\nmvpois$is_svg = factor(mvpois$ensembl %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd_df &lt;- cbind.data.frame(\"gene\" = names(bd),\n            \"gene_name\" = rowData(spatialLIBD_spe)[names(bd),\"gene_name\"],\n            \"dev\"= bd,\n            \"rank\" = (length(bd)+1) - rank(bd))\nrownames(bd_df) &lt;- bd_df$gene\nbd_df$is_svg = factor(bd_df$gene %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd_batch &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), \n            fam = \"binomial\", batch = as.factor(spatialLIBD_spe$subject))\nbd_batch_df &lt;- cbind.data.frame(\"gene\" = rownames(spatialLIBD_spe),\n            \"gene_name\" = rowData(spatialLIBD_spe)$gene_name,\n            \"dev\"= bd_batch,\n            \"rank\" = (length(bd_batch)+1) - rank(bd_batch))\nrownames(bd_batch_df) &lt;- bd_batch_df$gene\nbd_batch_df$is_svg = factor(bd_batch_df$gene %in% libd_svg$gene_id, \n            levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nWe found that both modelGeneVar() and modelGeneVarByPoisson() approaches rank a considerable portion of the SVGs as some of the lowest features in the dataset.\nFigure 1A. Mean-variance model rank some nnSVG results as low ranked features\n\n\n\n\n\nIn contrast, all the SVGs are ranked highly with the binomial deviance model (devianceFeatureSelection()). We can also saw that including a subject-batch effect didnât dramatically change the rank of the SVGs.\nFigure 1B. Binomial deviance model better corresponds to nnSVG results\n\n\n\n\n\nWhatâs more, more than 90% of spatialLIBD SVGs are ranked in the top 3000 features by binomial deviance model with and without batch = subject.\n\nquantile(bd_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  200.6  400.2  606.8  830.4 1060.0 1316.8 1601.2 1913.6 2256.8 4077.0 \n\nquantile(bd_batch_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  199.2  401.2  606.8  830.4 1060.0 1316.6 1603.2 1917.8 2271.4 5903.0 \n\n\n\n\nIdentify batch biased genes\nUsing the modelGeneVar() function, we compared the rank with and without the batch = subject and we noticed that there are two groups of features ranked highly in one model but lowly in another model (top left group and bottom right group).\n\nmv_batch &lt;- modelGeneVar(logcounts(spatialLIBD_spe),\n                        block=as.factor(spatialLIBD_spe$subject))\nmv_batch$ensembl &lt;- rownames(mv_batch)\nmv_batch$rank &lt;- (nrow(mv_batch) + 1) - rank(mv_batch$bio)\n\nmv_rank_diff &lt;- left_join(\n    as.data.frame(mv[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    as.data.frame(mv_batch[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    by = c(\"ensembl\"), suffix=c(\"_default\",\"_subject\"))\nmv_rank_diff$gene_name &lt;- \n    rowData(spatialLIBD_spe)[mv_rank_diff$ensembl,\"gene_name\"]\n\ntop_3k_mv_batch &lt;- mv_rank_diff |&gt; \n    filter(rank_default &lt;= 3000 | rank_subject &lt;= 3000) |&gt;\n    mutate(batch_impact = rank_default &gt; 30000 | rank_subject &gt; 30000)\ntop_3k_mv_batch_genes &lt;- top_3k_mv_batch |&gt;\n    filter(batch_impact == TRUE)\n\nFig2A. Comparison of feature rank with and without subject batch\n\n\n\n\n\nThen, we looked at both groups of genes in red to see if they exhibit true subject-biased expression. Here we used RAPGEF5 as example.\n\nRAPGEF5_ensembl &lt;- top_3k_mv_batch_genes |&gt; filter(gene_name == \"RAPGEF5\") |&gt;\n    pull(ensembl)\nRAPGEF5_expr &lt;- logcounts(spatialLIBD_spe)[RAPGEF5_ensembl, , drop = FALSE]\n\nmv_expr_df &lt;- cbind.data.frame(\n    as.data.frame(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\",\n        \"layer_guess_reordered_short\")]),\n        avg.logcounts = as.vector(RAPGEF5_expr)) |&gt;\n    group_by(sample_id, subject,  layer_guess_reordered_short) |&gt;\n    summarise(avg.logcounts = mean(avg.logcounts, na.rm = TRUE), \n        .groups = \"drop\") |&gt;\n    filter(!is.na(layer_guess_reordered_short))\n\nFig2B. RAPGEF5 is not subject biased but correlate with WM\n\n\n\n\n\nThe plot illustrates the average expression of each sample across spatial domains alongside the spatial expression pattern of RAPGEF5. The graded expression across cortical layers suggests that RAPGEF5 is spatially variable, with substantial differences in expression between subjects. However, its spatial expression pattern does not indicate subject bias.\nThus, the changes in gene ranking when setting batch = subject in the modelGeneVar() function do not effectively identify potentially subject-biased genes.\n\n\nReproducibility in multiple runs\nWe set the seed to check the reproducibility of each approach.\n\nset.seed(123)\n\n\ndevianceFeatureSelection()\n\n\nbd1 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd2 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\n\nbd_repro &lt;- cbind(as.data.frame(bd1), as.data.frame(bd2)) |&gt;\n    mutate(abs_diff_dev_is_zero = (abs(bd1 - bd2) &lt; 1e-10))\n\n\nmodelGeneVar()\n\n\nmv1 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv2 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\n\nmv1$ensembl &lt;- rownames(mv1)\nmv1$rank &lt;- (nrow(mv1) + 1) - rank(mv1$bio)\ntop_hvgs_mv1 &lt;- getTopHVGs(mv1, n = 3000)\nmv1_df &lt;- as.data.frame(mv1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv2$ensembl &lt;- rownames(mv2)\nmv2$rank &lt;- (nrow(mv2) + 1) - rank(mv2$bio)\ntop_hvgs_mv2 &lt;- getTopHVGs(mv2, n = 3000)\nmv2_df &lt;- as.data.frame(mv2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_repro &lt;- left_join(mv1_df, mv2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmv_repro &lt;- mv_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\n\nmodelGeneVarByPoisson()\n\n\nmv_pois1 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmv_pois2 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\n\nmv_pois1$ensembl &lt;- rownames(mv_pois1)\nmv_pois1$rank &lt;- (nrow(mv_pois1) + 1) - rank(mv_pois1$bio)\ntop_hvgs_mv_pois1 &lt;- getTopHVGs(mv_pois1, n = 3000)\nmv_pois1_df &lt;- as.data.frame(mv_pois1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_pois2$ensembl &lt;- rownames(mv_pois2)\nmv_pois2$rank &lt;- (nrow(mv_pois2) + 1) - rank(mv_pois2$bio)\ntop_hvgs_mv_pois2 &lt;- getTopHVGs(mv_pois2, n = 3000)\nmv_pois2_df &lt;- as.data.frame(mv_pois2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmvpois_repro &lt;- left_join(mv_pois1_df, mv_pois2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmvpois_repro &lt;- mvpois_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\nWe observed that the modelGeneVar() function and devianceFeatureSelection() function both produce identical results with different runs, which ensures the reproducibility.\nFig3A. modelGeneVar() and modelGeneVarByPoisson() ensures reproducibility\n\n\n\n\n\nHowever, even with the same seed, the modelGeneVarByPoisson() function does not produce identical variance results, leading to rank fluctuations that can significantly impact the identification of highly variable genes (HVGs).\nFig3B. modelGeneVarByPoisson() causes variance fluctuations (rank changes)\n\n\n\n\n\nUsing the modelGeneVarByPoisson() function does identify some rank differences due to batch = subject but are inconsistent. Compared to modelGeneVar() function, the poisson assumptions for technical variation reduced the number of features that were highly ranked with batch = NULL and highly ranked with batch = subject.\n\nmv_pois_batch &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe),\n                    block = as.factor(spatialLIBD_spe$subject))\n\nmv_pois_batch$ensembl &lt;- rownames(mv_pois_batch)\nmv_pois_batch$rank &lt;- (nrow(mv_pois_batch) + 1) - rank(mv_pois_batch$bio)\n\nvar_diff_pois &lt;- mvpois_repro |&gt;\n    left_join(as.data.frame(mv_pois_batch[,c(\"ensembl\", \"rank\", \"bio\")]))\nvar_diff_pois$gene_name &lt;-\n    rowData(spatialLIBD_spe)[var_diff_pois$ensembl,\"gene_name\"]\n\nFig3C. Poisson assumption reduced the number of highly ranked features\n\n\n\n\n\nMoreover, introducing the batch variable to the modelGeneVarByPoisson() function resulted in inconsistencies that altered the top-ranked features, potentially including genes that are not subject-biased (e.g., COMMD6).\nFig3D. Introduction of batch to modelGeneVarByPoisson() causes inconsistencies\n\n\n\n\n\nTherefore, the inconsistencies in the modelGeneVarByPoisson() function may contribute to its failure in identifying subject-biased genes.\n\n\nAdditional Property: match DLPFC cortical layer\nA separate but related property of the ideal feature selection model would be to generate a list of top features that are consistent with known DLPFC layer markers and comprise markers of all layer domains. We used the recently published list of DLPFC layer markers to characterize the top 3000 features of the mean-variance and binomial deviance models.\n\ndlpfc_layer_marker &lt;- read.csv(\"data/TableS8_filtered-layer-markers.csv\",\n    row.names = 1, check.names = FALSE)\n\n# Binomial deviance model\ntop_bd_3k &lt;- bd_df |&gt; filter(rank &lt;= 3000)\ndlpfc_bd_is &lt;- semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_bd_3k, by=c(\"ensembl\"=\"gene\"))\ndlpfc_bd_not = anti_join(\n    top_bd_3k |&gt; filter(gene %in% setdiff(top_bd_3k$gene, dlpfc_bd_is$ensembl)),\n    dlpfc_bd_is, by = c(\"gene\" = \"ensembl\")) |&gt;\n    mutate(domain_simple = \"none\") |&gt; \n    rename(ensembl = gene, gene = gene_name) |&gt;\n    select(ensembl, gene, domain_simple) # not included in DLPFC marker table\ndlpfc_bd_3k &lt;- rbind(dlpfc_bd_is, dlpfc_bd_not) |&gt;\n    mutate(domain_simple=factor(domain_simple,\n        levels=c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model\ntop_3k_mv &lt;- as.data.frame(mv[top_hvgs_mv,]) |&gt;\n    select(ensembl)\ndlpfc_mv_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mv, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mv_not = anti_join(\n    filter(top_3k_mv, \n        ensembl %in% setdiff(top_hvgs_mv, dlpfc_mv_is$ensembl)), \n    dlpfc_mv_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mv_3k = rbind(dlpfc_mv_is, dlpfc_mv_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model - Pois\ntop_3k_mvpois &lt;- as.data.frame(mvpois[top_hvgs_mvpois,]) |&gt;\n    select(ensembl)\ndlpfc_mvpois_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mvpois, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mvpois_not = anti_join(\n    filter(top_3k_mvpois, \n        ensembl %in% setdiff(top_hvgs_mvpois, dlpfc_mvpois_is$ensembl)), \n    dlpfc_mvpois_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mvpois_3k = rbind(dlpfc_mvpois_is, dlpfc_mvpois_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\nThese results further supported the selection of the binomial deviance model, as the 3000 most highly ranked features represented significant markers for all DLPFC cortical layers. In contrast, the 3000 most highly ranked features from the mean-variance model were overwhelmingly L1 and white matter (WM) markers.\nFig4. Binomial deviance model better corresponds to known DLPFC layer markers\n\n\n\n\n\n\n\n\nSummary\nTable1. Summary of the evaluation on each approach\n\n\n\n\n\n\n  \n    \n      Package\n      Function\n      SVGs as Highly Ranked Features\n      Batch Biased Features\n      Reproducibility\n      DLPFC layer marker\n    \n  \n  \n    scry\ndevianceFeatureSelection()\nâ\nâ\nâ\nâ\n    scran\nmodelGeneVar()\nâ\nâ\nâ\nâ\n    scran\nmodelGeneVarByPoisson()\nâ\nâ\nâ\nâ\n  \n  \n  \n\n\n\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] gt_0.11.1                   ggbreak_0.1.4              \n [3] ggspavis_1.12.0             lubridate_1.9.4            \n [5] forcats_1.0.0               stringr_1.5.1              \n [7] dplyr_1.1.4                 purrr_1.0.4                \n [9] readr_2.1.5                 tidyr_1.3.1                \n[11] tidyverse_2.0.0             tibble_3.2.1               \n[13] ggrepel_0.9.6               gridExtra_2.3              \n[15] ggplot2_3.5.1               scran_1.34.0               \n[17] scuttle_1.16.0              scry_1.18.0                \n[19] spatialLIBD_1.18.0          SpatialExperiment_1.16.0   \n[21] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0\n[23] Biobase_2.66.0              GenomicRanges_1.58.0       \n[25] GenomeInfoDb_1.42.3         IRanges_2.40.1             \n[27] S4Vectors_0.44.0            BiocGenerics_0.52.0        \n[29] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n\nloaded via a namespace (and not attached):\n  [1] later_1.4.1              BiocIO_1.16.0            ggplotify_0.1.2         \n  [4] bitops_1.0-9             filelock_1.0.3           fields_16.3             \n  [7] XML_3.99-0.18            lifecycle_1.0.4          edgeR_4.4.2             \n [10] doParallel_1.0.17        lattice_0.22-6           magrittr_2.0.3          \n [13] limma_3.62.2             plotly_4.10.4            sass_0.4.9              \n [16] rmarkdown_2.29           jquerylib_0.1.4          yaml_2.3.10             \n [19] metapod_1.14.0           httpuv_1.6.15            ggside_0.3.1            \n [22] spam_2.11-1              sessioninfo_1.2.3        cowplot_1.1.3           \n [25] DBI_1.2.3                RColorBrewer_1.1-3       golem_0.5.1             \n [28] maps_3.4.2.1             abind_1.4-8              zlibbioc_1.52.0         \n [31] RCurl_1.98-1.16          yulab.utils_0.2.0        rappdirs_0.3.3          \n [34] GenomeInfoDbData_1.2.13  irlba_2.3.5.1            dqrng_0.4.1             \n [37] codetools_0.2-20         DelayedArray_0.32.0      xml2_1.3.7              \n [40] DT_0.33                  tidyselect_1.2.1         aplot_0.2.5             \n [43] farver_2.1.2             UCSC.utils_1.2.0         ScaledMatrix_1.14.0     \n [46] viridis_0.6.5            shinyWidgets_0.9.0       BiocFileCache_2.14.0    \n [49] GenomicAlignments_1.42.0 jsonlite_1.9.1           BiocNeighbors_2.0.1     \n [52] scater_1.34.0            iterators_1.0.14         foreach_1.5.2           \n [55] tools_4.4.2              Rcpp_1.0.14              glue_1.8.0              \n [58] SparseArray_1.6.2        xfun_0.51                withr_3.0.2             \n [61] BiocManager_1.30.25      fastmap_1.2.0            bluster_1.16.0          \n [64] digest_0.6.37            rsvd_1.0.5               gridGraphics_0.5-1      \n [67] timechange_0.3.0         R6_2.6.1                 mime_0.12               \n [70] colorspace_2.1-1         RSQLite_2.3.9            config_0.3.2            \n [73] generics_0.1.3           data.table_1.17.0        rtracklayer_1.66.0      \n [76] httr_1.4.7               htmlwidgets_1.6.4        S4Arrays_1.6.0          \n [79] pkgconfig_2.0.3          gtable_0.3.6             blob_1.2.4              \n [82] XVector_0.46.0           htmltools_0.5.8.1        dotCall64_1.2           \n [85] scales_1.3.0             png_0.1-8                attempt_0.3.1           \n [88] ggfun_0.1.8              knitr_1.49               rstudioapi_0.17.1       \n [91] tzdb_0.4.0               rjson_0.2.23             curl_6.2.1              \n [94] cachem_1.1.0             BiocVersion_3.20.0       parallel_4.4.2          \n [97] vipor_0.4.7              AnnotationDbi_1.68.0     restfulr_0.0.15         \n[100] pillar_1.10.1            grid_4.4.2               vctrs_0.6.5             \n[103] promises_1.3.2           BiocSingular_1.22.0      dbplyr_2.5.0            \n[106] beachmat_2.22.0          xtable_1.8-4             cluster_2.1.8           \n[109] beeswarm_0.4.0           paletteer_1.6.0          evaluate_1.0.3          \n[112] magick_2.8.5             cli_3.6.4                locfit_1.5-9.11         \n[115] compiler_4.4.2           Rsamtools_2.22.0         rlang_1.1.5             \n[118] crayon_1.5.3             labeling_0.4.3           rematch2_2.1.2          \n[121] fs_1.6.5                 ggbeeswarm_0.7.2         stringi_1.8.4           \n[124] viridisLite_0.4.2        BiocParallel_1.40.0      munsell_0.5.1           \n[127] Biostrings_2.74.1        lazyeval_0.2.2           Matrix_1.7-2            \n[130] ExperimentHub_2.14.0     benchmarkme_1.0.8        patchwork_1.3.0         \n[133] hms_1.1.3                bit64_4.6.0-1            KEGGREST_1.46.0         \n[136] statmod_1.5.0            shiny_1.10.0             AnnotationHub_3.14.0    \n[139] igraph_2.1.4             memoise_2.0.1            bslib_0.9.0             \n[142] benchmarkmeData_1.0.4    bit_4.6.0"
  }
]