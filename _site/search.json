[
  {
    "objectID": "featureSelection.html",
    "href": "featureSelection.html",
    "title": "BatchSVG_analysis",
    "section": "",
    "text": "Introduction\nThe BatchSVG package implements feature selection using the binomial deviance model. In this vignette, we provide a detailed justification for selecting the binomial deviance model as the most appropriate approach for our method. Through comprehensive comparisons with alternative feature selection models, we demonstrate its advantages in ranking spatially variable genes (SVGs), ensuring reproducibility, and mitigating batch effects.\n\n\nSpatialLIBD Dataset\nWe chose the dorsolateral prefrontal cortex (DLPFC) dataset available through the spatialLIBD package to help determine the appropriate feature selection method.\n\nlibrary(spatialLIBD)\nspatialLIBD_spe &lt;- fetch_data(type = \"spe\")\ntable(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\")])\n\n         subject\nsample_id Br5292 Br5595 Br8100\n   151507   4226      0      0\n   151508   4384      0      0\n   151509   4789      0      0\n   151510   4634      0      0\n   151669      0   3661      0\n   151670      0   3498      0\n   151671      0   4110      0\n   151672      0   4015      0\n   151673      0      0   3639\n   151674      0      0   3673\n   151675      0      0   3592\n   151676      0      0   3460\n\n\nWe ran the nnSVG model on the spatialLIBD data to identify SVGs.\n\nlibd_svg &lt;- read.csv(\"data/libd-all_nnSVG_p-05-features-df.csv\", \n    row.names = 1, check.names = FALSE)\nhead(libd_svg)\n\n                        source type         gene_id gene_version gene_name\nENSG00000187608 ensembl_havana gene ENSG00000187608            8     ISG15\nENSG00000131584 ensembl_havana gene ENSG00000131584           18     ACAP3\nENSG00000242485 ensembl_havana gene ENSG00000242485            5    MRPL20\nENSG00000160075 ensembl_havana gene ENSG00000160075           11     SSU72\nENSG00000078369 ensembl_havana gene ENSG00000078369           17      GNB1\nENSG00000187730 ensembl_havana gene ENSG00000187730            8     GABRD\n                   gene_source   gene_biotype             gene_search\nENSG00000187608 ensembl_havana protein_coding  ISG15; ENSG00000187608\nENSG00000131584 ensembl_havana protein_coding  ACAP3; ENSG00000131584\nENSG00000242485 ensembl_havana protein_coding MRPL20; ENSG00000242485\nENSG00000160075 ensembl_havana protein_coding  SSU72; ENSG00000160075\nENSG00000078369 ensembl_havana protein_coding   GNB1; ENSG00000078369\nENSG00000187730 ensembl_havana protein_coding  GABRD; ENSG00000187730\n                is_top_hvg    sigma.sq    tau.sq          phi    loglik runtime\nENSG00000187608       TRUE 0.014755187 0.3356806 9.119204e+00 -42272.79  23.241\nENSG00000131584      FALSE 0.001055874 0.2868728 6.900461e-02 -37864.96  20.942\nENSG00000242485      FALSE 0.001656123 0.4411004 1.497840e-02 -48094.96  20.343\nENSG00000160075      FALSE 0.003069247 0.4646316 1.716212e-03 -49391.53  19.676\nENSG00000078369      FALSE 0.007099322 0.7113184 3.456360e-07 -59584.20  23.359\nENSG00000187730      FALSE 0.007227928 0.4965150 1.795660e-04 -51122.73  20.104\n                     mean       var      spcov     prop_sv loglik_lm    LR_stat\nENSG00000187608 0.3141369 0.3505163 0.38668154 0.042105251 -42543.76 541.936437\nENSG00000131584 0.2860178 0.2879378 0.11360906 0.003667137 -37868.30   6.688740\nENSG00000242485 0.4788772 0.4427726 0.08498106 0.003740482 -48098.53   7.151903\nENSG00000160075 0.5193062 0.4677126 0.10668230 0.006562414 -49401.30  19.526820\nENSG00000078369 1.0635173 0.7184340 0.07922530 0.009881886 -59605.57  42.730757\nENSG00000187730 0.5727988 0.5037425 0.14842423 0.014348446 -51165.59  85.727756\n                rank         pval         padj\nENSG00000187608  167 0.000000e+00 0.000000e+00\nENSG00000131584 1953 3.528243e-02 4.669999e-02\nENSG00000242485 1910 2.798878e-02 3.788010e-02\nENSG00000160075 1282 5.751816e-05 1.159785e-04\nENSG00000078369  839 5.261797e-10 1.621185e-09\nENSG00000187730  548 0.000000e+00 0.000000e+00\n\n\n\n\nFeature Selection Comparisons\n\nEligible Options\nOur feature selection method should incorporate the batch variable to assess per-gene deviance and ranking differences when the model is applied with and without batch correction. To achieve this, we compared three different approaches from two packages, each based on distinct statistical models:\n\nscran\nThe scran package employs a mean-variance modeling framework to identify highly variable genes after normalizing the count matrix. We refer to this method as mean-variance model.\n\nmodelGeneVar(): Estimates per-gene variance by fitting a smooth trend to the mean-variance relationship, accounting for complex noise structures in the data.\nmodelGeneVarByPois(): Assumes that the mean-variance relationship primarily arises from technical noise following a Poisson distribution.\n\nscry\nThe scry package implements a deviance-based feature selection approach directly on the raw count matrix. Assumes that genes with no biologically meaningful expression pattern will fit a binomial distribution. We refer to this method as binomial deviance model.\n\ndevianceFeatureSelect(): The greater the per-gene deviance from this null model, the more likely the expression of said gene is biologically meaningful as a top feature.\n\n\n\n\nRequired package load\n\nlibrary(scry)\nlibrary(scran)\nlibrary(SingleCellExperiment)\nlibrary(SummarizedExperiment)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(ggrepel)\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(ggspavis)\nlibrary(ggbreak)\nlibrary(gt)\n\n\n\nSimilarly Identify SVGs as highly ranked features\nOur goal is to determine whether SVGs exhibit biased expression according of different batch variables. Therefore, the ideal feature selection model would similarly identify SVGs as highly ranked features.\n\nmv &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv$ensembl &lt;- rownames(mv)\nmv$rank &lt;- (nrow(mv)+1)-rank(mv$bio)\ntop_hvgs_mv &lt;- getTopHVGs(mv, n = 3000)\nmv$is_svg = factor(mv$ensembl %in% libd_svg$gene_id, \n                    levels=c(TRUE, FALSE), labels=c(\"SVGs\",\"not SVGs\"))\n\nmvpois &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmvpois$ensembl &lt;- rownames(mvpois)\nmvpois$rank &lt;- (nrow(mvpois) + 1) - rank(mvpois$bio)\ntop_hvgs_mvpois &lt;- getTopHVGs(mvpois, n = 3000)\nmvpois$is_svg = factor(mvpois$ensembl %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd_df &lt;- cbind.data.frame(\"gene\" = names(bd),\n            \"gene_name\" = rowData(spatialLIBD_spe)[names(bd),\"gene_name\"],\n            \"dev\"= bd,\n            \"rank\" = (length(bd)+1) - rank(bd))\nrownames(bd_df) &lt;- bd_df$gene\nbd_df$is_svg = factor(bd_df$gene %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd_batch &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), \n            fam = \"binomial\", batch = as.factor(spatialLIBD_spe$subject))\nbd_batch_df &lt;- cbind.data.frame(\"gene\" = rownames(spatialLIBD_spe),\n            \"gene_name\" = rowData(spatialLIBD_spe)$gene_name,\n            \"dev\"= bd_batch,\n            \"rank\" = (length(bd_batch)+1) - rank(bd_batch))\nrownames(bd_batch_df) &lt;- bd_batch_df$gene\nbd_batch_df$is_svg = factor(bd_batch_df$gene %in% libd_svg$gene_id, \n            levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nWe found that both modelGeneVar() and modelGeneVarByPoisson() approaches rank a considerable portion of the SVGs as some of the lowest features in the dataset.\nFigure 1A. Mean-variance model rank some nnSVG results as low ranked features\n\n\n\n\n\nIn contrast, all the SVGs are ranked highly with the binomial deviance model (devianceFeatureSelection()). We can also saw that including a subject-batch effect didn’t dramatically change the rank of the SVGs.\nFigure 1B. Binomial deviance model better corresponds to nnSVG results\n\n\n\n\n\nWhat’s more, more than 90% of spatialLIBD SVGs are ranked in the top 3000 features by binomial deviance model with and without batch = subject.\n\nquantile(bd_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  200.6  400.2  606.8  830.4 1060.0 1316.8 1601.2 1913.6 2256.8 4077.0 \n\nquantile(bd_batch_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  199.2  401.2  606.8  830.4 1060.0 1316.6 1603.2 1917.8 2271.4 5903.0 \n\n\n\n\nIdentify batch biased genes\nUsing the modelGeneVar() function, we compared the rank with and without the batch = subject and we noticed that there are two groups of features ranked highly in one model but lowly in another model (top left group and bottom right group).\n\nmv_batch &lt;- modelGeneVar(logcounts(spatialLIBD_spe),\n                        block=as.factor(spatialLIBD_spe$subject))\nmv_batch$ensembl &lt;- rownames(mv_batch)\nmv_batch$rank &lt;- (nrow(mv_batch) + 1) - rank(mv_batch$bio)\n\nmv_rank_diff &lt;- left_join(\n    as.data.frame(mv[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    as.data.frame(mv_batch[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    by = c(\"ensembl\"), suffix=c(\"_default\",\"_subject\"))\nmv_rank_diff$gene_name &lt;- \n    rowData(spatialLIBD_spe)[mv_rank_diff$ensembl,\"gene_name\"]\n\ntop_3k_mv_batch &lt;- mv_rank_diff |&gt; \n    filter(rank_default &lt;= 3000 | rank_subject &lt;= 3000) |&gt;\n    mutate(batch_impact = rank_default &gt; 30000 | rank_subject &gt; 30000)\ntop_3k_mv_batch_genes &lt;- top_3k_mv_batch |&gt;\n    filter(batch_impact == TRUE)\n\nFig2A. Comparison of feature rank with and without subject batch\n\n\n\n\n\nThen, we looked at both groups of genes in red to see if they exhibit true subject-biased expression. Here we used RAPGEF5 as example.\n\nRAPGEF5_ensembl &lt;- top_3k_mv_batch_genes |&gt; filter(gene_name == \"RAPGEF5\") |&gt;\n    pull(ensembl)\nRAPGEF5_expr &lt;- logcounts(spatialLIBD_spe)[RAPGEF5_ensembl, , drop = FALSE]\n\nmv_expr_df &lt;- cbind.data.frame(\n    as.data.frame(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\",\n        \"layer_guess_reordered_short\")]),\n        avg.logcounts = as.vector(RAPGEF5_expr)) |&gt;\n    group_by(sample_id, subject,  layer_guess_reordered_short) |&gt;\n    summarise(avg.logcounts = mean(avg.logcounts, na.rm = TRUE), \n        .groups = \"drop\") |&gt;\n    filter(!is.na(layer_guess_reordered_short))\n\nFig2B. RAPGEF5 is not subject biased but correlate with WM\n\n\n\n\n\nThe plot illustrates the average expression of each sample across spatial domains alongside the spatial expression pattern of RAPGEF5. The graded expression across cortical layers suggests that RAPGEF5 is spatially variable, with substantial differences in expression between subjects. However, its spatial expression pattern does not indicate subject bias.\nThus, the changes in gene ranking when setting batch = subject in the modelGeneVar() function do not effectively identify potentially subject-biased genes.\n\n\nReproducibility in multiple runs\nWe set the seed to check the reproducibility of each approach.\n\nset.seed(123)\n\n\ndevianceFeatureSelection()\n\n\nbd1 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd2 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\n\nbd_repro &lt;- cbind(as.data.frame(bd1), as.data.frame(bd2)) |&gt;\n    mutate(abs_diff_dev_is_zero = (abs(bd1 - bd2) &lt; 1e-10))\n\n\nmodelGeneVar()\n\n\nmv1 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv2 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\n\nmv1$ensembl &lt;- rownames(mv1)\nmv1$rank &lt;- (nrow(mv1) + 1) - rank(mv1$bio)\ntop_hvgs_mv1 &lt;- getTopHVGs(mv1, n = 3000)\nmv1_df &lt;- as.data.frame(mv1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv2$ensembl &lt;- rownames(mv2)\nmv2$rank &lt;- (nrow(mv2) + 1) - rank(mv2$bio)\ntop_hvgs_mv2 &lt;- getTopHVGs(mv2, n = 3000)\nmv2_df &lt;- as.data.frame(mv2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_repro &lt;- left_join(mv1_df, mv2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmv_repro &lt;- mv_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\n\nmodelGeneVarByPoisson()\n\n\nmv_pois1 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmv_pois2 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\n\nmv_pois1$ensembl &lt;- rownames(mv_pois1)\nmv_pois1$rank &lt;- (nrow(mv_pois1) + 1) - rank(mv_pois1$bio)\ntop_hvgs_mv_pois1 &lt;- getTopHVGs(mv_pois1, n = 3000)\nmv_pois1_df &lt;- as.data.frame(mv_pois1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_pois2$ensembl &lt;- rownames(mv_pois2)\nmv_pois2$rank &lt;- (nrow(mv_pois2) + 1) - rank(mv_pois2$bio)\ntop_hvgs_mv_pois2 &lt;- getTopHVGs(mv_pois2, n = 3000)\nmv_pois2_df &lt;- as.data.frame(mv_pois2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmvpois_repro &lt;- left_join(mv_pois1_df, mv_pois2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmvpois_repro &lt;- mvpois_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\nWe observed that the modelGeneVar() function and devianceFeatureSelection() function both produce identical results with different runs, which ensures the reproducibility.\nFig3A. modelGeneVar() and modelGeneVarByPoisson() ensures reproducibility\n\n\n\n\n\nHowever, even with the same seed, the modelGeneVarByPoisson() function does not produce identical variance results, leading to rank fluctuations that can significantly impact the identification of highly variable genes (HVGs).\nFig3B. modelGeneVarByPoisson() causes variance fluctuations (rank changes)\n\n\n\n\n\nUsing the modelGeneVarByPoisson() function does identify some rank differences due to batch = subject but are inconsistent. Compared to modelGeneVar() function, the poisson assumptions for technical variation reduced the number of features that were highly ranked with batch = NULL and highly ranked with batch = subject.\n\nmv_pois_batch &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe),\n                    block = as.factor(spatialLIBD_spe$subject))\n\nmv_pois_batch$ensembl &lt;- rownames(mv_pois_batch)\nmv_pois_batch$rank &lt;- (nrow(mv_pois_batch) + 1) - rank(mv_pois_batch$bio)\n\nvar_diff_pois &lt;- mvpois_repro |&gt;\n    left_join(as.data.frame(mv_pois_batch[,c(\"ensembl\", \"rank\", \"bio\")]))\nvar_diff_pois$gene_name &lt;-\n    rowData(spatialLIBD_spe)[var_diff_pois$ensembl,\"gene_name\"]\n\nFig3C. Poisson assumption reduced the number of highly ranked features\n\n\n\n\n\nMoreover, introducing the batch variable to the modelGeneVarByPoisson() function resulted in inconsistencies that altered the top-ranked features, potentially including genes that are not subject-biased (e.g., COMMD6).\nFig3D. Introduction of batch to modelGeneVarByPoisson() causes inconsistencies\n\n\n\n\n\nTherefore, the inconsistencies in the modelGeneVarByPoisson() function may contribute to its failure in identifying subject-biased genes.\n\n\nAdditional Property: match DLPFC cortical layer\nA separate but related property of the ideal feature selection model would be to generate a list of top features that are consistent with known DLPFC layer markers and comprise markers of all layer domains. We used the recently published list of DLPFC layer markers to characterize the top 3000 features of the mean-variance and binomial deviance models.\n\ndlpfc_layer_marker &lt;- read.csv(\"data/TableS8_filtered-layer-markers.csv\",\n    row.names = 1, check.names = FALSE)\n\n# Binomial deviance model\ntop_bd_3k &lt;- bd_df |&gt; filter(rank &lt;= 3000)\ndlpfc_bd_is &lt;- semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_bd_3k, by=c(\"ensembl\"=\"gene\"))\ndlpfc_bd_not = anti_join(\n    top_bd_3k |&gt; filter(gene %in% setdiff(top_bd_3k$gene, dlpfc_bd_is$ensembl)),\n    dlpfc_bd_is, by = c(\"gene\" = \"ensembl\")) |&gt;\n    mutate(domain_simple = \"none\") |&gt; \n    rename(ensembl = gene, gene = gene_name) |&gt;\n    select(ensembl, gene, domain_simple) # not included in DLPFC marker table\ndlpfc_bd_3k &lt;- rbind(dlpfc_bd_is, dlpfc_bd_not) |&gt;\n    mutate(domain_simple=factor(domain_simple,\n        levels=c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model\ntop_3k_mv &lt;- as.data.frame(mv[top_hvgs_mv,]) |&gt;\n    select(ensembl)\ndlpfc_mv_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mv, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mv_not = anti_join(\n    filter(top_3k_mv, \n        ensembl %in% setdiff(top_hvgs_mv, dlpfc_mv_is$ensembl)), \n    dlpfc_mv_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mv_3k = rbind(dlpfc_mv_is, dlpfc_mv_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model - Pois\ntop_3k_mvpois &lt;- as.data.frame(mvpois[top_hvgs_mvpois,]) |&gt;\n    select(ensembl)\ndlpfc_mvpois_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mvpois, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mvpois_not = anti_join(\n    filter(top_3k_mvpois, \n        ensembl %in% setdiff(top_hvgs_mvpois, dlpfc_mvpois_is$ensembl)), \n    dlpfc_mvpois_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mvpois_3k = rbind(dlpfc_mvpois_is, dlpfc_mvpois_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\nThese results further supported the selection of the binomial deviance model, as the 3000 most highly ranked features represented significant markers for all DLPFC cortical layers. In contrast, the 3000 most highly ranked features from the mean-variance model were overwhelmingly L1 and white matter (WM) markers.\nFig4. Binomial deviance model better corresponds to known DLPFC layer markers\n\n\n\n\n\n\n\n\nSummary\nTable1. Summary of the evaluation on each approach\n\n\n\n\n\n\n  \n    \n      Package\n      Function\n      SVGs as Highly Ranked Features\n      Batch Biased Features\n      Reproducibility\n      DLPFC layer marker\n    \n  \n  \n    scry\ndevianceFeatureSelection()\n✔\n✔\n✔\n✔\n    scran\nmodelGeneVar()\n✘\n✘\n✔\n✘\n    scran\nmodelGeneVarByPoisson()\n✘\n✔\n✘\n✘\n  \n  \n  \n\n\n\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] gt_0.11.1                   ggbreak_0.1.4              \n [3] ggspavis_1.12.0             lubridate_1.9.4            \n [5] forcats_1.0.0               stringr_1.5.1              \n [7] dplyr_1.1.4                 purrr_1.0.4                \n [9] readr_2.1.5                 tidyr_1.3.1                \n[11] tidyverse_2.0.0             tibble_3.2.1               \n[13] ggrepel_0.9.6               gridExtra_2.3              \n[15] ggplot2_3.5.1               scran_1.34.0               \n[17] scuttle_1.16.0              scry_1.18.0                \n[19] spatialLIBD_1.18.0          SpatialExperiment_1.16.0   \n[21] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0\n[23] Biobase_2.66.0              GenomicRanges_1.58.0       \n[25] GenomeInfoDb_1.42.3         IRanges_2.40.1             \n[27] S4Vectors_0.44.0            BiocGenerics_0.52.0        \n[29] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n\nloaded via a namespace (and not attached):\n  [1] later_1.4.1              BiocIO_1.16.0            ggplotify_0.1.2         \n  [4] bitops_1.0-9             filelock_1.0.3           fields_16.3             \n  [7] XML_3.99-0.18            lifecycle_1.0.4          edgeR_4.4.2             \n [10] doParallel_1.0.17        lattice_0.22-6           magrittr_2.0.3          \n [13] limma_3.62.2             plotly_4.10.4            sass_0.4.9              \n [16] rmarkdown_2.29           jquerylib_0.1.4          yaml_2.3.10             \n [19] metapod_1.14.0           httpuv_1.6.15            ggside_0.3.1            \n [22] spam_2.11-1              sessioninfo_1.2.3        cowplot_1.1.3           \n [25] DBI_1.2.3                RColorBrewer_1.1-3       golem_0.5.1             \n [28] maps_3.4.2.1             abind_1.4-8              zlibbioc_1.52.0         \n [31] RCurl_1.98-1.16          yulab.utils_0.2.0        rappdirs_0.3.3          \n [34] GenomeInfoDbData_1.2.13  irlba_2.3.5.1            dqrng_0.4.1             \n [37] codetools_0.2-20         DelayedArray_0.32.0      xml2_1.3.7              \n [40] DT_0.33                  tidyselect_1.2.1         aplot_0.2.5             \n [43] farver_2.1.2             UCSC.utils_1.2.0         ScaledMatrix_1.14.0     \n [46] viridis_0.6.5            shinyWidgets_0.9.0       BiocFileCache_2.14.0    \n [49] GenomicAlignments_1.42.0 jsonlite_1.9.1           BiocNeighbors_2.0.1     \n [52] scater_1.34.0            iterators_1.0.14         foreach_1.5.2           \n [55] tools_4.4.2              Rcpp_1.0.14              glue_1.8.0              \n [58] SparseArray_1.6.2        xfun_0.51                withr_3.0.2             \n [61] BiocManager_1.30.25      fastmap_1.2.0            bluster_1.16.0          \n [64] digest_0.6.37            rsvd_1.0.5               gridGraphics_0.5-1      \n [67] timechange_0.3.0         R6_2.6.1                 mime_0.12               \n [70] colorspace_2.1-1         RSQLite_2.3.9            config_0.3.2            \n [73] generics_0.1.3           data.table_1.17.0        rtracklayer_1.66.0      \n [76] httr_1.4.7               htmlwidgets_1.6.4        S4Arrays_1.6.0          \n [79] pkgconfig_2.0.3          gtable_0.3.6             blob_1.2.4              \n [82] XVector_0.46.0           htmltools_0.5.8.1        dotCall64_1.2           \n [85] scales_1.3.0             png_0.1-8                attempt_0.3.1           \n [88] ggfun_0.1.8              knitr_1.49               rstudioapi_0.17.1       \n [91] tzdb_0.4.0               rjson_0.2.23             curl_6.2.1              \n [94] cachem_1.1.0             BiocVersion_3.20.0       parallel_4.4.2          \n [97] vipor_0.4.7              AnnotationDbi_1.68.0     restfulr_0.0.15         \n[100] pillar_1.10.1            grid_4.4.2               vctrs_0.6.5             \n[103] promises_1.3.2           BiocSingular_1.22.0      dbplyr_2.5.0            \n[106] beachmat_2.22.0          xtable_1.8-4             cluster_2.1.8           \n[109] beeswarm_0.4.0           paletteer_1.6.0          evaluate_1.0.3          \n[112] magick_2.8.5             cli_3.6.4                locfit_1.5-9.11         \n[115] compiler_4.4.2           Rsamtools_2.22.0         rlang_1.1.5             \n[118] crayon_1.5.3             labeling_0.4.3           rematch2_2.1.2          \n[121] fs_1.6.5                 ggbeeswarm_0.7.2         stringi_1.8.4           \n[124] viridisLite_0.4.2        BiocParallel_1.40.0      munsell_0.5.1           \n[127] Biostrings_2.74.1        lazyeval_0.2.2           Matrix_1.7-2            \n[130] ExperimentHub_2.14.0     benchmarkme_1.0.8        patchwork_1.3.0         \n[133] hms_1.1.3                bit64_4.6.0-1            KEGGREST_1.46.0         \n[136] statmod_1.5.0            shiny_1.10.0             AnnotationHub_3.14.0    \n[139] igraph_2.1.4             memoise_2.0.1            bslib_0.9.0             \n[142] benchmarkmeData_1.0.4    bit_4.6.0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]