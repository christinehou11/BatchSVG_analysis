[
  {
    "objectID": "dataDrivenThreshold.html",
    "href": "dataDrivenThreshold.html",
    "title": "dataDrivenThreshold",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "spatialLIBD_spe.html",
    "href": "spatialLIBD_spe.html",
    "title": "spatialLIBD Dataset",
    "section": "",
    "text": "Introduction\nIn this section, we included biased feature identification analysis using our developed method to show how BatchSVG helps to detect and visualize the biased features in SVGs. We used the spatially-resolved transcriptomics (SRT) dataset from the spatialLIBD package.\n\nlibrary(spatialLIBD)\nlibrary(nnSVG)\nlibrary(scater)\nlibrary(here)\nlibrary(PRECAST)\nlibrary(Seurat)\nlibrary(BatchSVG)\nlibrary(ggspavis)\nlibrary(gridExtra)\n\nThe spatialLIBD dataset was collected from the brain region of dorsolateral prefontal cortex (dlPFC) and was also sequenced with 10X Visium. This dataset has 3 subjects and 4 samples from each subject. Because there was no slide metadata available, we investigated whether batch = subject influenced the top features.\n\n# load example dataset from spatialLIBD package\n# see '?spatialLIBD' for more details\nspatialLIBD_spe &lt;- fetch_data(type = \"spe\")\n\ndim(spatialLIBD_spe)\n\n[1] 33538 47681\n\ntable(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\")])\n\n         subject\nsample_id Br5292 Br5595 Br8100\n   151507   4226      0      0\n   151508   4384      0      0\n   151509   4789      0      0\n   151510   4634      0      0\n   151669      0   3661      0\n   151670      0   3498      0\n   151671      0   4110      0\n   151672      0   4015      0\n   151673      0      0   3639\n   151674      0      0   3673\n   151675      0      0   3592\n   151676      0      0   3460\n\n\n\n\nSelect Spatially Variable Genes\nWe used the spatially variable genes set generated. The result was generated from nnSVG package.\n\nPreprocessing\n\n# see '?nnSVG' for more details\n\n# keep only spots over tissue\nspatialLIBD_spe_1 &lt;- spatialLIBD_spe[, colData(spatialLIBD_spe)$in_tissue == 1]\ndim(spatialLIBD_spe_1) # 33538 47681\n\n[1] 33538 47681\n\n# filter any new zeros created\n# remove genes with zero expression\nix_zero_genes &lt;- rowSums(counts(spatialLIBD_spe_1)) == 0\ntable(ix_zero_genes)\n\nix_zero_genes\nFALSE  TRUE \n25615  7923 \n\nif (sum(ix_zero_genes) &gt; 0) {\n  spatialLIBD_spe_2 &lt;- spatialLIBD_spe_1[!ix_zero_genes, ]\n}\ndim(spatialLIBD_spe_2) # 25615 47681\n\n[1] 25615 47681\n\n# remove spots with zero expression\nix_zero_spots &lt;- colSums(counts(spatialLIBD_spe_2)) == 0\ntable(ix_zero_spots)\n\nix_zero_spots\nFALSE \n47681 \n\nif (sum(ix_zero_spots) &gt; 0) {\n  spatialLIBD_spe_3 &lt;- spatialLIBD_spe_2[, !ix_zero_spots]\n}\n# ix_zero_spots\n# FALSE \n# 47681\nspatialLIBD_spe_filtered &lt;- spatialLIBD_spe_2\ndim(spatialLIBD_spe_filtered)\n\n[1] 25615 47681\n\nsample_ids &lt;- levels(factor(colData(spatialLIBD_spe_filtered)$sample_id))\nsample_ids\n\n [1] \"151507\" \"151508\" \"151509\" \"151510\" \"151669\" \"151670\" \"151671\" \"151672\"\n [9] \"151673\" \"151674\" \"151675\" \"151676\"\n\n\n\n\nRun nnSVG per sample and store lists of top SVGs\n\n# Here we offer a pseducode example demonstrating how to run `nnSVG` for multiple samples.\n\nres_list &lt;- as.list(rep(NA, length(sample_ids)))\nnames(res_list) &lt;- sample_ids\n\nfor (s in seq_along(sample_ids[1:2])) {\n  \n  # select sample\n  ix &lt;- colData(spatialLIBD_spe_filtered)$sample_id == sample_ids[s]\n  spe_sub &lt;- spatialLIBD_spe_filtered[, ix]\n  dim(spe_sub)\n  \n  # run nnSVG filtering for mitochondrial genes and low-expressed genes\n  spe_sub &lt;- filter_genes(\n    spe_sub, \n    filter_genes_ncounts = 3, \n    filter_genes_pcspots = 0.5, \n    filter_mito = TRUE\n  )\n  \n  # remove any zeros introduced by filtering\n  ix_zeros &lt;- colSums(counts(spe_sub)) == 0\n  if (sum(ix_zeros) &gt; 0) {\n    spe_sub &lt;- spe_sub[, !ix_zeros]\n  }\n  dim(spe_sub)\n  \n  # re-calculate logcounts after filtering\n  spe_sub &lt;- computeLibraryFactors(spe_sub)\n  spe_sub &lt;- logNormCounts(spe_sub)\n  \n  # run nnSVG\n  set.seed(123)\n  spe_sub &lt;- nnSVG(spe_sub)\n  \n  # store results for this sample\n  res_list[[s]] &lt;- rowData(spe_sub)\n}\n\nThen, we combined the results across multiple samples by averaging the ranks of the SVGs following the steps showing in the nnSVG vignette.\n\n# number of genes that passed filtering (and subsampling) for each sample\nsapply(res_list, nrow)\n\n# match results from each sample and store in matching rows\nres_ranks_LIBD &lt;- matrix(NA, nrow = nrow(spatialLIBD_spe_filtered), ncol = length(sample_ids))\nrownames(res_ranks_LIBD) &lt;- rownames(spatialLIBD_spe_filtered)\ncolnames(res_ranks_LIBD) &lt;- sample_ids\n\nfor (s in seq_along(sample_ids)) {\n  stopifnot(colnames(res_ranks_LIBD)[s] == sample_ids[s])\n  stopifnot(colnames(res_ranks_LIBD)[s] == names(res_list)[s])\n  \n  rownames_s &lt;- rownames(res_list[[s]])\n  res_ranks_LIBD[rownames_s, s] &lt;- res_list[[s]][, \"rank\"]\n}\n\n# remove genes that were filtered out in all samples\nix_allna &lt;- apply(res_ranks_LIBD, 1, function(r) all(is.na(r)))\nres_ranks_LIBD &lt;- res_ranks_LIBD[!ix_allna, ]\nhead(res_ranks_LIBD)\n\n\n\n[1] 1967\n\n\n                        source type         gene_id gene_version gene_name\nENSG00000187608 ensembl_havana gene ENSG00000187608            8     ISG15\nENSG00000131584 ensembl_havana gene ENSG00000131584           18     ACAP3\nENSG00000242485 ensembl_havana gene ENSG00000242485            5    MRPL20\nENSG00000160075 ensembl_havana gene ENSG00000160075           11     SSU72\nENSG00000078369 ensembl_havana gene ENSG00000078369           17      GNB1\nENSG00000187730 ensembl_havana gene ENSG00000187730            8     GABRD\n                   gene_source   gene_biotype             gene_search\nENSG00000187608 ensembl_havana protein_coding  ISG15; ENSG00000187608\nENSG00000131584 ensembl_havana protein_coding  ACAP3; ENSG00000131584\nENSG00000242485 ensembl_havana protein_coding MRPL20; ENSG00000242485\nENSG00000160075 ensembl_havana protein_coding  SSU72; ENSG00000160075\nENSG00000078369 ensembl_havana protein_coding   GNB1; ENSG00000078369\nENSG00000187730 ensembl_havana protein_coding  GABRD; ENSG00000187730\n                is_top_hvg    sigma.sq    tau.sq          phi    loglik runtime\nENSG00000187608       TRUE 0.014755187 0.3356806 9.119204e+00 -42272.79  23.241\nENSG00000131584      FALSE 0.001055874 0.2868728 6.900461e-02 -37864.96  20.942\nENSG00000242485      FALSE 0.001656123 0.4411004 1.497840e-02 -48094.96  20.343\nENSG00000160075      FALSE 0.003069247 0.4646316 1.716212e-03 -49391.53  19.676\nENSG00000078369      FALSE 0.007099322 0.7113184 3.456360e-07 -59584.20  23.359\nENSG00000187730      FALSE 0.007227928 0.4965150 1.795660e-04 -51122.73  20.104\n                     mean       var      spcov     prop_sv loglik_lm    LR_stat\nENSG00000187608 0.3141369 0.3505163 0.38668154 0.042105251 -42543.76 541.936437\nENSG00000131584 0.2860178 0.2879378 0.11360906 0.003667137 -37868.30   6.688740\nENSG00000242485 0.4788772 0.4427726 0.08498106 0.003740482 -48098.53   7.151903\nENSG00000160075 0.5193062 0.4677126 0.10668230 0.006562414 -49401.30  19.526820\nENSG00000078369 1.0635173 0.7184340 0.07922530 0.009881886 -59605.57  42.730757\nENSG00000187730 0.5727988 0.5037425 0.14842423 0.014348446 -51165.59  85.727756\n                rank         pval         padj\nENSG00000187608  167 0.000000e+00 0.000000e+00\nENSG00000131584 1953 3.528243e-02 4.669999e-02\nENSG00000242485 1910 2.798878e-02 3.788010e-02\nENSG00000160075 1282 5.751816e-05 1.159785e-04\nENSG00000078369  839 5.261797e-10 1.621185e-09\nENSG00000187730  548 0.000000e+00 0.000000e+00\n\n\n\n\n\nImplement BatchSVG\n\nInstallation\n(After accepted in Bioconductor).\n\nif (!requireNamespace(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"BatchSVG\")\n\nInstall the development version from GitHub.\n\nremotes::install(\"christinehou11/BatchSVG\")\n\n\n\nBatchSVG::featureSelect(): Perform Feature Selection\nWe first applied featureSelect() function from BatchSVG package to compute the number of standard deviations for the relative change in deviance (nSD_dev_subject) and rank difference (nSD_rank_subject) for batch = subject.\n\nlist_batch_df &lt;- featureSelect(input = spatialLIBD_spe, \n    batch_effect = \"subject\", VGs = res_ranks_LIBD$gene_id)\n\nRunning feature selection without batch...\n\n\nBatch Effect: subject\n\n\nRunning feature selection without batch...\n\n\nCalculating deviance and rank difference...\n\n\n\nclass(list_batch_df)\n\n[1] \"list\"\n\n\n\nhead(list_batch_df$subject)\n\n          gene_id gene_name dev_default rank_default dev_subject rank_subject\n1 ENSG00000187608     ISG15    43591.43         1151    43304.39         1157\n2 ENSG00000131584     ACAP3    39115.97         1498    38826.05         1509\n3 ENSG00000242485    MRPL20    47074.23          920    46912.53          918\n4 ENSG00000160075     SSU72    47815.13          862    47742.10          852\n5 ENSG00000078369      GNB1    54464.75          477    54385.81          462\n6 ENSG00000187730     GABRD    51521.13          646    51099.35          648\n       d_diff nSD_dev_subject r_diff nSD_rank_subject\n1 0.006628419     -0.04505973      6       0.15937488\n2 0.007467317     -0.03697398     11       0.29218728\n3 0.003446929     -0.07572463     -2      -0.05312496\n4 0.001529688     -0.09420402    -10      -0.26562480\n5 0.001451448     -0.09495814    -15      -0.39843720\n6 0.008254157     -0.02939000      2       0.05312496\n\n\n\n\nBatchSVG::svg_nSD(): Visualize SVG Selection for Batch Effect(s)\nWe utilized svg_nSD() function to generate visualizations for batch effects assessments in spatially variable genes (SVGs).\n\nplots &lt;- svg_nSD(list_batch_df = list_batch_df, \n            sd_interval_dev = 4, sd_interval_rank = 7)\n\nFigure 1. Visualizations of nSD_dev and nSD_rank threshold selection\n\nplots$subject\n\n\n\n\n\n\nBatchSVG::biasDetect(): Identify Biased Genes\nUsing nSD_svg() function, we determined that nSD_dev = 4 and nSD_rank = 6. Then, we applied biasDetect() function on the list of data frames obtained from featureSelect() function to identify and filter out biased genes. We used both thresholds (threshold = \"both\") and customized the plot color (plot_palette = \"RdPu\"), the point shape and shape (plot_point_shape = 23), and the text size for biased genes (plot_text_size = 4).\n\nbias_both &lt;- biasDetect(list_batch_df = list_batch_df, threshold = \"both\",\n    nSD_dev = 4, nSD_rank = 7, plot_point_shape = 23, plot_palette = \"RdPu\",\n    plot_text_size = 4)\n\nTable 1. Outlier Genes defined by nSD_dev and nSD_rank\n\nbias_both$subject$Table[,c(\"gene_id\",\"gene_name\")]\n\n          gene_id gene_name\n1 ENSG00000255823  MTRNR2L8\n2 ENSG00000256618  MTRNR2L1\n\n\nFigure 2. Outlier Genes defined by nSD_dev and nSD_rank\n\nbias_both$subject$Plot\n\n\n\n\n\n\nSubject-related biased features\nTwo identified biased features are MTRNR2L1 and MTRNR2L8. Spatial expression plots illustrate that these features display strong subject-biased expression and are also clearly enriched in certain spatial domains. MTRNR2L1 and MTRNR2L8 are perfect examples of features that may introduce noise if included in spatial domain clustering.\nFigure 3. Spatial expression plots for MTRNR2L1 and MTRNR2L8\n\nml1 &lt;- plotSpots(spatialLIBD_spe, annotate=\"ENSG00000256618\", assay=\"logcounts\", \n          sample_id=\"sample_id\", point_size=.1) + \n      ggtitle(\"MTRNR2L1\") +\n      scale_color_gradient(low='grey90', high='black')\nml8 &lt;- plotSpots(spatialLIBD_spe, annotate=\"ENSG00000255823\", assay=\"logcounts\", \n          sample_id=\"sample_id\", point_size=.1) + \n      ggtitle(\"MTRNR2L8\") +\n      scale_color_gradient(low='grey90', high='black')\ngrid.arrange(ml1, ml8, ncol=2)\n\n\n\n\n\n\nRefined SVGs\nFinally, we obtained a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for nSD_dev and nSD_rank.\n\nbias_both_df &lt;- bias_both$subject$Table\nsvgs_filt &lt;- setdiff(res_ranks_LIBD$gene_id, bias_both_df$gene_id)\nsvgs_filt_spe &lt;- res_ranks_LIBD[res_ranks_LIBD$gene_id %in% svgs_filt, ]\nnrow(svgs_filt_spe)\n\n[1] 1965\n\n\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] parallel  stats4    stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] gridExtra_2.3               ggspavis_1.12.0            \n [3] BatchSVG_0.99.6             Seurat_5.2.1               \n [5] SeuratObject_5.0.2          sp_2.2-0                   \n [7] PRECAST_1.6.5               gtools_3.9.5               \n [9] here_1.0.1                  scater_1.34.1              \n[11] ggplot2_3.5.1               scuttle_1.16.0             \n[13] nnSVG_1.10.3                spatialLIBD_1.18.0         \n[15] SpatialExperiment_1.16.0    SingleCellExperiment_1.28.1\n[17] SummarizedExperiment_1.36.0 Biobase_2.66.0             \n[19] GenomicRanges_1.58.0        GenomeInfoDb_1.42.3        \n[21] IRanges_2.40.1              S4Vectors_0.44.0           \n[23] BiocGenerics_0.52.0         MatrixGenerics_1.18.1      \n[25] matrixStats_1.5.0          \n\nloaded via a namespace (and not attached):\n  [1] spatstat.sparse_3.1-0    bitops_1.0-9             httr_1.4.7              \n  [4] RColorBrewer_1.1-3       doParallel_1.0.17        backports_1.5.0         \n  [7] sctransform_0.4.1        tools_4.4.2              R6_2.6.1                \n [10] DT_0.33                  uwot_0.2.3               lazyeval_0.2.2          \n [13] withr_3.0.2              progressr_0.15.1         cli_3.6.4               \n [16] spatstat.explore_3.4-2   fastDummies_1.7.5        labeling_0.4.3          \n [19] sass_0.4.9               spatstat.data_3.1-6      ggridges_0.5.6          \n [22] pbapply_1.7-2            Rsamtools_2.22.0         parallelly_1.43.0       \n [25] sessioninfo_1.2.3        attempt_0.3.1            maps_3.4.2.1            \n [28] limma_3.62.2             rstudioapi_0.17.1        RSQLite_2.3.9           \n [31] generics_0.1.3           BiocIO_1.16.0            spatstat.random_3.3-3   \n [34] ica_1.0-3                car_3.1-3                dplyr_1.1.4             \n [37] Matrix_1.7-3             ggbeeswarm_0.7.2         abind_1.4-8             \n [40] lifecycle_1.0.4          yaml_2.3.10              edgeR_4.4.2             \n [43] carData_3.0-5            CompQuadForm_1.4.3       SparseArray_1.6.2       \n [46] BiocFileCache_2.14.0     Rtsne_0.17               paletteer_1.6.0         \n [49] grid_4.4.2               blob_1.2.4               promises_1.3.2          \n [52] ExperimentHub_2.14.0     crayon_1.5.3             GiRaF_1.0.1             \n [55] miniUI_0.1.1.1           lattice_0.22-6           beachmat_2.22.0         \n [58] cowplot_1.1.3            KEGGREST_1.46.0          magick_2.8.6            \n [61] pillar_1.10.1            knitr_1.50               rjson_0.2.23            \n [64] future.apply_1.11.3      codetools_0.2-20         glue_1.8.0              \n [67] spatstat.univar_3.1-2    data.table_1.17.0        vctrs_0.6.5             \n [70] png_0.1-8                spam_2.11-1              gtable_0.3.6            \n [73] rematch2_2.1.2           cachem_1.1.0             xfun_0.51               \n [76] S4Arrays_1.6.0           mime_0.13                ggside_0.3.1            \n [79] survival_3.8-3           iterators_1.0.14         fields_16.3.1           \n [82] statmod_1.5.0            fitdistrplus_1.2-2       ROCR_1.0-11             \n [85] nlme_3.1-167             bit64_4.6.0-1            filelock_1.0.3          \n [88] RcppAnnoy_0.0.22         rprojroot_2.0.4          bslib_0.9.0             \n [91] irlba_2.3.5.1            vipor_0.4.7              KernSmooth_2.23-26      \n [94] colorspace_2.1-1         DBI_1.2.3                tidyselect_1.2.1        \n [97] DR.SC_3.4                BRISC_1.0.6              bit_4.6.0               \n[100] compiler_4.4.2           curl_6.2.2               BiocNeighbors_2.0.1     \n[103] DelayedArray_0.32.0      plotly_4.10.4            rtracklayer_1.66.0      \n[106] scales_1.3.0             lmtest_0.9-40            rappdirs_0.3.3          \n[109] goftest_1.2-3            stringr_1.5.1            digest_0.6.37           \n[112] spatstat.utils_3.1-3     rmarkdown_2.29           benchmarkmeData_1.0.4   \n[115] XVector_0.46.0           htmltools_0.5.8.1        pkgconfig_2.0.3         \n[118] dbplyr_2.5.0             fastmap_1.2.0            ggthemes_5.1.0          \n[121] rlang_1.1.5              htmlwidgets_1.6.4        UCSC.utils_1.2.0        \n[124] scry_1.18.0              shiny_1.10.0             farver_2.1.2            \n[127] jquerylib_0.1.4          zoo_1.8-13               jsonlite_1.9.1          \n[130] BiocParallel_1.40.0      mclust_6.1.1             config_0.3.2            \n[133] BiocSingular_1.22.0      RCurl_1.98-1.17          magrittr_2.0.3          \n[136] Formula_1.2-5            GenomeInfoDbData_1.2.13  dotCall64_1.2           \n[139] patchwork_1.3.0          munsell_0.5.1            Rcpp_1.0.14             \n[142] reticulate_1.41.0.1      viridis_0.6.5            stringi_1.8.4           \n[145] zlibbioc_1.52.0          MASS_7.3-65              plyr_1.8.9              \n[148] AnnotationHub_3.14.0     listenv_0.9.1            ggrepel_0.9.6           \n[151] deldir_2.0-4             Biostrings_2.74.1        splines_4.4.2           \n[154] tensor_1.5               locfit_1.5-9.12          rdist_0.0.5             \n[157] ggpubr_0.6.0             igraph_2.1.4             spatstat.geom_3.3-6     \n[160] ggsignif_0.6.4           RcppHNSW_0.6.0           reshape2_1.4.4          \n[163] ScaledMatrix_1.14.0      BiocVersion_3.20.0       XML_3.99-0.18           \n[166] evaluate_1.0.3           golem_0.5.1              BiocManager_1.30.25     \n[169] foreach_1.5.2            httpuv_1.6.15            RANN_2.6.2              \n[172] tidyr_1.3.1              purrr_1.0.4              polyclip_1.10-7         \n[175] scattermore_1.2          future_1.34.0            benchmarkme_1.0.8       \n[178] rsvd_1.0.5               broom_1.0.7              xtable_1.8-4            \n[181] restfulr_0.0.15          RSpectra_0.16-2          rstatix_0.7.2           \n[184] later_1.4.1              viridisLite_0.4.2        tibble_3.2.1            \n[187] memoise_2.0.1            beeswarm_0.4.0           AnnotationDbi_1.68.0    \n[190] GenomicAlignments_1.42.0 cluster_2.1.8.1          shinyWidgets_0.9.0      \n[193] globals_0.16.3"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "BatchSVG analysis\nThis is the repository to store all analysis works for the manuscript and method development, including:\n\nFeature Selection Method\nData-driven Thresholding Approach\nBatchSVG R/Bioconductor Package Sample Analysis\n\nspatialLIBD DLPFC dataset\nhumanHippocampus2024 HPC dataset"
  },
  {
    "objectID": "humanHippocampus2024_sub4_spe.html",
    "href": "humanHippocampus2024_sub4_spe.html",
    "title": "humanHippocampus2024 Dataset",
    "section": "",
    "text": "Introduction\nIn this section, we will include biased feature identification analysis using our developed method to show how BatchSVG helps to detect and visualize the biased features in SVGs. We will use the spatially-resolved transcriptomics (SRT) dataset from the humanHippocampus package.\n\n# library(humanHippocampus2024)\nlibrary(ExperimentHub)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(cowplot)\nlibrary(here)\nlibrary(PRECAST)\nlibrary(Seurat)\nlibrary(BatchSVG)\nlibrary(ggspavis)\nlibrary(gridExtra)\nlibrary(scater)\n\nThe humanHippocampus2024 dataset was collected from the adjacent tissue sections of the anterior human hippocampus (HPC) across ten adult neurotypical donors. The dataset is the spatialExperiment object generated and processed from the spatial_HPC project. This dataset has 9 slides and 4 samples from each slide.\n\nehub &lt;- ExperimentHub()\nspe &lt;- ehub[[\"EH9605\"]]\n\ndim(spe)\n\n[1]  31483 150917\n\ntable(colData(spe)[,c(\"sample_id\",\"slide\")])\n\n               slide\nsample_id       V10B01-085 V10B01-086 V11A20-297 V11L05-333 V11L05-335\n  V10B01-085_A1       3654          0          0          0          0\n  V10B01-085_B1       3263          0          0          0          0\n  V10B01-085_C1       3738          0          0          0          0\n  V10B01-085_D1       3348          0          0          0          0\n  V10B01-086_A1          0       4655          0          0          0\n  V10B01-086_B1          0       3964          0          0          0\n  V10B01-086_C1          0       2606          0          0          0\n  V10B01-086_D1          0       3389          0          0          0\n  V11A20-297_A1          0          0       4432          0          0\n  V11A20-297_B1          0          0       4659          0          0\n  V11A20-297_C1          0          0       3429          0          0\n  V11A20-297_D1          0          0       3412          0          0\n  V11L05-333_A1          0          0          0       4969          0\n  V11L05-333_B1          0          0          0       4985          0\n  V11L05-333_C1          0          0          0       4548          0\n  V11L05-333_D1          0          0          0       4938          0\n  V11L05-335_A1          0          0          0          0       4607\n  V11L05-335_B1          0          0          0          0       4737\n  V11L05-335_C1          0          0          0          0       4887\n  V11L05-335_D1          0          0          0          0       4483\n  V11L05-336_A1          0          0          0          0          0\n  V11L05-336_B1          0          0          0          0          0\n  V11L05-336_C1          0          0          0          0          0\n  V11L05-336_D1          0          0          0          0          0\n  V11U08-081_A1          0          0          0          0          0\n  V11U08-081_B1          0          0          0          0          0\n  V11U08-081_C1          0          0          0          0          0\n  V11U08-081_D1          0          0          0          0          0\n  V11U08-084_A1          0          0          0          0          0\n  V11U08-084_B1          0          0          0          0          0\n  V11U08-084_C1          0          0          0          0          0\n  V11U08-084_D1          0          0          0          0          0\n  V12F14-051_A1          0          0          0          0          0\n  V12F14-051_B1          0          0          0          0          0\n  V12F14-051_C1          0          0          0          0          0\n  V12F14-051_D1          0          0          0          0          0\n               slide\nsample_id       V11L05-336 V11U08-081 V11U08-084 V12F14-051\n  V10B01-085_A1          0          0          0          0\n  V10B01-085_B1          0          0          0          0\n  V10B01-085_C1          0          0          0          0\n  V10B01-085_D1          0          0          0          0\n  V10B01-086_A1          0          0          0          0\n  V10B01-086_B1          0          0          0          0\n  V10B01-086_C1          0          0          0          0\n  V10B01-086_D1          0          0          0          0\n  V11A20-297_A1          0          0          0          0\n  V11A20-297_B1          0          0          0          0\n  V11A20-297_C1          0          0          0          0\n  V11A20-297_D1          0          0          0          0\n  V11L05-333_A1          0          0          0          0\n  V11L05-333_B1          0          0          0          0\n  V11L05-333_C1          0          0          0          0\n  V11L05-333_D1          0          0          0          0\n  V11L05-335_A1          0          0          0          0\n  V11L05-335_B1          0          0          0          0\n  V11L05-335_C1          0          0          0          0\n  V11L05-335_D1          0          0          0          0\n  V11L05-336_A1       4539          0          0          0\n  V11L05-336_B1       4193          0          0          0\n  V11L05-336_C1       4443          0          0          0\n  V11L05-336_D1       4658          0          0          0\n  V11U08-081_A1          0       4609          0          0\n  V11U08-081_B1          0       3763          0          0\n  V11U08-081_C1          0       3649          0          0\n  V11U08-081_D1          0       4443          0          0\n  V11U08-084_A1          0          0       4822          0\n  V11U08-084_B1          0          0       4541          0\n  V11U08-084_C1          0          0       4986          0\n  V11U08-084_D1          0          0       4291          0\n  V12F14-051_A1          0          0          0       3728\n  V12F14-051_B1          0          0          0       3074\n  V12F14-051_C1          0          0          0       4037\n  V12F14-051_D1          0          0          0       4438\n\n\nWe conducted data analysis using four samples from the raw data:\n\nV11L05-333_B1\nV11L05-333_D1\nV11L05-335_D1\nV11L05-336_A1.\n\n\nfix_order &lt;- distinct(\n    as.data.frame(colData(spe)), slide, array, brnum, sample_id, \n    position, sex) %&gt;% \n    arrange(slide, array)\nsub4 &lt;- fix_order$sample_id[c(14,16, 20,21)]\nspe_sub4 &lt;- spe[,spe$sample_id %in% sub4]\n\ndim(spe_sub4)\n\n[1] 31483 18945\n\n# sample_id vs. slide\ntable_data_slide &lt;- table(colData(spe_sub4)[, c(\"sample_id\", \"slide\")])\nsubset_table_slide &lt;- table_data_slide[rownames(table_data_slide) %in% c(\"V11L05-333_B1\", \"V11L05-333_D1\", \"V11L05-335_D1\", \"V11L05-336_A1\"), ]\nsubset_table_slide_2 &lt;- subset_table_slide[,colnames(subset_table_slide) %in% c(\"V11L05-333\", \"V11L05-335\", \"V11L05-336\") ]\nsubset_table_slide_2\n\n               slide\nsample_id       V11L05-333 V11L05-335 V11L05-336\n  V11L05-333_B1       4985          0          0\n  V11L05-333_D1       4938          0          0\n  V11L05-335_D1          0       4483          0\n  V11L05-336_A1          0          0       4539\n\n# sample_id vs. sex\ntable_data_sex &lt;- table(colData(spe_sub4)[, c(\"sample_id\", \"sex\")])\nsubset_table_sex &lt;- table_data_sex[rownames(table_data_sex) %in% c(\"V11L05-333_B1\", \"V11L05-333_D1\", \"V11L05-335_D1\", \"V11L05-336_A1\"), ]\nsubset_table_sex\n\n               sex\nsample_id          F    M\n  V11L05-333_B1    0 4985\n  V11L05-333_D1    0 4938\n  V11L05-335_D1 4483    0\n  V11L05-336_A1 4539    0\n\n\n\n\nSelect Spatially Variable Genes\nWe used the spatially variable genes set generated from spatial_HPC project, and the collaborators used nnSVG package.\n\nload(here(\"data/nnSVG_outs_HE_only.rda\"))\ndim(res_ranks)\n\n[1] 7028   36\n\n\nWe refined our selection to include only the top 2,000 ranked features (rank \\(\\leq\\) 2000) and only genes that appear in more than one sample (n &gt; 1).\nAfter applying these criteria, we obtain 2082 spatially variable genes across the four samples.\n\nres_df_sub &lt;- pivot_longer(\n    rownames_to_column(as.data.frame(res_ranks), var&lt;-\"gene_id\"), \n        colnames(res_ranks), \n    names_to=\"sample_id\", \n    values_to=\"rank\", \n    values_drop_na=TRUE)\n    \nres_df_sub &lt;- filter(res_df_sub,\n    sample_id %in% \n        c(\"V11L05-333_B1\", \"V11L05-333_D1\", \"V11L05-335_D1\", \"V11L05-336_A1\"), \n    rank &lt;= 2000) # top 2k sig features\n    \nsvgs_sub4 &lt;- group_by(res_df_sub, gene_id) |&gt;\n    tally() |&gt; \n    filter(n&gt;1)\n\nnrow(svgs_sub4)\n\n[1] 2082\n\n\nFinally, we obtained the subset spe object for our analysis.\n\nspe_sub4 &lt;- spe_sub4[rowData(spe_sub4)$gene_id %in% svgs_sub4$gene_id,]\nrownames(spe_sub4) &lt;- rowData(spe_sub4)$gene_id\n\nspe_sub4\n\nclass: SpatialExperiment \ndim: 2082 18945 \nmetadata(1): Obtained_from\nassays(2): counts logcounts\nrownames(2082): ENSG00000131584 ENSG00000175756 ... ENSG00000198695\n  ENSG00000198727\nrowData names(7): source type ... gene_type gene_search\ncolnames(18945): AAACAACGAATAGTTC-1_V11L05-333_B1\n  AAACAAGTATCTCCCA-1_V11L05-333_B1 ... TTGTTTGTATTACACG-1_V11L05-336_A1\n  TTGTTTGTGTAAATTC-1_V11L05-336_A1\ncolData names(150): sample_id in_tissue ... nmf99 nmf100\nreducedDimNames(3): 10x_pca 10x_tsne 10x_umap\nmainExpName: NULL\naltExpNames(0):\nspatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres\nimgData names(4): sample_id image_id data scaleFactor\n\n\n\n\nImplement BatchSVG\n\nInstallation\n(After accepted in Bioconductor).\n\nif (!requireNamespace(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n}\nBiocManager::install(\"BatchSVG\")\n\nInstall the development version from GitHub.\n\nremotes::install(\"christinehou11/BatchSVG\")\n\n\n\nBatchSVG::featureSelect(): Perform Feature Selection\nWe applied featureSelect() to spe_sub4 dataset while adjusting for the batch effect sample_id and sex. Different from the spatialLIBD dataset analysis, we showed how BatchSVG package can conduct the biased feature identification for multiple batch effects at the same time with specific thresholds for relative change in deviance and rank respectively.\n\nlist_batch_df &lt;- featureSelect(input = spe_sub4, \n    batch_effect = c(\"sample_id\", \"sex\"), VGs = svgs_sub4$gene_id)\n\nRunning feature selection without batch...\n\n\nBatch Effect: sample_id\n\n\nRunning feature selection without batch...\n\n\nCalculating deviance and rank difference...\n\n\nBatch Effect: sex\n\n\nRunning feature selection without batch...\n\n\nCalculating deviance and rank difference...\n\n\n\nclass(list_batch_df)\n\n[1] \"list\"\n\n\n\nhead(list_batch_df$sample_id)\n\n          gene_id gene_name dev_default rank_default dev_sample_id\n1 ENSG00000131584     ACAP3    16125.31         1262      15900.14\n2 ENSG00000175756  AURKAIP1    17344.09         1060      17167.86\n3 ENSG00000242485    MRPL20    17629.33         1023      17517.05\n4 ENSG00000179403      VWA1    12860.93         1726      12825.66\n5 ENSG00000160075     SSU72    16145.20         1255      16136.31\n6 ENSG00000078369      GNB1    22402.83          516      22271.32\n  rank_sample_id       d_diff nSD_dev_sample_id r_diff nSD_rank_sample_id\n1           1269 0.0141612453       -0.09513109      7         0.16380252\n2           1058 0.0102651525       -0.16945410     -2        -0.04680072\n3           1004 0.0064098269       -0.24299943    -19        -0.44460683\n4           1702 0.0027493688       -0.31282741    -24        -0.56160863\n5           1220 0.0005506572       -0.35477067    -35        -0.81901258\n6            497 0.0059049925       -0.25262980    -19        -0.44460683\n\n\n\nhead(list_batch_df$sex)\n\n          gene_id gene_name dev_default rank_default  dev_sex rank_sex\n1 ENSG00000131584     ACAP3    16125.31         1262 16118.48     1250\n2 ENSG00000175756  AURKAIP1    17344.09         1060 17247.44     1064\n3 ENSG00000242485    MRPL20    17629.33         1023 17585.70     1013\n4 ENSG00000179403      VWA1    12860.93         1726 12860.90     1709\n5 ENSG00000160075     SSU72    16145.20         1255 16141.12     1243\n6 ENSG00000078369      GNB1    22402.83          516 22314.17      509\n        d_diff nSD_dev_sex r_diff nSD_rank_sex\n1 4.234208e-04  -0.2615600    -12   -0.3080188\n2 5.603690e-03  -0.1013769      4    0.1026729\n3 2.480783e-03  -0.1979427    -10   -0.2566824\n4 1.811106e-06  -0.2745969    -17   -0.4363600\n5 2.527558e-04  -0.2668373    -12   -0.3080188\n6 3.973515e-03  -0.1517848     -7   -0.1796776\n\n\n\n\nBatchSVG::svg_nSD(): Visualize SVG Selection for Batch Effect(s)\nWe utilized svg_nSD() function to generate visualizations for batch effects assessments in spatially variable genes (SVGs). The svg_nSD() function allows for multiple batch effects with corresponding sd_interval_dev and sd_interval_rank.\n\nplots &lt;- svg_nSD(list_batch_df = list_batch_df, \n                sd_interval_dev = c(10,10), sd_interval_rank = c(5,6))\n\nFigure 1a. Visualizations of nSD_dev and nSD_rank threshold selection for Sample ID\n\nplots$sample_id\n\n\n\n\nFigure 1b. Visualizations of nSD_dev and nSD_rank threshold selection for Sex\n\nplots$sex\n\n\n\n\n\n\nBatchSVG::biasDetect(): Identify Biased Genes\nUsing nSD_svg() function, we determined the nSD thresholds of relative change in deviance and rank for sample_id and sex respectively. Then, we applied biasDetect() function on the list of data frames obtained from featureSelect() function to identify and filter out biased genes. We used both thresholds (threshold = \"both\") with the color customization.\n\nSample ID\n\nnSD_dev = 10\nnSD_rank = 5\nplot_palette = \"Blues\"\n\nSex\n\nnSD_dev = 10\nnSD_rank = 6\nplot_palette = \"Purples\".\n\n\n\nbias_both &lt;- biasDetect(list_batch_df = list_batch_df, \n    threshold = \"both\", nSD_dev = c(10, 10), nSD_rank = c(5,6), plot_palette = c(\"Blues\",\"Purples\"))\n\n\nSample ID\nTable 1. Outlier Genes defined by nSD_dev and nSD_rank for Sample ID\n\nbias_both$sample_id$Table[,c(\"gene_id\",\"gene_name\",\"nSD_bin_dev\", \"dev_outlier\", \"nSD_bin_rank\", \"rank_outlier\")]\n\n           gene_id gene_name nSD_bin_dev dev_outlier nSD_bin_rank rank_outlier\n1  ENSG00000177606       JUN      [0,10)       FALSE       [5,10)         TRUE\n2  ENSG00000159388      BTG2      [0,10)       FALSE      [10,15)         TRUE\n3  ENSG00000135625      EGR4      [0,10)       FALSE       [5,10)         TRUE\n4  ENSG00000120738      EGR1      [0,10)       FALSE       [5,10)         TRUE\n5  ENSG00000120129     DUSP1      [0,10)       FALSE      [10,15)         TRUE\n6  ENSG00000204388    HSPA1B      [0,10)       FALSE      [10,15)         TRUE\n7  ENSG00000130222   GADD45G      [0,10)       FALSE       [5,10)         TRUE\n8  ENSG00000174576     NPAS4      [0,10)       FALSE       [5,10)         TRUE\n9  ENSG00000123358     NR4A1      [0,10)       FALSE      [15,20]         TRUE\n10 ENSG00000170345       FOS     [10,20)        TRUE        [0,5)        FALSE\n11 ENSG00000256618  MTRNR2L1     [30,40]        TRUE       [5,10)         TRUE\n12 ENSG00000099860   GADD45B      [0,10)       FALSE       [5,10)         TRUE\n13 ENSG00000171223      JUNB      [0,10)       FALSE       [5,10)         TRUE\n14 ENSG00000125740      FOSB      [0,10)       FALSE       [5,10)         TRUE\n15 ENSG00000229807      XIST     [10,20)        TRUE      [15,20]         TRUE\n\n\nFigure 2a. Outlier Genes defined by nSD_dev and nSD_rank for Sample ID\n\nbias_both$sample_id$Plot\n\n\n\n\nSince we defined threshold = \"both\", the BatchSVG package identified the biased features based on both dev_outlier and rank_outlier. The identified biased features may have\n\ndev_outlier = TRUE, rank_outlier = TRUE or\ndev_outlier = FALSE, rank_outlier = TRUE or\ndev_outlier = TRUE, rank_outlier = FALSE.\n\nFor the case of dev_outlier = TRUE AND rank_outlier = TRUE, the BatchSVG package identified XIST and MTRNR2L1 as bised features. For the case of dev_outlier = TRUE OR rank_outlier = TRUE, the BatchSVG package identified JUN, BTG2, EGR4, EGR1, DUSP1, HSPA1B, GADD45G, NPAS4, NR4A1, FOS, GADD45B, JUNB, and FOSB. We generated spatial expression plots for each identified genes to confirm that they are sample-biased features.\nFigure 2b. Spatial expression plots for dev_outlier = TRUE AND rank_outlier = TRUE\n\n\n\n\n\nFigure 2c. Spatial expression plots for dev_outlier = TRUE OR rank_outlier = TRUE\n\n\n\n\n\n\n\nSex\nTable 2. Outlier Genes defined by nSD_dev and nSD_rank for Sex\n\nbias_both$sex$Table[,c(\"gene_id\",\"gene_name\",\"nSD_bin_dev\", \"dev_outlier\", \"nSD_bin_rank\", \"rank_outlier\")]\n\n           gene_id gene_name nSD_bin_dev dev_outlier nSD_bin_rank rank_outlier\n1  ENSG00000159388      BTG2      [0,10)       FALSE      [12,18)         TRUE\n2  ENSG00000135625      EGR4      [0,10)       FALSE       [6,12)         TRUE\n3  ENSG00000120738      EGR1      [0,10)       FALSE       [6,12)         TRUE\n4  ENSG00000120129     DUSP1      [0,10)       FALSE      [12,18)         TRUE\n5  ENSG00000204388    HSPA1B      [0,10)       FALSE       [6,12)         TRUE\n6  ENSG00000130222   GADD45G      [0,10)       FALSE       [6,12)         TRUE\n7  ENSG00000174576     NPAS4     [10,20)        TRUE        [0,6)        FALSE\n8  ENSG00000123358     NR4A1     [10,20)        TRUE      [18,24]         TRUE\n9  ENSG00000170345       FOS     [10,20)        TRUE        [0,6)        FALSE\n10 ENSG00000256618  MTRNR2L1     [10,20)        TRUE        [0,6)        FALSE\n11 ENSG00000099860   GADD45B      [0,10)       FALSE       [6,12)         TRUE\n12 ENSG00000171223      JUNB      [0,10)       FALSE       [6,12)         TRUE\n13 ENSG00000125740      FOSB      [0,10)       FALSE       [6,12)         TRUE\n14 ENSG00000229807      XIST     [20,30]        TRUE      [12,18)         TRUE\n\n\nFigure 3a. Outlier Genes defined by nSD_dev and nSD_rank for Sex\n\nbias_both$sex$Plot\n\n\n\n\nFor the case of dev_outlier = TRUE AND rank_outlier = TRUE, the BatchSVG package identified NR4A1 and XIST as bised features. For the case of dev_outlier = TRUE OR rank_outlier = TRUE, the BatchSVG package identified BTG2, EGR4, EGR1, DUSP1, HSPA1B, GADD45G, NPAS4, FOS, MTRNR2L1, GADD45B, JUNB, and FOSB. We generated spatial expression plots for each identified genes to confirm that they are sex-biased features.\nFigure 3b. Spatial expression plots for dev_outlier = TRUE AND rank_outlier = TRUE\n\n\n\n\n\nFigure 3c. Spatial expression plots for dev_outlier = TRUE OR rank_outlier = TRUE\n\n\n\n\n\n\n\n\nRefine SVGs by Removing Batch-Affected Outliers\nFinally, based on different batch effects, we were able to obtain a refined set of spatially variable genes (SVGs) by removing the identified outliers based on user-defined thresholds for nSD_dev and nSD_rank.\n\nSample ID\n\nbias_sample_id &lt;- bias_both$sample_id$Table\nsvgs_filt_sample_id &lt;- setdiff(svgs_sub4$gene_id, bias_sample_id$gene_id)\nsvgs_sub4_filt_sample_id &lt;- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt_sample_id, ]\nnrow(svgs_sub4_filt_sample_id)\n\n[1] 2067\n\n\n\n\nSex\n\nbias_sex &lt;- bias_both$sex$Table\nsvgs_filt_sex &lt;- setdiff(svgs_sub4$gene_id, bias_sex$gene_id)\nsvgs_sub4_filt_sex &lt;- svgs_sub4[svgs_sub4$gene_id %in% svgs_filt_sex, ]\nnrow(svgs_sub4_filt_sex)\n\n[1] 2068\n\n\nAfter obtaining the refined set of SVGs for sample ID and sex respectively, these genes can be further analyzed using established spatial transcriptomics clustering algorithms to explore tissue layers and spatial organization.\n\n\n\n\nCluster results\nWe used the set of SVGs for sample ID to compare the cluster results before and after we remove the identified batch-related biased features using BatchSVG package. We performed PRECAST clustering to identify spatial domains after removing all sample-biased SVGs (n = 15) from the feature list.\n\nOld SVGs\n\n# seurat list\nl2 = unique(spe_sub4$sample_id)\nnames(l2) = l2\nl2 = lapply(l2, function(x) spe_sub4[,colData(spe_sub4)$sample_id==x])\n\nsrt.sets = lapply(l2, function(x) {\n  colnames(counts(x)) &lt;- rownames(colData(x))\n  colData(x)$col &lt;- x$array_col\n  colData(x)$row &lt;- x$array_row\n  count &lt;- counts(x)\n  a1 &lt;- CreateAssayObject(count, assay = \"RNA\", min.features = 0, min.cells = 0)\n  CreateSeuratObject(a1, meta.data = as.data.frame(colData(x)))\n})\n\n#run precast\npreobj_old &lt;- CreatePRECASTObject(seuList = srt.sets,\n                              customGenelist=rownames(spe_sub4),\n                              premin.spots=0, premin.features=0, postmin.spots=0, postmin.features=0)\nPRECASTObj_old &lt;- AddAdjList(preobj_old, platform = \"Visium\")\nPRECASTObj_old &lt;- AddParSetting(PRECASTObj_old, maxIter = 20, verbose = TRUE, Sigma_equal=FALSE, coreNum=12)\nPRECASTObj_old &lt;- PRECAST(PRECASTObj, K=7)\n\n#consolidate/ reformat results\nPRECASTObj_old &lt;- SelectModel(PRECASTObj_old, criteria=\"MBIC\")\nseuInt_old &lt;- IntegrateSpaData(PRECASTObj_old, species = \"Human\")\n\n\n\nRefined SVGs\n\n#remove biased genes\nsvgs_filt = setdiff(rownames(spe_sub4), bias_sample_id$gene_id) # 2067\n\n#run precast\npreobj_new &lt;- CreatePRECASTObject(seuList = srt.sets,\n                              customGenelist=svgs_filt,\n                              premin.spots=0, premin.features=0, postmin.spots=0, postmin.features=0)\nPRECASTObj_new &lt;- AddAdjList(preobj_new, platform = \"Visium\")\nPRECASTObj_new &lt;- AddParSetting(PRECASTObj_new, maxIter = 20, verbose = TRUE, Sigma_equal=FALSE, coreNum=12)\nPRECASTObj_new &lt;- PRECAST(PRECASTObj_new, K=7)\n\n#consolidate/ reformat results\nPRECASTObj_new &lt;- SelectModel(PRECASTObj_new, criteria=\"MBIC\")\nseuInt_new &lt;- IntegrateSpaData(PRECASTObj_new, species = \"Human\")\n\n\n\nPlots comparison\n\nclusters &lt;- as.data.frame(colData(spe_sub4)[,c(\"sample_id\",\"slide\",\"cluster\")])\n\nspe_sub4$precast_k7 = clusters1$cluster\nspe_sub4$precast_k7_ordered = factor(spe_sub4$precast_k7, levels=c(7,2,3,1,6,5,4), \n                                labels=c(\"WM\",\"WM (2)\",\"SR/SL\",\"CA1\",\"CA3\",\"DG GCL\",\"DG ML\"))\n\nspe_sub4$precast_k7_nobias = clusters2$cluster\nspe_sub4$precast_k7_nobias_ordered= factor(spe_sub4$precast_k7_nobias, levels=c(1,2,7,5,6,4,3),\n                                labels=c(\"WM\",\"SR/SL\",\"CA1\",\"CA1 (2)\",\"CA3\",\"DG GCL\",\"DG ML\"))\n\nl2 = unique(spe_sub4$sample_id)\nnames(l2) = l2\nl2 = lapply(l2, function(x) spe_sub4[,colData(spe_sub4)$sample_id==x])\n\ncol.pal1 = c(\"#1f77b4FF\",\"#aec7e8FF\",\"#ffbb78FF\",\"#2ca02cFF\",\"#ff7f0eFF\",\"#d62728FF\",\"#ff9896FF\")\ncol.pal2 = c(\"#1f77b4FF\",\"#ffbb78FF\",\"#2ca02cFF\",\"#98df8aFF\",\"#ff7f0eFF\",\"#d62728FF\",\"#ff9896FF\")\n\nComparing the clustering results, the refined SVGs led to a more coherent and biologically meaningful spatial domain segmentation. Specifically, in the original clustering (left), an additional “WM (2)” cluster appeared, likely due to batch-associated biases. After applying BatchSVG , this extra cluster was removed, and the CA1 region became more distinct, resolving ambiguity in its boundaries. The refined clustering thus provides improved spatial structure alignment, demonstrating the effectiveness of BatchSVG in enhancing spatial domain identification.\nFigure 4a. PRECAST clusters: 2082 input features, K=7\n\nc1 &lt;- lapply(seq_along(l2), function(x) {\n  plotSpots(l2[[x]], annotate=\"precast_k7_ordered\", point_size=.3)+\n    labs(color=\"clus\")+\n    scale_color_manual(values=col.pal1)+\n    theme(plot.title=element_text(size=8))\n})\nPRECAST::drawFigs(c1, layout.dim = c(1, 4), common.legend = TRUE, legend.position = \"right\", align = \"h\")\n\n\n\n\nFigure 4b. PRECAST clusters: 2067 input features (SVGs minus 15 biased), K=7\n\nc2 &lt;- lapply(seq_along(l2), function(x) {\n  plotSpots(l2[[x]], annotate=\"precast_k7_nobias_ordered\", point_size=.3)+\n    labs(color=\"clus\")+\n    scale_color_manual(values=col.pal2)+\n    theme(plot.title=element_text(size=8))\n})\nPRECAST::drawFigs(c2, layout.dim = c(1, 4), common.legend = TRUE, legend.position = \"right\", align = \"h\")\n\n\n\n\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] parallel  stats4    stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] humanHippocampus2024_0.99.8 scater_1.34.1              \n [3] scuttle_1.16.0              gridExtra_2.3              \n [5] ggspavis_1.12.0             ggplot2_3.5.1              \n [7] BatchSVG_0.99.6             Seurat_5.2.1               \n [9] SeuratObject_5.0.2          sp_2.2-0                   \n[11] PRECAST_1.6.5               gtools_3.9.5               \n[13] here_1.0.1                  cowplot_1.1.3              \n[15] tibble_3.2.1                dplyr_1.1.4                \n[17] tidyr_1.3.1                 SpatialExperiment_1.16.0   \n[19] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0\n[21] Biobase_2.66.0              GenomicRanges_1.58.0       \n[23] GenomeInfoDb_1.42.3         IRanges_2.40.1             \n[25] S4Vectors_0.44.0            MatrixGenerics_1.18.1      \n[27] matrixStats_1.5.0           ExperimentHub_2.14.0       \n[29] AnnotationHub_3.14.0        BiocFileCache_2.14.0       \n[31] dbplyr_2.5.0                BiocGenerics_0.52.0        \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22        splines_4.4.2           later_1.4.1            \n  [4] bitops_1.0-9            filelock_1.0.3          polyclip_1.10-7        \n  [7] fastDummies_1.7.5       lifecycle_1.0.4         rstatix_0.7.2          \n [10] rprojroot_2.0.4         globals_0.16.3          lattice_0.22-6         \n [13] MASS_7.3-65             backports_1.5.0         magrittr_2.0.3         \n [16] plotly_4.10.4           rmarkdown_2.29          yaml_2.3.10            \n [19] httpuv_1.6.15           sctransform_0.4.1       ggside_0.3.1           \n [22] spam_2.11-1             spatstat.sparse_3.1-0   reticulate_1.41.0.1    \n [25] pbapply_1.7-2           DBI_1.2.3               RColorBrewer_1.1-3     \n [28] abind_1.4-8             zlibbioc_1.52.0         Rtsne_0.17             \n [31] purrr_1.0.4             RCurl_1.98-1.17         rappdirs_0.3.3         \n [34] GenomeInfoDbData_1.2.13 ggrepel_0.9.6           scry_1.18.0            \n [37] irlba_2.3.5.1           listenv_0.9.1           spatstat.utils_3.1-3   \n [40] goftest_1.2-3           RSpectra_0.16-2         spatstat.random_3.3-3  \n [43] fitdistrplus_1.2-2      parallelly_1.43.0       codetools_0.2-20       \n [46] DelayedArray_0.32.0     tidyselect_1.2.1        UCSC.utils_1.2.0       \n [49] farver_2.1.2            viridis_0.6.5           ScaledMatrix_1.14.0    \n [52] spatstat.explore_3.4-2  jsonlite_1.9.1          BiocNeighbors_2.0.1    \n [55] Formula_1.2-5           progressr_0.15.1        ggridges_0.5.6         \n [58] survival_3.8-3          tools_4.4.2             ica_1.0-3              \n [61] Rcpp_1.0.14             glue_1.8.0              SparseArray_1.6.2      \n [64] xfun_0.51               ggthemes_5.1.0          withr_3.0.2            \n [67] BiocManager_1.30.25     fastmap_1.2.0           rsvd_1.0.5             \n [70] digest_0.6.37           R6_2.6.1                mime_0.13              \n [73] colorspace_2.1-1        scattermore_1.2         tensor_1.5             \n [76] spatstat.data_3.1-6     RSQLite_2.3.9           generics_0.1.3         \n [79] data.table_1.17.0       httr_1.4.7              htmlwidgets_1.6.4      \n [82] S4Arrays_1.6.0          uwot_0.2.3              pkgconfig_2.0.3        \n [85] gtable_0.3.6            blob_1.2.4              lmtest_0.9-40          \n [88] XVector_0.46.0          htmltools_0.5.8.1       carData_3.0-5          \n [91] dotCall64_1.2           scales_1.3.0            png_0.1-8              \n [94] spatstat.univar_3.1-2   knitr_1.50              rstudioapi_0.17.1      \n [97] reshape2_1.4.4          rjson_0.2.23            nlme_3.1-167           \n[100] curl_6.2.2              cachem_1.1.0            zoo_1.8-13             \n[103] stringr_1.5.1           BiocVersion_3.20.0      KernSmooth_2.23-26     \n[106] vipor_0.4.7             miniUI_0.1.1.1          GiRaF_1.0.1            \n[109] AnnotationDbi_1.68.0    pillar_1.10.1           grid_4.4.2             \n[112] vctrs_0.6.5             RANN_2.6.2              ggpubr_0.6.0           \n[115] promises_1.3.2          car_3.1-3               BiocSingular_1.22.0    \n[118] beachmat_2.22.0         DR.SC_3.4               xtable_1.8-4           \n[121] cluster_2.1.8.1         beeswarm_0.4.0          evaluate_1.0.3         \n[124] magick_2.8.6            cli_3.6.4               compiler_4.4.2         \n[127] rlang_1.1.5             crayon_1.5.3            ggsignif_0.6.4         \n[130] future.apply_1.11.3     labeling_0.4.3          mclust_6.1.1           \n[133] ggbeeswarm_0.7.2        plyr_1.8.9              stringi_1.8.4          \n[136] BiocParallel_1.40.0     viridisLite_0.4.2       deldir_2.0-4           \n[139] munsell_0.5.1           Biostrings_2.74.1       lazyeval_0.2.2         \n[142] spatstat.geom_3.3-6     CompQuadForm_1.4.3      Matrix_1.7-3           \n[145] RcppHNSW_0.6.0          patchwork_1.3.0         bit64_4.6.0-1          \n[148] future_1.34.0           KEGGREST_1.46.0         shiny_1.10.0           \n[151] ROCR_1.0-11             broom_1.0.7             igraph_2.1.4           \n[154] memoise_2.0.1           bit_4.6.0"
  },
  {
    "objectID": "featureSelection.html",
    "href": "featureSelection.html",
    "title": "Feature Selection Method",
    "section": "",
    "text": "Introduction\nThe BatchSVG package implements feature selection using the binomial deviance model. In this vignette, we provide a detailed justification for selecting the binomial deviance model as the most appropriate approach for our method. Through comprehensive comparisons with alternative feature selection models, we demonstrate its advantages in ranking spatially variable genes (SVGs), ensuring reproducibility, and mitigating batch effects.\n\n\nSpatialLIBD Dataset\nWe chose the dorsolateral prefrontal cortex (DLPFC) dataset available through the spatialLIBD package to help determine the appropriate feature selection method.\n\nlibrary(spatialLIBD)\nspatialLIBD_spe &lt;- fetch_data(type = \"spe\")\ntable(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\")])\n\n         subject\nsample_id Br5292 Br5595 Br8100\n   151507   4226      0      0\n   151508   4384      0      0\n   151509   4789      0      0\n   151510   4634      0      0\n   151669      0   3661      0\n   151670      0   3498      0\n   151671      0   4110      0\n   151672      0   4015      0\n   151673      0      0   3639\n   151674      0      0   3673\n   151675      0      0   3592\n   151676      0      0   3460\n\n\nWe ran the nnSVG model on the spatialLIBD data to identify SVGs.\n\nlibd_svg &lt;- read.csv(\"data/libd-all_nnSVG_p-05-features-df.csv\", \n    row.names = 1, check.names = FALSE)\nhead(libd_svg)\n\n                        source type         gene_id gene_version gene_name\nENSG00000187608 ensembl_havana gene ENSG00000187608            8     ISG15\nENSG00000131584 ensembl_havana gene ENSG00000131584           18     ACAP3\nENSG00000242485 ensembl_havana gene ENSG00000242485            5    MRPL20\nENSG00000160075 ensembl_havana gene ENSG00000160075           11     SSU72\nENSG00000078369 ensembl_havana gene ENSG00000078369           17      GNB1\nENSG00000187730 ensembl_havana gene ENSG00000187730            8     GABRD\n                   gene_source   gene_biotype             gene_search\nENSG00000187608 ensembl_havana protein_coding  ISG15; ENSG00000187608\nENSG00000131584 ensembl_havana protein_coding  ACAP3; ENSG00000131584\nENSG00000242485 ensembl_havana protein_coding MRPL20; ENSG00000242485\nENSG00000160075 ensembl_havana protein_coding  SSU72; ENSG00000160075\nENSG00000078369 ensembl_havana protein_coding   GNB1; ENSG00000078369\nENSG00000187730 ensembl_havana protein_coding  GABRD; ENSG00000187730\n                is_top_hvg    sigma.sq    tau.sq          phi    loglik runtime\nENSG00000187608       TRUE 0.014755187 0.3356806 9.119204e+00 -42272.79  23.241\nENSG00000131584      FALSE 0.001055874 0.2868728 6.900461e-02 -37864.96  20.942\nENSG00000242485      FALSE 0.001656123 0.4411004 1.497840e-02 -48094.96  20.343\nENSG00000160075      FALSE 0.003069247 0.4646316 1.716212e-03 -49391.53  19.676\nENSG00000078369      FALSE 0.007099322 0.7113184 3.456360e-07 -59584.20  23.359\nENSG00000187730      FALSE 0.007227928 0.4965150 1.795660e-04 -51122.73  20.104\n                     mean       var      spcov     prop_sv loglik_lm    LR_stat\nENSG00000187608 0.3141369 0.3505163 0.38668154 0.042105251 -42543.76 541.936437\nENSG00000131584 0.2860178 0.2879378 0.11360906 0.003667137 -37868.30   6.688740\nENSG00000242485 0.4788772 0.4427726 0.08498106 0.003740482 -48098.53   7.151903\nENSG00000160075 0.5193062 0.4677126 0.10668230 0.006562414 -49401.30  19.526820\nENSG00000078369 1.0635173 0.7184340 0.07922530 0.009881886 -59605.57  42.730757\nENSG00000187730 0.5727988 0.5037425 0.14842423 0.014348446 -51165.59  85.727756\n                rank         pval         padj\nENSG00000187608  167 0.000000e+00 0.000000e+00\nENSG00000131584 1953 3.528243e-02 4.669999e-02\nENSG00000242485 1910 2.798878e-02 3.788010e-02\nENSG00000160075 1282 5.751816e-05 1.159785e-04\nENSG00000078369  839 5.261797e-10 1.621185e-09\nENSG00000187730  548 0.000000e+00 0.000000e+00\n\n\n\n\nFeature Selection Comparisons\n\nEligible Options\nOur feature selection method should incorporate the batch variable to assess per-gene deviance and ranking differences when the model is applied with and without batch correction. To achieve this, we compared three different approaches from two packages, each based on distinct statistical models:\n\nscran\nThe scran package employs a mean-variance modeling framework to identify highly variable genes after normalizing the count matrix. We refer to this method as mean-variance model.\n\nmodelGeneVar(): Estimates per-gene variance by fitting a smooth trend to the mean-variance relationship, accounting for complex noise structures in the data.\nmodelGeneVarByPois(): Assumes that the mean-variance relationship primarily arises from technical noise following a Poisson distribution.\n\nscry\nThe scry package implements a deviance-based feature selection approach directly on the raw count matrix. Assumes that genes with no biologically meaningful expression pattern will fit a binomial distribution. We refer to this method as binomial deviance model.\n\ndevianceFeatureSelect(): The greater the per-gene deviance from this null model, the more likely the expression of said gene is biologically meaningful as a top feature.\n\n\n\n\nRequired package load\n\nlibrary(scry)\nlibrary(scran)\nlibrary(SingleCellExperiment)\nlibrary(SummarizedExperiment)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(ggrepel)\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(ggspavis)\nlibrary(ggbreak)\nlibrary(gt)\n\n\n\nSimilarly Identify SVGs as highly ranked features\nOur goal is to determine whether SVGs exhibit biased expression according of different batch variables. Therefore, the ideal feature selection model would similarly identify SVGs as highly ranked features.\n\nmv &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv$ensembl &lt;- rownames(mv)\nmv$rank &lt;- (nrow(mv)+1)-rank(mv$bio)\ntop_hvgs_mv &lt;- getTopHVGs(mv, n = 3000)\nmv$is_svg = factor(mv$ensembl %in% libd_svg$gene_id, \n                    levels=c(TRUE, FALSE), labels=c(\"SVGs\",\"not SVGs\"))\n\nmvpois &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmvpois$ensembl &lt;- rownames(mvpois)\nmvpois$rank &lt;- (nrow(mvpois) + 1) - rank(mvpois$bio)\ntop_hvgs_mvpois &lt;- getTopHVGs(mvpois, n = 3000)\nmvpois$is_svg = factor(mvpois$ensembl %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd_df &lt;- cbind.data.frame(\"gene\" = names(bd),\n            \"gene_name\" = rowData(spatialLIBD_spe)[names(bd),\"gene_name\"],\n            \"dev\"= bd,\n            \"rank\" = (length(bd)+1) - rank(bd))\nrownames(bd_df) &lt;- bd_df$gene\nbd_df$is_svg = factor(bd_df$gene %in% libd_svg$gene_id, \n                    levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nbd_batch &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), \n            fam = \"binomial\", batch = as.factor(spatialLIBD_spe$subject))\nbd_batch_df &lt;- cbind.data.frame(\"gene\" = rownames(spatialLIBD_spe),\n            \"gene_name\" = rowData(spatialLIBD_spe)$gene_name,\n            \"dev\"= bd_batch,\n            \"rank\" = (length(bd_batch)+1) - rank(bd_batch))\nrownames(bd_batch_df) &lt;- bd_batch_df$gene\nbd_batch_df$is_svg = factor(bd_batch_df$gene %in% libd_svg$gene_id, \n            levels = c(TRUE, FALSE), labels = c(\"SVGs\",\"not SVGs\"))\n\nWe found that both modelGeneVar() and modelGeneVarByPoisson() approaches rank a considerable portion of the SVGs as some of the lowest features in the dataset.\nFigure 1A. Mean-variance model rank some nnSVG results as low ranked features\n\n\n\n\n\nIn contrast, all the SVGs are ranked highly with the binomial deviance model (devianceFeatureSelection()). We can also saw that including a subject-batch effect didn’t dramatically change the rank of the SVGs.\nFigure 1B. Binomial deviance model better corresponds to nnSVG results\n\n\n\n\n\nWhat’s more, more than 90% of spatialLIBD SVGs are ranked in the top 3000 features by binomial deviance model with and without batch = subject.\n\nquantile(bd_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  200.6  400.2  606.8  830.4 1060.0 1316.8 1601.2 1913.6 2256.8 4077.0 \n\nquantile(bd_batch_df[libd_svg$gene_id, \"rank\"], probs = seq(0, 1, 0.1))\n\n    0%    10%    20%    30%    40%    50%    60%    70%    80%    90%   100% \n   1.0  199.2  401.2  606.8  830.4 1060.0 1316.6 1603.2 1917.8 2271.4 5903.0 \n\n\n\n\nIdentify batch biased genes\nUsing the modelGeneVar() function, we compared the rank with and without the batch = subject and we noticed that there are two groups of features ranked highly in one model but lowly in another model (top left group and bottom right group).\n\nmv_batch &lt;- modelGeneVar(logcounts(spatialLIBD_spe),\n                        block=as.factor(spatialLIBD_spe$subject))\nmv_batch$ensembl &lt;- rownames(mv_batch)\nmv_batch$rank &lt;- (nrow(mv_batch) + 1) - rank(mv_batch$bio)\n\nmv_rank_diff &lt;- left_join(\n    as.data.frame(mv[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    as.data.frame(mv_batch[,c(\"ensembl\",\"mean\",\"bio\",\"rank\")]),\n    by = c(\"ensembl\"), suffix=c(\"_default\",\"_subject\"))\nmv_rank_diff$gene_name &lt;- \n    rowData(spatialLIBD_spe)[mv_rank_diff$ensembl,\"gene_name\"]\n\ntop_3k_mv_batch &lt;- mv_rank_diff |&gt; \n    filter(rank_default &lt;= 3000 | rank_subject &lt;= 3000) |&gt;\n    mutate(batch_impact = rank_default &gt; 30000 | rank_subject &gt; 30000)\ntop_3k_mv_batch_genes &lt;- top_3k_mv_batch |&gt;\n    filter(batch_impact == TRUE)\n\nFig2A. Comparison of feature rank with and without subject batch\n\n\n\n\n\nThen, we looked at both groups of genes in red to see if they exhibit true subject-biased expression. Here we used RAPGEF5 as example.\n\nRAPGEF5_ensembl &lt;- top_3k_mv_batch_genes |&gt; filter(gene_name == \"RAPGEF5\") |&gt;\n    pull(ensembl)\nRAPGEF5_expr &lt;- logcounts(spatialLIBD_spe)[RAPGEF5_ensembl, , drop = FALSE]\n\nmv_expr_df &lt;- cbind.data.frame(\n    as.data.frame(colData(spatialLIBD_spe)[,c(\"sample_id\",\"subject\",\n        \"layer_guess_reordered_short\")]),\n        avg.logcounts = as.vector(RAPGEF5_expr)) |&gt;\n    group_by(sample_id, subject,  layer_guess_reordered_short) |&gt;\n    summarise(avg.logcounts = mean(avg.logcounts, na.rm = TRUE), \n        .groups = \"drop\") |&gt;\n    filter(!is.na(layer_guess_reordered_short))\n\nFig2B. RAPGEF5 is not subject biased but correlate with WM\n\n\n\n\n\nThe plot illustrates the average expression of each sample across spatial domains alongside the spatial expression pattern of RAPGEF5. The graded expression across cortical layers suggests that RAPGEF5 is spatially variable, with substantial differences in expression between subjects. However, its spatial expression pattern does not indicate subject bias.\nThus, the changes in gene ranking when setting batch = subject in the modelGeneVar() function do not effectively identify potentially subject-biased genes.\n\n\nReproducibility in multiple runs\nWe set the seed to check the reproducibility of each approach.\n\nset.seed(123)\n\n\ndevianceFeatureSelection()\n\n\nbd1 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\nbd2 &lt;- devianceFeatureSelection(counts(spatialLIBD_spe), fam = \"binomial\")\n\nbd_repro &lt;- cbind(as.data.frame(bd1), as.data.frame(bd2)) |&gt;\n    mutate(abs_diff_dev_is_zero = (abs(bd1 - bd2) &lt; 1e-10))\n\n\nmodelGeneVar()\n\n\nmv1 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\nmv2 &lt;- modelGeneVar(logcounts(spatialLIBD_spe))\n\nmv1$ensembl &lt;- rownames(mv1)\nmv1$rank &lt;- (nrow(mv1) + 1) - rank(mv1$bio)\ntop_hvgs_mv1 &lt;- getTopHVGs(mv1, n = 3000)\nmv1_df &lt;- as.data.frame(mv1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv2$ensembl &lt;- rownames(mv2)\nmv2$rank &lt;- (nrow(mv2) + 1) - rank(mv2$bio)\ntop_hvgs_mv2 &lt;- getTopHVGs(mv2, n = 3000)\nmv2_df &lt;- as.data.frame(mv2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_repro &lt;- left_join(mv1_df, mv2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmv_repro &lt;- mv_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\n\nmodelGeneVarByPoisson()\n\n\nmv_pois1 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\nmv_pois2 &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe))\n\nmv_pois1$ensembl &lt;- rownames(mv_pois1)\nmv_pois1$rank &lt;- (nrow(mv_pois1) + 1) - rank(mv_pois1$bio)\ntop_hvgs_mv_pois1 &lt;- getTopHVGs(mv_pois1, n = 3000)\nmv_pois1_df &lt;- as.data.frame(mv_pois1[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmv_pois2$ensembl &lt;- rownames(mv_pois2)\nmv_pois2$rank &lt;- (nrow(mv_pois2) + 1) - rank(mv_pois2$bio)\ntop_hvgs_mv_pois2 &lt;- getTopHVGs(mv_pois2, n = 3000)\nmv_pois2_df &lt;- as.data.frame(mv_pois2[, c(\"ensembl\", \"bio\", \"rank\")])\n\nmvpois_repro &lt;- left_join(mv_pois1_df, mv_pois2_df,\n        by = \"ensembl\", suffix = c(\"_1\", \"_2\"))\nmvpois_repro &lt;- mvpois_repro |&gt;\n    mutate(abs_diff_var = abs(bio_1 - bio_2),\n        abs_diff_var_is_zero = (abs_diff_var &lt; 1e-10))\n\nWe observed that the modelGeneVar() function and devianceFeatureSelection() function both produce identical results with different runs, which ensures the reproducibility.\nFig3A. modelGeneVar() and modelGeneVarByPoisson() ensures reproducibility\n\n\n\n\n\nHowever, even with the same seed, the modelGeneVarByPoisson() function does not produce identical variance results, leading to rank fluctuations that can significantly impact the identification of highly variable genes (HVGs).\nFig3B. modelGeneVarByPoisson() causes variance fluctuations (rank changes)\n\n\n\n\n\nUsing the modelGeneVarByPoisson() function does identify some rank differences due to batch = subject but are inconsistent. Compared to modelGeneVar() function, the poisson assumptions for technical variation reduced the number of features that were highly ranked with batch = NULL and highly ranked with batch = subject.\n\nmv_pois_batch &lt;- modelGeneVarByPoisson(logcounts(spatialLIBD_spe),\n                    block = as.factor(spatialLIBD_spe$subject))\n\nmv_pois_batch$ensembl &lt;- rownames(mv_pois_batch)\nmv_pois_batch$rank &lt;- (nrow(mv_pois_batch) + 1) - rank(mv_pois_batch$bio)\n\nvar_diff_pois &lt;- mvpois_repro |&gt;\n    left_join(as.data.frame(mv_pois_batch[,c(\"ensembl\", \"rank\", \"bio\")]))\nvar_diff_pois$gene_name &lt;-\n    rowData(spatialLIBD_spe)[var_diff_pois$ensembl,\"gene_name\"]\n\nFig3C. Poisson assumption reduced the number of highly ranked features\n\n\n\n\n\nMoreover, introducing the batch variable to the modelGeneVarByPoisson() function resulted in inconsistencies that altered the top-ranked features, potentially including genes that are not subject-biased (e.g., COMMD6).\nFig3D. Introduction of batch to modelGeneVarByPoisson() causes inconsistencies\n\n\n\n\n\nTherefore, the inconsistencies in the modelGeneVarByPoisson() function may contribute to its failure in identifying subject-biased genes.\n\n\nAdditional Property: match DLPFC cortical layer\nA separate but related property of the ideal feature selection model would be to generate a list of top features that are consistent with known DLPFC layer markers and comprise markers of all layer domains. We used the recently published list of DLPFC layer markers to characterize the top 3000 features of the mean-variance and binomial deviance models.\n\ndlpfc_layer_marker &lt;- read.csv(\"data/TableS8_filtered-layer-markers.csv\",\n    row.names = 1, check.names = FALSE)\n\n# Binomial deviance model\ntop_bd_3k &lt;- bd_df |&gt; filter(rank &lt;= 3000)\ndlpfc_bd_is &lt;- semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_bd_3k, by=c(\"ensembl\"=\"gene\"))\ndlpfc_bd_not = anti_join(\n    top_bd_3k |&gt; filter(gene %in% setdiff(top_bd_3k$gene, dlpfc_bd_is$ensembl)),\n    dlpfc_bd_is, by = c(\"gene\" = \"ensembl\")) |&gt;\n    mutate(domain_simple = \"none\") |&gt; \n    rename(ensembl = gene, gene = gene_name) |&gt;\n    select(ensembl, gene, domain_simple) # not included in DLPFC marker table\ndlpfc_bd_3k &lt;- rbind(dlpfc_bd_is, dlpfc_bd_not) |&gt;\n    mutate(domain_simple=factor(domain_simple,\n        levels=c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model\ntop_3k_mv &lt;- as.data.frame(mv[top_hvgs_mv,]) |&gt;\n    select(ensembl)\ndlpfc_mv_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mv, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mv_not = anti_join(\n    filter(top_3k_mv, \n        ensembl %in% setdiff(top_hvgs_mv, dlpfc_mv_is$ensembl)), \n    dlpfc_mv_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mv_3k = rbind(dlpfc_mv_is, dlpfc_mv_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\n# Mean-variance model - Pois\ntop_3k_mvpois &lt;- as.data.frame(mvpois[top_hvgs_mvpois,]) |&gt;\n    select(ensembl)\ndlpfc_mvpois_is = semi_join(\n    dlpfc_layer_marker[,c(\"gene\",\"ensembl\",\"domain_simple\")], \n    top_3k_mvpois, by = c(\"ensembl\")) |&gt;\n    select(-gene)\ndlpfc_mvpois_not = anti_join(\n    filter(top_3k_mvpois, \n        ensembl %in% setdiff(top_hvgs_mvpois, dlpfc_mvpois_is$ensembl)), \n    dlpfc_mvpois_is, by = c(\"ensembl\")) %&gt;%\n    mutate(domain_simple = \"none\")\ndlpfc_mvpois_3k = rbind(dlpfc_mvpois_is, dlpfc_mvpois_not) %&gt;% \n    mutate(domain_simple = factor(domain_simple,\n        levels = c(\"L1\",\"L2\",\"L3\",\"L4\",\"L5\",\"L6\",\"WM\",\"none\")))\n\nThese results further supported the selection of the binomial deviance model, as the 3000 most highly ranked features represented significant markers for all DLPFC cortical layers. In contrast, the 3000 most highly ranked features from the mean-variance model were overwhelmingly L1 and white matter (WM) markers.\nFig4. Binomial deviance model better corresponds to known DLPFC layer markers\n\n\n\n\n\n\n\n\nSummary\nTable1. Summary of the evaluation on each approach\n\n\n\n\n\n\n  \n    \n      Package\n      Function\n      SVGs as Highly Ranked Features\n      Batch Biased Features\n      Reproducibility\n      DLPFC layer marker\n    \n  \n  \n    scry\ndevianceFeatureSelection()\n✔\n✔\n✔\n✔\n    scran\nmodelGeneVar()\n✘\n✘\n✔\n✘\n    scran\nmodelGeneVarByPoisson()\n✘\n✔\n✘\n✘\n  \n  \n  \n\n\n\n\n\n\nR session information\n\n## Session info\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] gt_0.11.1                   ggbreak_0.1.4              \n [3] ggspavis_1.12.0             lubridate_1.9.4            \n [5] forcats_1.0.0               stringr_1.5.1              \n [7] dplyr_1.1.4                 purrr_1.0.4                \n [9] readr_2.1.5                 tidyr_1.3.1                \n[11] tidyverse_2.0.0             tibble_3.2.1               \n[13] ggrepel_0.9.6               gridExtra_2.3              \n[15] ggplot2_3.5.1               scran_1.34.0               \n[17] scuttle_1.16.0              scry_1.18.0                \n[19] spatialLIBD_1.18.0          SpatialExperiment_1.16.0   \n[21] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0\n[23] Biobase_2.66.0              GenomicRanges_1.58.0       \n[25] GenomeInfoDb_1.42.3         IRanges_2.40.1             \n[27] S4Vectors_0.44.0            BiocGenerics_0.52.0        \n[29] MatrixGenerics_1.18.1       matrixStats_1.5.0          \n\nloaded via a namespace (and not attached):\n  [1] later_1.4.1              BiocIO_1.16.0            ggplotify_0.1.2         \n  [4] bitops_1.0-9             filelock_1.0.3           fields_16.3.1           \n  [7] XML_3.99-0.18            lifecycle_1.0.4          edgeR_4.4.2             \n [10] doParallel_1.0.17        lattice_0.22-6           magrittr_2.0.3          \n [13] limma_3.62.2             plotly_4.10.4            sass_0.4.9              \n [16] rmarkdown_2.29           jquerylib_0.1.4          yaml_2.3.10             \n [19] metapod_1.14.0           httpuv_1.6.15            ggside_0.3.1            \n [22] spam_2.11-1              sessioninfo_1.2.3        cowplot_1.1.3           \n [25] DBI_1.2.3                RColorBrewer_1.1-3       golem_0.5.1             \n [28] maps_3.4.2.1             abind_1.4-8              zlibbioc_1.52.0         \n [31] RCurl_1.98-1.17          yulab.utils_0.2.0        rappdirs_0.3.3          \n [34] GenomeInfoDbData_1.2.13  irlba_2.3.5.1            dqrng_0.4.1             \n [37] codetools_0.2-20         DelayedArray_0.32.0      xml2_1.3.8              \n [40] DT_0.33                  tidyselect_1.2.1         aplot_0.2.5             \n [43] farver_2.1.2             UCSC.utils_1.2.0         ScaledMatrix_1.14.0     \n [46] viridis_0.6.5            shinyWidgets_0.9.0       BiocFileCache_2.14.0    \n [49] GenomicAlignments_1.42.0 jsonlite_1.9.1           BiocNeighbors_2.0.1     \n [52] scater_1.34.1            iterators_1.0.14         foreach_1.5.2           \n [55] tools_4.4.2              Rcpp_1.0.14              glue_1.8.0              \n [58] SparseArray_1.6.2        xfun_0.51                withr_3.0.2             \n [61] BiocManager_1.30.25      fastmap_1.2.0            bluster_1.16.0          \n [64] digest_0.6.37            rsvd_1.0.5               gridGraphics_0.5-1      \n [67] timechange_0.3.0         R6_2.6.1                 mime_0.13               \n [70] colorspace_2.1-1         RSQLite_2.3.9            config_0.3.2            \n [73] generics_0.1.3           data.table_1.17.0        rtracklayer_1.66.0      \n [76] httr_1.4.7               htmlwidgets_1.6.4        S4Arrays_1.6.0          \n [79] pkgconfig_2.0.3          gtable_0.3.6             blob_1.2.4              \n [82] XVector_0.46.0           htmltools_0.5.8.1        dotCall64_1.2           \n [85] scales_1.3.0             png_0.1-8                attempt_0.3.1           \n [88] ggfun_0.1.8              knitr_1.50               rstudioapi_0.17.1       \n [91] tzdb_0.5.0               rjson_0.2.23             curl_6.2.2              \n [94] cachem_1.1.0             BiocVersion_3.20.0       parallel_4.4.2          \n [97] vipor_0.4.7              AnnotationDbi_1.68.0     restfulr_0.0.15         \n[100] pillar_1.10.1            grid_4.4.2               vctrs_0.6.5             \n[103] promises_1.3.2           BiocSingular_1.22.0      dbplyr_2.5.0            \n[106] beachmat_2.22.0          xtable_1.8-4             cluster_2.1.8.1         \n[109] beeswarm_0.4.0           paletteer_1.6.0          evaluate_1.0.3          \n[112] magick_2.8.6             cli_3.6.4                locfit_1.5-9.12         \n[115] compiler_4.4.2           Rsamtools_2.22.0         rlang_1.1.5             \n[118] crayon_1.5.3             labeling_0.4.3           rematch2_2.1.2          \n[121] fs_1.6.5                 ggbeeswarm_0.7.2         stringi_1.8.4           \n[124] viridisLite_0.4.2        BiocParallel_1.40.0      munsell_0.5.1           \n[127] Biostrings_2.74.1        lazyeval_0.2.2           Matrix_1.7-3            \n[130] ExperimentHub_2.14.0     benchmarkme_1.0.8        patchwork_1.3.0         \n[133] hms_1.1.3                bit64_4.6.0-1            KEGGREST_1.46.0         \n[136] statmod_1.5.0            shiny_1.10.0             AnnotationHub_3.14.0    \n[139] igraph_2.1.4             memoise_2.0.1            bslib_0.9.0             \n[142] benchmarkmeData_1.0.4    bit_4.6.0"
  }
]